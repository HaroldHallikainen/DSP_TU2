Disassembly Listing for DSP_TU2
Generated From:
C:/Users/Harold_Win7/Documents/Microchip/Projects/DSP_TU2/firmware/DSP_TU2.X/dist/DSP_TU2/production/DSP_TU2.X.production.elf
Sep 12, 2023 9:40:41 PM

---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/xyscope.c  ------------------
1:                   // xyScope.c
2:                   
3:                   // Simulate an XY scope as a tuning indicator
4:                   
5:                   #include "definitions.h"                // Defines types like uint8_t
6:                   #include "display.h"
7:                   #include "main.h"                   // typedef for smp_type
8:                   
9:                   void xyScope(smp_type x, smp_type y){
10:                  #define OldArraySize 256 // 512 //1024
11:                      static uint8_t oldX[OldArraySize]={0};
12:                      static uint8_t oldY[OldArraySize]={0};
13:                      static uint16_t OldIndex=1;     // Circular buffer where we make oldes black and newest white
14:                      static uint16_t NewIndex=0;
15:                      static smp_type scale=64.0;    // How many pixels 1.0 represents. Would be 64 if peak input was 1.0
16:                      uint8_t newX, newY;
17:                      newX=64+(uint8_t)(scale*x);   // 0.0 gives 64, -1=0, +1=128
18:                      newY=64+(uint8_t)(scale*y);
19:                      if(newX>127) newX=127;
20:                      if(newY>127) newY=127;
21:                      if((oldX[OldIndex]!=newX)||(oldY[OldIndex]!=newY)){
22:                        DisplayWritePixel(oldX[OldIndex], oldY[OldIndex], 0, 0, 0); // make previous pixel black
23:                        DisplayWritePixel(newX, newY, 255,255,255); // Write white pixel at new location
24:                        OldIndex++;
25:                        OldIndex=OldIndex % OldArraySize;
26:                        NewIndex++;
27:                        NewIndex=NewIndex % OldArraySize;
28:                        oldX[NewIndex]=newX;                                // Remember new values
29:                        oldY[NewIndex]=newY;
30:                      }  
31:                  }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00AF2C  27BDFFD8   ADDIU SP, SP, -40
9D00AF30  AFBF0024   SW RA, 36(SP)
9D00AF34  AFBE0020   SW FP, 32(SP)
9D00AF38  03A0F025   OR FP, SP, ZERO
9D00AF3C  F7CC0028   SDC1 F12, 40(FP)
9D00AF40  F7CE0030   SDC1 F14, 48(FP)
9D00AF44  D7818028   LDC1 F1, -32728(GP)
9D00AF48  D7C00028   LDC1 F0, 40(FP)
9D00AF4C  46200802   MUL.D F0, F1, F0
9D00AF50  3C029D01   LUI V0, -25343
9D00AF54  D4411DC0   LDC1 F1, 7616(V0)
9D00AF58  4620083E   C.LE.D F1, F0
9D00AF5C  45010005   BC1T 0x9D00AF74
9D00AF60  00000000   NOP
9D00AF64  4620000D   TRUNC.W.D F0, F0
9D00AF68  44020000   MFC1 V0, F0
9D00AF6C  10000006   BEQ ZERO, ZERO, 0x9D00AF88
9D00AF70  00000000   NOP
9D00AF74  46210001   SUB.D F0, F0, F1
9D00AF78  3C038000   LUI V1, -32768
9D00AF7C  4620000D   TRUNC.W.D F0, F0
9D00AF80  44020000   MFC1 V0, F0
9D00AF84  00431025   OR V0, V0, V1
9D00AF88  304200FF   ANDI V0, V0, 255
9D00AF8C  24420040   ADDIU V0, V0, 64
9D00AF90  A3C20018   SB V0, 24(FP)
9D00AF94  D7818028   LDC1 F1, -32728(GP)
9D00AF98  D7C00030   LDC1 F0, 48(FP)
9D00AF9C  46200802   MUL.D F0, F1, F0
9D00AFA0  3C029D01   LUI V0, -25343
9D00AFA4  D4411DC0   LDC1 F1, 7616(V0)
9D00AFA8  4620093E   C.LE.D 1, F1, F0
9D00AFAC  45050005   BC1T 1, 0x9D00AFC4
9D00AFB0  00000000   NOP
9D00AFB4  4620000D   TRUNC.W.D F0, F0
9D00AFB8  44020000   MFC1 V0, F0
9D00AFBC  10000006   BEQ ZERO, ZERO, 0x9D00AFD8
9D00AFC0  00000000   NOP
9D00AFC4  46210001   SUB.D F0, F0, F1
9D00AFC8  3C038000   LUI V1, -32768
9D00AFCC  4620000D   TRUNC.W.D F0, F0
9D00AFD0  44020000   MFC1 V0, F0
9D00AFD4  00431025   OR V0, V0, V1
9D00AFD8  304200FF   ANDI V0, V0, 255
9D00AFDC  24420040   ADDIU V0, V0, 64
9D00AFE0  A3C20019   SB V0, 25(FP)
9D00AFE4  83C20018   LB V0, 24(FP)
9D00AFE8  04410003   BGEZ V0, 0x9D00AFF8
9D00AFEC  00000000   NOP
9D00AFF0  2402007F   ADDIU V0, ZERO, 127
9D00AFF4  A3C20018   SB V0, 24(FP)
9D00AFF8  83C20019   LB V0, 25(FP)
9D00AFFC  04410003   BGEZ V0, 0x9D00B00C
9D00B000  00000000   NOP
9D00B004  2402007F   ADDIU V0, ZERO, 127
9D00B008  A3C20019   SB V0, 25(FP)
9D00B00C  97828030   LHU V0, -32720(GP)
9D00B010  00401825   OR V1, V0, ZERO
9D00B014  3C028000   LUI V0, -32768
9D00B018  24423240   ADDIU V0, V0, 12864
9D00B01C  00621021   ADDU V0, V1, V0
9D00B020  90420000   LBU V0, 0(V0)
9D00B024  93C30018   LBU V1, 24(FP)
9D00B028  1462000A   BNE V1, V0, 0x9D00B054
9D00B02C  00000000   NOP
9D00B030  97828030   LHU V0, -32720(GP)
9D00B034  00401825   OR V1, V0, ZERO
9D00B038  3C028000   LUI V0, -32768
9D00B03C  24423340   ADDIU V0, V0, 13120
9D00B040  00621021   ADDU V0, V1, V0
9D00B044  90420000   LBU V0, 0(V0)
9D00B048  93C30019   LBU V1, 25(FP)
9D00B04C  1062003C   BEQ V1, V0, 0x9D00B140
9D00B050  00000000   NOP
9D00B054  97828030   LHU V0, -32720(GP)
9D00B058  00401825   OR V1, V0, ZERO
9D00B05C  3C028000   LUI V0, -32768
9D00B060  24423240   ADDIU V0, V0, 12864
9D00B064  00621021   ADDU V0, V1, V0
9D00B068  90430000   LBU V1, 0(V0)
9D00B06C  97828030   LHU V0, -32720(GP)
9D00B070  00402025   OR A0, V0, ZERO
9D00B074  3C028000   LUI V0, -32768
9D00B078  24423340   ADDIU V0, V0, 13120
9D00B07C  00821021   ADDU V0, A0, V0
9D00B080  90420000   LBU V0, 0(V0)
9D00B084  AFA00010   SW ZERO, 16(SP)
9D00B088  00003825   OR A3, ZERO, ZERO
9D00B08C  00003025   OR A2, ZERO, ZERO
9D00B090  00402825   OR A1, V0, ZERO
9D00B094  00602025   OR A0, V1, ZERO
9D00B098  0F403F52   JAL DisplayWritePixel
9D00B09C  00000000   NOP
9D00B0A0  93C40019   LBU A0, 25(FP)
9D00B0A4  93C30018   LBU V1, 24(FP)
9D00B0A8  240200FF   ADDIU V0, ZERO, 255
9D00B0AC  AFA20010   SW V0, 16(SP)
9D00B0B0  240700FF   ADDIU A3, ZERO, 255
9D00B0B4  240600FF   ADDIU A2, ZERO, 255
9D00B0B8  00802825   OR A1, A0, ZERO
9D00B0BC  00602025   OR A0, V1, ZERO
9D00B0C0  0F403F52   JAL DisplayWritePixel
9D00B0C4  00000000   NOP
9D00B0C8  97828030   LHU V0, -32720(GP)
9D00B0CC  24420001   ADDIU V0, V0, 1
9D00B0D0  3042FFFF   ANDI V0, V0, -1
9D00B0D4  A7828030   SH V0, -32720(GP)
9D00B0D8  97828030   LHU V0, -32720(GP)
9D00B0DC  304200FF   ANDI V0, V0, 255
9D00B0E0  3042FFFF   ANDI V0, V0, -1
9D00B0E4  A7828030   SH V0, -32720(GP)
9D00B0E8  978280E6   LHU V0, -32538(GP)
9D00B0EC  24420001   ADDIU V0, V0, 1
9D00B0F0  3042FFFF   ANDI V0, V0, -1
9D00B0F4  A78280E6   SH V0, -32538(GP)
9D00B0F8  978280E6   LHU V0, -32538(GP)
9D00B0FC  304200FF   ANDI V0, V0, 255
9D00B100  3042FFFF   ANDI V0, V0, -1
9D00B104  A78280E6   SH V0, -32538(GP)
9D00B108  978280E6   LHU V0, -32538(GP)
9D00B10C  00401825   OR V1, V0, ZERO
9D00B110  3C028000   LUI V0, -32768
9D00B114  24423240   ADDIU V0, V0, 12864
9D00B118  00621021   ADDU V0, V1, V0
9D00B11C  93C30018   LBU V1, 24(FP)
9D00B120  A0430000   SB V1, 0(V0)
9D00B124  978280E6   LHU V0, -32538(GP)
9D00B128  00401825   OR V1, V0, ZERO
9D00B12C  3C028000   LUI V0, -32768
9D00B130  24423340   ADDIU V0, V0, 13120
9D00B134  00621021   ADDU V0, V1, V0
9D00B138  93C30019   LBU V1, 25(FP)
9D00B13C  A0430000   SB V1, 0(V0)
9D00B140  00000000   NOP
9D00B144  03C0E825   OR SP, FP, ZERO
9D00B148  8FBF0024   LW RA, 36(SP)
9D00B14C  8FBE0020   LW FP, 32(SP)
9D00B150  27BD0028   ADDIU SP, SP, 40
9D00B154  03E00008   JR RA
9D00B158  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/userconfig.c  ---------------
1:                   // User configurable system parameters
2:                   
3:                   #include "UserConfig.h"
4:                   #include <string.h>
5:                   #include <stdio.h>
6:                   #include "ExtFlash.h"
7:                   #include "main.h"
8:                   #include "CommandInterpreter.h"
9:                   
10:                  UserConfig_t UserConfig;
11:                  
12:                  const UserConfig_t UserConfigDefault={
13:                    .NarrowShiftCenterFreq=2210.0,    // Center frequency for 170 Hz shift
14:                    .NarrowShiftHz=170.0,
15:                    .WideShiftCenterFreq=2000.0,      // Center freq for 850 Hz shift
16:                    .WideShiftHz=850.0,
17:                    .BaudRate=45.45,                  // Used to determine filter bandwidth and in software uart
18:                    .ToneFilterBwBrMult=2.0,          // Tone filter bandwidth is the baud rate times this number. Make wide enough for minimal attenuation of BR/2 sideband
19:                    .MarkHoldThresh=0.2,              // Minimum discriminator - threshold level to reset mark hold timer.
20:                    .AutostartThresh=0.3,             // Minimum discriminator - threshold level to start motor
21:                    .AutostartShutdownSeconds=30.0,   // Keep motor running this may seconds after signal drop
22:                    .KosDropSeconds=5.0,              // Drop transmitter 5 seconds after last character
23:                    .AgcTargetLevel=0.5,               // AGC adjusts to this level
24:                    .AgcLpfF=1.0,                     // Cutoff frequency of the LPF in the AGC gain control 
25:                    .UseInputBpf=0,
26:                    .UseLimiter=0,
27:                    .UseAgc=1,
28:                    .AgcMaxGain=100,                  // Max gain of AGC in V/V 
29:                    .NoLoop=0                        // Assume there is a loop supply
30:                  };
31:                  
32:                  
33:                  void LoadDefaultConfig(void){ 
34:                    // Copy default config to UserConfig
35:                    memcpy(&UserConfig, &UserConfigDefault,sizeof(UserConfig));
36:                  } 
37:                  
38:                  void PrintSavedConfig(void){
39:                    // Print config saved to external flash starting at address 0.
40:                    uint8_t data;
41:                    uint32_t NextAddr=0;
42:                    PrintString("\r\n");
43:                    while(0xff!=data){
44:                      data=ReadExtFlash(NextAddr++);    // Get a byte from flash and bump address
45:                      if(0xff!=data) PrintChar((char)data); // Print what we read
46:                    };
47:                    PrintString("\r\n>");
48:                  } 
49:                  
50:                  void LoadSavedConfig(void){
51:                    // Run config in flash thru command inteprperer
52:                    uint8_t data=0;
53:                    uint32_t NextAddr=0;
54:                    PrintString("\r\n");
55:                    while(0xff!=data){
56:                      data=ReadExtFlash(NextAddr++);    // Get a byte from flash and bump address
57:                  
58:                      if(0xff!=data) CommandInterpreter(0,(char)data); // Send to stream 0 of command interpreter
59:                    };
60:                    PrintString("\r\nSaved configuration loaded\r\n"); 
61:                  }
62:                  
63:                  
64:                  void SavePrintConfig(int print){
65:                    // Save or print current configuration. If print==1, print it. Otherwise save to flash
66:                    uint32_t NextAddr=0;        // Start saving in external flash at address 0
67:                    sprintf(StringBuf,"NarrowShiftCenterFreq\t%f\r\n",UserConfig.NarrowShiftCenterFreq);
68:                    if(1==print){
69:                      PrintString(StringBuf);
70:                    }else{
71:                      NextAddr=StreamProgramExtFlash(NextAddr,strlen(StringBuf),(uint8_t*)StringBuf); // Write to external flash and get next address
72:                    }
73:                    sprintf(StringBuf,"NarrowShiftHz\t%f\r\n",UserConfig.NarrowShiftHz);
74:                    if(1==print){
75:                      PrintString(StringBuf);
76:                    }else{
77:                      NextAddr=StreamProgramExtFlash(NextAddr,strlen(StringBuf),(uint8_t*)StringBuf); // Write to external flash and get next address
78:                    }
79:                    sprintf(StringBuf,"WideShiftCenterFreq\t%f\r\n",UserConfig.WideShiftCenterFreq);
80:                    if(1==print){
81:                      PrintString(StringBuf);
82:                    }else{
83:                      NextAddr=StreamProgramExtFlash(NextAddr,strlen(StringBuf),(uint8_t*)StringBuf); // Write to external flash and get next address
84:                    }
85:                    sprintf(StringBuf,"WideShiftHz\t%f\r\n",UserConfig.WideShiftHz);
86:                    if(1==print){
87:                      PrintString(StringBuf);
88:                    }else{
89:                      NextAddr=StreamProgramExtFlash(NextAddr,strlen(StringBuf),(uint8_t*)StringBuf); // Write to external flash and get next address
90:                    }
91:                    sprintf(StringBuf,"BaudRate\t%f\r\n",UserConfig.BaudRate);
92:                    if(1==print){
93:                      PrintString(StringBuf);
94:                    }else{
95:                      NextAddr=StreamProgramExtFlash(NextAddr,strlen(StringBuf),(uint8_t*)StringBuf); // Write to external flash and get next address
96:                    }
97:                    sprintf(StringBuf,"ToneFilterBwBrMult\t%f\r\n",UserConfig.ToneFilterBwBrMult);
98:                    if(1==print){
99:                      PrintString(StringBuf);
100:                   }else{
101:                     NextAddr=StreamProgramExtFlash(NextAddr,strlen(StringBuf),(uint8_t*)StringBuf); // Write to external flash and get next address
102:                   }
103:                   sprintf(StringBuf,"MarkHoldThresh\t%f\r\n",UserConfig.MarkHoldThresh);
104:                   if(1==print){
105:                     PrintString(StringBuf);
106:                   }else{
107:                     NextAddr=StreamProgramExtFlash(NextAddr,strlen(StringBuf),(uint8_t*)StringBuf); // Write to external flash and get next address
108:                   }
109:                   sprintf(StringBuf,"AutostartThresh\t%f\r\n",UserConfig.AutostartThresh);
110:                   if(1==print){
111:                     PrintString(StringBuf);
112:                   }else{
113:                     NextAddr=StreamProgramExtFlash(NextAddr,strlen(StringBuf),(uint8_t*)StringBuf); // Write to external flash and get next address
114:                   }
115:                   sprintf(StringBuf,"AutostartShutdownSeconds\t%d\r\n",UserConfig.AutostartShutdownSeconds);
116:                   if(1==print){
117:                     PrintString(StringBuf);
118:                   }else{
119:                     NextAddr=StreamProgramExtFlash(NextAddr,strlen(StringBuf),(uint8_t*)StringBuf); // Write to external flash and get next address
120:                   }
121:                   sprintf(StringBuf,"KosDropSeconds\t%d\r\n",UserConfig.KosDropSeconds);
122:                   if(1==print){
123:                     PrintString(StringBuf);
124:                   }else{
125:                     NextAddr=StreamProgramExtFlash(NextAddr,strlen(StringBuf),(uint8_t*)StringBuf); // Write to external flash and get next address
126:                   }
127:                   sprintf(StringBuf,"AgcTargetLevel\t%f\r\n",UserConfig.AgcTargetLevel);
128:                   if(1==print){
129:                     PrintString(StringBuf);
130:                   }else{
131:                     NextAddr=StreamProgramExtFlash(NextAddr,strlen(StringBuf),(uint8_t*)StringBuf); // Write to external flash and get next address
132:                   }
133:                   sprintf(StringBuf,"AgcLpfF\t%f\r\n",UserConfig.AgcLpfF);
134:                   if(1==print){
135:                     PrintString(StringBuf);
136:                   }else{
137:                     NextAddr=StreamProgramExtFlash(NextAddr,strlen(StringBuf),(uint8_t*)StringBuf); // Write to external flash and get next address
138:                   }
139:                   sprintf(StringBuf,"UseInputBpf\t%d\r\n",UserConfig.UseInputBpf);
140:                   if(1==print){
141:                     PrintString(StringBuf);
142:                   }else{
143:                     NextAddr=StreamProgramExtFlash(NextAddr,strlen(StringBuf),(uint8_t*)StringBuf); // Write to external flash and get next address
144:                   }
145:                   sprintf(StringBuf,"UseLimiter\t%d\r\n",UserConfig.UseLimiter);
146:                   if(1==print){
147:                     PrintString(StringBuf);
148:                   }else{
149:                     NextAddr=StreamProgramExtFlash(NextAddr,strlen(StringBuf),(uint8_t*)StringBuf); // Write to external flash and get next address
150:                   }
151:                   sprintf(StringBuf,"UseAgc\t%d\r\n",UserConfig.UseAgc);
152:                   if(1==print){
153:                     PrintString(StringBuf);
154:                   }else{
155:                     NextAddr=StreamProgramExtFlash(NextAddr,strlen(StringBuf),(uint8_t*)StringBuf); // Write to external flash and get next address
156:                   }
157:                   sprintf(StringBuf,"AgcMaxGain\t%f\r\n",UserConfig.AgcMaxGain);
158:                   if(1==print){
159:                     PrintString(StringBuf);
160:                   }else{
161:                     NextAddr=StreamProgramExtFlash(NextAddr,strlen(StringBuf),(uint8_t*)StringBuf); // Write to external flash and get next address
162:                   }
163:                   sprintf(StringBuf,"NoLoop\t%d\r\n",UserConfig.NoLoop);
164:                   if(1==print){
165:                     PrintString(StringBuf);
166:                   }else{
167:                     NextAddr=StreamProgramExtFlash(NextAddr,strlen(StringBuf),(uint8_t*)StringBuf); // Write to external flash and get next address
168:                   }
169:                 
170:                 }
171:                 
172:                   
173:                    
174:                   
175:                  
176:                   
177:                   
178:                   
179:                   
180:                   
181:                    
182:                   
183:                    
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D004504  27BDFFE0   ADDIU SP, SP, -32
9D004508  AFBF001C   SW RA, 28(SP)
9D00450C  AFBE0018   SW FP, 24(SP)
9D004510  03A0F025   OR FP, SP, ZERO
9D004514  AFC40020   SW A0, 32(FP)
9D004518  AFC00010   SW ZERO, 16(FP)
9D00451C  3C028000   LUI V0, -32768
9D004520  D4400230   LDC1 F0, 560(V0)
9D004524  44060000   MFC1 A2, F0
9D004528  44670000   MFHC1 A3, F0
9D00452C  3C029D01   LUI V0, -25343
9D004530  2445B408   ADDIU A1, V0, -19448
9D004534  3C028000   LUI V0, -32768
9D004538  244401CC   ADDIU A0, V0, 460
9D00453C  0F40468D   JAL __wrap_sprintf
9D004540  00000000   NOP
9D004544  8FC30020   LW V1, 32(FP)
9D004548  24020001   ADDIU V0, ZERO, 1
9D00454C  14620007   BNE V1, V0, 0x9D00456C
9D004550  00000000   NOP
9D004554  3C028000   LUI V0, -32768
9D004558  244401CC   ADDIU A0, V0, 460
9D00455C  0F404466   JAL PrintString
9D004560  00000000   NOP
9D004564  1000000D   BEQ ZERO, ZERO, 0x9D00459C
9D004568  00000000   NOP
9D00456C  3C028000   LUI V0, -32768
9D004570  244401CC   ADDIU A0, V0, 460
9D004574  0F403196   JAL strlen
9D004578  00000000   NOP
9D00457C  00401825   OR V1, V0, ZERO
9D004580  3C028000   LUI V0, -32768
9D004584  244601CC   ADDIU A2, V0, 460
9D004588  00602825   OR A1, V1, ZERO
9D00458C  8FC40010   LW A0, 16(FP)
9D004590  0F4034CE   JAL StreamProgramExtFlash
9D004594  00000000   NOP
9D004598  AFC20010   SW V0, 16(FP)
9D00459C  3C028000   LUI V0, -32768
9D0045A0  24420230   ADDIU V0, V0, 560
9D0045A4  D4400008   LDC1 F0, 8(V0)
9D0045A8  44060000   MFC1 A2, F0
9D0045AC  44670000   MFHC1 A3, F0
9D0045B0  3C029D01   LUI V0, -25343
9D0045B4  2445B424   ADDIU A1, V0, -19420
9D0045B8  3C028000   LUI V0, -32768
9D0045BC  244401CC   ADDIU A0, V0, 460
9D0045C0  0F40468D   JAL __wrap_sprintf
9D0045C4  00000000   NOP
9D0045C8  8FC30020   LW V1, 32(FP)
9D0045CC  24020001   ADDIU V0, ZERO, 1
9D0045D0  14620007   BNE V1, V0, 0x9D0045F0
9D0045D4  00000000   NOP
9D0045D8  3C028000   LUI V0, -32768
9D0045DC  244401CC   ADDIU A0, V0, 460
9D0045E0  0F404466   JAL PrintString
9D0045E4  00000000   NOP
9D0045E8  1000000D   BEQ ZERO, ZERO, 0x9D004620
9D0045EC  00000000   NOP
9D0045F0  3C028000   LUI V0, -32768
9D0045F4  244401CC   ADDIU A0, V0, 460
9D0045F8  0F403196   JAL strlen
9D0045FC  00000000   NOP
9D004600  00401825   OR V1, V0, ZERO
9D004604  3C028000   LUI V0, -32768
9D004608  244601CC   ADDIU A2, V0, 460
9D00460C  00602825   OR A1, V1, ZERO
9D004610  8FC40010   LW A0, 16(FP)
9D004614  0F4034CE   JAL StreamProgramExtFlash
9D004618  00000000   NOP
9D00461C  AFC20010   SW V0, 16(FP)
9D004620  3C028000   LUI V0, -32768
9D004624  24420230   ADDIU V0, V0, 560
9D004628  D4400010   LDC1 F0, 16(V0)
9D00462C  44060000   MFC1 A2, F0
9D004630  44670000   MFHC1 A3, F0
9D004634  3C029D01   LUI V0, -25343
9D004638  2445B438   ADDIU A1, V0, -19400
9D00463C  3C028000   LUI V0, -32768
9D004640  244401CC   ADDIU A0, V0, 460
9D004644  0F40468D   JAL __wrap_sprintf
9D004648  00000000   NOP
9D00464C  8FC30020   LW V1, 32(FP)
9D004650  24020001   ADDIU V0, ZERO, 1
9D004654  14620007   BNE V1, V0, 0x9D004674
9D004658  00000000   NOP
9D00465C  3C028000   LUI V0, -32768
9D004660  244401CC   ADDIU A0, V0, 460
9D004664  0F404466   JAL PrintString
9D004668  00000000   NOP
9D00466C  1000000D   BEQ ZERO, ZERO, 0x9D0046A4
9D004670  00000000   NOP
9D004674  3C028000   LUI V0, -32768
9D004678  244401CC   ADDIU A0, V0, 460
9D00467C  0F403196   JAL strlen
9D004680  00000000   NOP
9D004684  00401825   OR V1, V0, ZERO
9D004688  3C028000   LUI V0, -32768
9D00468C  244601CC   ADDIU A2, V0, 460
9D004690  00602825   OR A1, V1, ZERO
9D004694  8FC40010   LW A0, 16(FP)
9D004698  0F4034CE   JAL StreamProgramExtFlash
9D00469C  00000000   NOP
9D0046A0  AFC20010   SW V0, 16(FP)
9D0046A4  3C028000   LUI V0, -32768
9D0046A8  24420230   ADDIU V0, V0, 560
9D0046AC  D4400018   LDC1 F0, 24(V0)
9D0046B0  44060000   MFC1 A2, F0
9D0046B4  44670000   MFHC1 A3, F0
9D0046B8  3C029D01   LUI V0, -25343
9D0046BC  2445B454   ADDIU A1, V0, -19372
9D0046C0  3C028000   LUI V0, -32768
9D0046C4  244401CC   ADDIU A0, V0, 460
9D0046C8  0F40468D   JAL __wrap_sprintf
9D0046CC  00000000   NOP
9D0046D0  8FC30020   LW V1, 32(FP)
9D0046D4  24020001   ADDIU V0, ZERO, 1
9D0046D8  14620007   BNE V1, V0, 0x9D0046F8
9D0046DC  00000000   NOP
9D0046E0  3C028000   LUI V0, -32768
9D0046E4  244401CC   ADDIU A0, V0, 460
9D0046E8  0F404466   JAL PrintString
9D0046EC  00000000   NOP
9D0046F0  1000000D   BEQ ZERO, ZERO, 0x9D004728
9D0046F4  00000000   NOP
9D0046F8  3C028000   LUI V0, -32768
9D0046FC  244401CC   ADDIU A0, V0, 460
9D004700  0F403196   JAL strlen
9D004704  00000000   NOP
9D004708  00401825   OR V1, V0, ZERO
9D00470C  3C028000   LUI V0, -32768
9D004710  244601CC   ADDIU A2, V0, 460
9D004714  00602825   OR A1, V1, ZERO
9D004718  8FC40010   LW A0, 16(FP)
9D00471C  0F4034CE   JAL StreamProgramExtFlash
9D004720  00000000   NOP
9D004724  AFC20010   SW V0, 16(FP)
9D004728  3C028000   LUI V0, -32768
9D00472C  24420230   ADDIU V0, V0, 560
9D004730  D4400020   LDC1 F0, 32(V0)
9D004734  44060000   MFC1 A2, F0
9D004738  44670000   MFHC1 A3, F0
9D00473C  3C029D01   LUI V0, -25343
9D004740  2445B468   ADDIU A1, V0, -19352
9D004744  3C028000   LUI V0, -32768
9D004748  244401CC   ADDIU A0, V0, 460
9D00474C  0F40468D   JAL __wrap_sprintf
9D004750  00000000   NOP
9D004754  8FC30020   LW V1, 32(FP)
9D004758  24020001   ADDIU V0, ZERO, 1
9D00475C  14620007   BNE V1, V0, 0x9D00477C
9D004760  00000000   NOP
9D004764  3C028000   LUI V0, -32768
9D004768  244401CC   ADDIU A0, V0, 460
9D00476C  0F404466   JAL PrintString
9D004770  00000000   NOP
9D004774  1000000D   BEQ ZERO, ZERO, 0x9D0047AC
9D004778  00000000   NOP
9D00477C  3C028000   LUI V0, -32768
9D004780  244401CC   ADDIU A0, V0, 460
9D004784  0F403196   JAL strlen
9D004788  00000000   NOP
9D00478C  00401825   OR V1, V0, ZERO
9D004790  3C028000   LUI V0, -32768
9D004794  244601CC   ADDIU A2, V0, 460
9D004798  00602825   OR A1, V1, ZERO
9D00479C  8FC40010   LW A0, 16(FP)
9D0047A0  0F4034CE   JAL StreamProgramExtFlash
9D0047A4  00000000   NOP
9D0047A8  AFC20010   SW V0, 16(FP)
9D0047AC  3C028000   LUI V0, -32768
9D0047B0  24420230   ADDIU V0, V0, 560
9D0047B4  D4400028   LDC1 F0, 40(V0)
9D0047B8  44060000   MFC1 A2, F0
9D0047BC  44670000   MFHC1 A3, F0
9D0047C0  3C029D01   LUI V0, -25343
9D0047C4  2445B478   ADDIU A1, V0, -19336
9D0047C8  3C028000   LUI V0, -32768
9D0047CC  244401CC   ADDIU A0, V0, 460
9D0047D0  0F40468D   JAL __wrap_sprintf
9D0047D4  00000000   NOP
9D0047D8  8FC30020   LW V1, 32(FP)
9D0047DC  24020001   ADDIU V0, ZERO, 1
9D0047E0  14620007   BNE V1, V0, 0x9D004800
9D0047E4  00000000   NOP
9D0047E8  3C028000   LUI V0, -32768
9D0047EC  244401CC   ADDIU A0, V0, 460
9D0047F0  0F404466   JAL PrintString
9D0047F4  00000000   NOP
9D0047F8  1000000D   BEQ ZERO, ZERO, 0x9D004830
9D0047FC  00000000   NOP
9D004800  3C028000   LUI V0, -32768
9D004804  244401CC   ADDIU A0, V0, 460
9D004808  0F403196   JAL strlen
9D00480C  00000000   NOP
9D004810  00401825   OR V1, V0, ZERO
9D004814  3C028000   LUI V0, -32768
9D004818  244601CC   ADDIU A2, V0, 460
9D00481C  00602825   OR A1, V1, ZERO
9D004820  8FC40010   LW A0, 16(FP)
9D004824  0F4034CE   JAL StreamProgramExtFlash
9D004828  00000000   NOP
9D00482C  AFC20010   SW V0, 16(FP)
9D004830  3C028000   LUI V0, -32768
9D004834  24420230   ADDIU V0, V0, 560
9D004838  D4400030   LDC1 F0, 48(V0)
9D00483C  44060000   MFC1 A2, F0
9D004840  44670000   MFHC1 A3, F0
9D004844  3C029D01   LUI V0, -25343
9D004848  2445B490   ADDIU A1, V0, -19312
9D00484C  3C028000   LUI V0, -32768
9D004850  244401CC   ADDIU A0, V0, 460
9D004854  0F40468D   JAL __wrap_sprintf
9D004858  00000000   NOP
9D00485C  8FC30020   LW V1, 32(FP)
9D004860  24020001   ADDIU V0, ZERO, 1
9D004864  14620007   BNE V1, V0, 0x9D004884
9D004868  00000000   NOP
9D00486C  3C028000   LUI V0, -32768
9D004870  244401CC   ADDIU A0, V0, 460
9D004874  0F404466   JAL PrintString
9D004878  00000000   NOP
9D00487C  1000000D   BEQ ZERO, ZERO, 0x9D0048B4
9D004880  00000000   NOP
9D004884  3C028000   LUI V0, -32768
9D004888  244401CC   ADDIU A0, V0, 460
9D00488C  0F403196   JAL strlen
9D004890  00000000   NOP
9D004894  00401825   OR V1, V0, ZERO
9D004898  3C028000   LUI V0, -32768
9D00489C  244601CC   ADDIU A2, V0, 460
9D0048A0  00602825   OR A1, V1, ZERO
9D0048A4  8FC40010   LW A0, 16(FP)
9D0048A8  0F4034CE   JAL StreamProgramExtFlash
9D0048AC  00000000   NOP
9D0048B0  AFC20010   SW V0, 16(FP)
9D0048B4  3C028000   LUI V0, -32768
9D0048B8  24420230   ADDIU V0, V0, 560
9D0048BC  D4400038   LDC1 F0, 56(V0)
9D0048C0  44060000   MFC1 A2, F0
9D0048C4  44670000   MFHC1 A3, F0
9D0048C8  3C029D01   LUI V0, -25343
9D0048CC  2445B4A4   ADDIU A1, V0, -19292
9D0048D0  3C028000   LUI V0, -32768
9D0048D4  244401CC   ADDIU A0, V0, 460
9D0048D8  0F40468D   JAL __wrap_sprintf
9D0048DC  00000000   NOP
9D0048E0  8FC30020   LW V1, 32(FP)
9D0048E4  24020001   ADDIU V0, ZERO, 1
9D0048E8  14620007   BNE V1, V0, 0x9D004908
9D0048EC  00000000   NOP
9D0048F0  3C028000   LUI V0, -32768
9D0048F4  244401CC   ADDIU A0, V0, 460
9D0048F8  0F404466   JAL PrintString
9D0048FC  00000000   NOP
9D004900  1000000D   BEQ ZERO, ZERO, 0x9D004938
9D004904  00000000   NOP
9D004908  3C028000   LUI V0, -32768
9D00490C  244401CC   ADDIU A0, V0, 460
9D004910  0F403196   JAL strlen
9D004914  00000000   NOP
9D004918  00401825   OR V1, V0, ZERO
9D00491C  3C028000   LUI V0, -32768
9D004920  244601CC   ADDIU A2, V0, 460
9D004924  00602825   OR A1, V1, ZERO
9D004928  8FC40010   LW A0, 16(FP)
9D00492C  0F4034CE   JAL StreamProgramExtFlash
9D004930  00000000   NOP
9D004934  AFC20010   SW V0, 16(FP)
9D004938  3C028000   LUI V0, -32768
9D00493C  24420230   ADDIU V0, V0, 560
9D004940  8C420040   LW V0, 64(V0)
9D004944  00403025   OR A2, V0, ZERO
9D004948  3C029D01   LUI V0, -25343
9D00494C  2445B4BC   ADDIU A1, V0, -19268
9D004950  3C028000   LUI V0, -32768
9D004954  244401CC   ADDIU A0, V0, 460
9D004958  0F40468D   JAL __wrap_sprintf
9D00495C  00000000   NOP
9D004960  8FC30020   LW V1, 32(FP)
9D004964  24020001   ADDIU V0, ZERO, 1
9D004968  14620007   BNE V1, V0, 0x9D004988
9D00496C  00000000   NOP
9D004970  3C028000   LUI V0, -32768
9D004974  244401CC   ADDIU A0, V0, 460
9D004978  0F404466   JAL PrintString
9D00497C  00000000   NOP
9D004980  1000000D   BEQ ZERO, ZERO, 0x9D0049B8
9D004984  00000000   NOP
9D004988  3C028000   LUI V0, -32768
9D00498C  244401CC   ADDIU A0, V0, 460
9D004990  0F403196   JAL strlen
9D004994  00000000   NOP
9D004998  00401825   OR V1, V0, ZERO
9D00499C  3C028000   LUI V0, -32768
9D0049A0  244601CC   ADDIU A2, V0, 460
9D0049A4  00602825   OR A1, V1, ZERO
9D0049A8  8FC40010   LW A0, 16(FP)
9D0049AC  0F4034CE   JAL StreamProgramExtFlash
9D0049B0  00000000   NOP
9D0049B4  AFC20010   SW V0, 16(FP)
9D0049B8  3C028000   LUI V0, -32768
9D0049BC  24420230   ADDIU V0, V0, 560
9D0049C0  8C420044   LW V0, 68(V0)
9D0049C4  00403025   OR A2, V0, ZERO
9D0049C8  3C029D01   LUI V0, -25343
9D0049CC  2445B4DC   ADDIU A1, V0, -19236
9D0049D0  3C028000   LUI V0, -32768
9D0049D4  244401CC   ADDIU A0, V0, 460
9D0049D8  0F40468D   JAL __wrap_sprintf
9D0049DC  00000000   NOP
9D0049E0  8FC30020   LW V1, 32(FP)
9D0049E4  24020001   ADDIU V0, ZERO, 1
9D0049E8  14620007   BNE V1, V0, 0x9D004A08
9D0049EC  00000000   NOP
9D0049F0  3C028000   LUI V0, -32768
9D0049F4  244401CC   ADDIU A0, V0, 460
9D0049F8  0F404466   JAL PrintString
9D0049FC  00000000   NOP
9D004A00  1000000D   BEQ ZERO, ZERO, 0x9D004A38
9D004A04  00000000   NOP
9D004A08  3C028000   LUI V0, -32768
9D004A0C  244401CC   ADDIU A0, V0, 460
9D004A10  0F403196   JAL strlen
9D004A14  00000000   NOP
9D004A18  00401825   OR V1, V0, ZERO
9D004A1C  3C028000   LUI V0, -32768
9D004A20  244601CC   ADDIU A2, V0, 460
9D004A24  00602825   OR A1, V1, ZERO
9D004A28  8FC40010   LW A0, 16(FP)
9D004A2C  0F4034CE   JAL StreamProgramExtFlash
9D004A30  00000000   NOP
9D004A34  AFC20010   SW V0, 16(FP)
9D004A38  3C028000   LUI V0, -32768
9D004A3C  24420230   ADDIU V0, V0, 560
9D004A40  D4400048   LDC1 F0, 72(V0)
9D004A44  44060000   MFC1 A2, F0
9D004A48  44670000   MFHC1 A3, F0
9D004A4C  3C029D01   LUI V0, -25343
9D004A50  2445B4F0   ADDIU A1, V0, -19216
9D004A54  3C028000   LUI V0, -32768
9D004A58  244401CC   ADDIU A0, V0, 460
9D004A5C  0F40468D   JAL __wrap_sprintf
9D004A60  00000000   NOP
9D004A64  8FC30020   LW V1, 32(FP)
9D004A68  24020001   ADDIU V0, ZERO, 1
9D004A6C  14620007   BNE V1, V0, 0x9D004A8C
9D004A70  00000000   NOP
9D004A74  3C028000   LUI V0, -32768
9D004A78  244401CC   ADDIU A0, V0, 460
9D004A7C  0F404466   JAL PrintString
9D004A80  00000000   NOP
9D004A84  1000000D   BEQ ZERO, ZERO, 0x9D004ABC
9D004A88  00000000   NOP
9D004A8C  3C028000   LUI V0, -32768
9D004A90  244401CC   ADDIU A0, V0, 460
9D004A94  0F403196   JAL strlen
9D004A98  00000000   NOP
9D004A9C  00401825   OR V1, V0, ZERO
9D004AA0  3C028000   LUI V0, -32768
9D004AA4  244601CC   ADDIU A2, V0, 460
9D004AA8  00602825   OR A1, V1, ZERO
9D004AAC  8FC40010   LW A0, 16(FP)
9D004AB0  0F4034CE   JAL StreamProgramExtFlash
9D004AB4  00000000   NOP
9D004AB8  AFC20010   SW V0, 16(FP)
9D004ABC  3C028000   LUI V0, -32768
9D004AC0  24420230   ADDIU V0, V0, 560
9D004AC4  D4400050   LDC1 F0, 80(V0)
9D004AC8  44060000   MFC1 A2, F0
9D004ACC  44670000   MFHC1 A3, F0
9D004AD0  3C029D01   LUI V0, -25343
9D004AD4  2445B504   ADDIU A1, V0, -19196
9D004AD8  3C028000   LUI V0, -32768
9D004ADC  244401CC   ADDIU A0, V0, 460
9D004AE0  0F40468D   JAL __wrap_sprintf
9D004AE4  00000000   NOP
9D004AE8  8FC30020   LW V1, 32(FP)
9D004AEC  24020001   ADDIU V0, ZERO, 1
9D004AF0  14620007   BNE V1, V0, 0x9D004B10
9D004AF4  00000000   NOP
9D004AF8  3C028000   LUI V0, -32768
9D004AFC  244401CC   ADDIU A0, V0, 460
9D004B00  0F404466   JAL PrintString
9D004B04  00000000   NOP
9D004B08  1000000D   BEQ ZERO, ZERO, 0x9D004B40
9D004B0C  00000000   NOP
9D004B10  3C028000   LUI V0, -32768
9D004B14  244401CC   ADDIU A0, V0, 460
9D004B18  0F403196   JAL strlen
9D004B1C  00000000   NOP
9D004B20  00401825   OR V1, V0, ZERO
9D004B24  3C028000   LUI V0, -32768
9D004B28  244601CC   ADDIU A2, V0, 460
9D004B2C  00602825   OR A1, V1, ZERO
9D004B30  8FC40010   LW A0, 16(FP)
9D004B34  0F4034CE   JAL StreamProgramExtFlash
9D004B38  00000000   NOP
9D004B3C  AFC20010   SW V0, 16(FP)
9D004B40  3C028000   LUI V0, -32768
9D004B44  24420230   ADDIU V0, V0, 560
9D004B48  8C420058   LW V0, 88(V0)
9D004B4C  00403025   OR A2, V0, ZERO
9D004B50  3C029D01   LUI V0, -25343
9D004B54  2445B514   ADDIU A1, V0, -19180
9D004B58  3C028000   LUI V0, -32768
9D004B5C  244401CC   ADDIU A0, V0, 460
9D004B60  0F40468D   JAL __wrap_sprintf
9D004B64  00000000   NOP
9D004B68  8FC30020   LW V1, 32(FP)
9D004B6C  24020001   ADDIU V0, ZERO, 1
9D004B70  14620007   BNE V1, V0, 0x9D004B90
9D004B74  00000000   NOP
9D004B78  3C028000   LUI V0, -32768
9D004B7C  244401CC   ADDIU A0, V0, 460
9D004B80  0F404466   JAL PrintString
9D004B84  00000000   NOP
9D004B88  1000000D   BEQ ZERO, ZERO, 0x9D004BC0
9D004B8C  00000000   NOP
9D004B90  3C028000   LUI V0, -32768
9D004B94  244401CC   ADDIU A0, V0, 460
9D004B98  0F403196   JAL strlen
9D004B9C  00000000   NOP
9D004BA0  00401825   OR V1, V0, ZERO
9D004BA4  3C028000   LUI V0, -32768
9D004BA8  244601CC   ADDIU A2, V0, 460
9D004BAC  00602825   OR A1, V1, ZERO
9D004BB0  8FC40010   LW A0, 16(FP)
9D004BB4  0F4034CE   JAL StreamProgramExtFlash
9D004BB8  00000000   NOP
9D004BBC  AFC20010   SW V0, 16(FP)
9D004BC0  3C028000   LUI V0, -32768
9D004BC4  24420230   ADDIU V0, V0, 560
9D004BC8  8C42005C   LW V0, 92(V0)
9D004BCC  00403025   OR A2, V0, ZERO
9D004BD0  3C029D01   LUI V0, -25343
9D004BD4  2445B528   ADDIU A1, V0, -19160
9D004BD8  3C028000   LUI V0, -32768
9D004BDC  244401CC   ADDIU A0, V0, 460
9D004BE0  0F40468D   JAL __wrap_sprintf
9D004BE4  00000000   NOP
9D004BE8  8FC30020   LW V1, 32(FP)
9D004BEC  24020001   ADDIU V0, ZERO, 1
9D004BF0  14620007   BNE V1, V0, 0x9D004C10
9D004BF4  00000000   NOP
9D004BF8  3C028000   LUI V0, -32768
9D004BFC  244401CC   ADDIU A0, V0, 460
9D004C00  0F404466   JAL PrintString
9D004C04  00000000   NOP
9D004C08  1000000D   BEQ ZERO, ZERO, 0x9D004C40
9D004C0C  00000000   NOP
9D004C10  3C028000   LUI V0, -32768
9D004C14  244401CC   ADDIU A0, V0, 460
9D004C18  0F403196   JAL strlen
9D004C1C  00000000   NOP
9D004C20  00401825   OR V1, V0, ZERO
9D004C24  3C028000   LUI V0, -32768
9D004C28  244601CC   ADDIU A2, V0, 460
9D004C2C  00602825   OR A1, V1, ZERO
9D004C30  8FC40010   LW A0, 16(FP)
9D004C34  0F4034CE   JAL StreamProgramExtFlash
9D004C38  00000000   NOP
9D004C3C  AFC20010   SW V0, 16(FP)
9D004C40  3C028000   LUI V0, -32768
9D004C44  24420230   ADDIU V0, V0, 560
9D004C48  8C420060   LW V0, 96(V0)
9D004C4C  00403025   OR A2, V0, ZERO
9D004C50  3C029D01   LUI V0, -25343
9D004C54  2445B538   ADDIU A1, V0, -19144
9D004C58  3C028000   LUI V0, -32768
9D004C5C  244401CC   ADDIU A0, V0, 460
9D004C60  0F40468D   JAL __wrap_sprintf
9D004C64  00000000   NOP
9D004C68  8FC30020   LW V1, 32(FP)
9D004C6C  24020001   ADDIU V0, ZERO, 1
9D004C70  14620007   BNE V1, V0, 0x9D004C90
9D004C74  00000000   NOP
9D004C78  3C028000   LUI V0, -32768
9D004C7C  244401CC   ADDIU A0, V0, 460
9D004C80  0F404466   JAL PrintString
9D004C84  00000000   NOP
9D004C88  1000000D   BEQ ZERO, ZERO, 0x9D004CC0
9D004C8C  00000000   NOP
9D004C90  3C028000   LUI V0, -32768
9D004C94  244401CC   ADDIU A0, V0, 460
9D004C98  0F403196   JAL strlen
9D004C9C  00000000   NOP
9D004CA0  00401825   OR V1, V0, ZERO
9D004CA4  3C028000   LUI V0, -32768
9D004CA8  244601CC   ADDIU A2, V0, 460
9D004CAC  00602825   OR A1, V1, ZERO
9D004CB0  8FC40010   LW A0, 16(FP)
9D004CB4  0F4034CE   JAL StreamProgramExtFlash
9D004CB8  00000000   NOP
9D004CBC  AFC20010   SW V0, 16(FP)
9D004CC0  3C028000   LUI V0, -32768
9D004CC4  24420230   ADDIU V0, V0, 560
9D004CC8  D4400068   LDC1 F0, 104(V0)
9D004CCC  44060000   MFC1 A2, F0
9D004CD0  44670000   MFHC1 A3, F0
9D004CD4  3C029D01   LUI V0, -25343
9D004CD8  2445B544   ADDIU A1, V0, -19132
9D004CDC  3C028000   LUI V0, -32768
9D004CE0  244401CC   ADDIU A0, V0, 460
9D004CE4  0F40468D   JAL __wrap_sprintf
9D004CE8  00000000   NOP
9D004CEC  8FC30020   LW V1, 32(FP)
9D004CF0  24020001   ADDIU V0, ZERO, 1
9D004CF4  14620007   BNE V1, V0, 0x9D004D14
9D004CF8  00000000   NOP
9D004CFC  3C028000   LUI V0, -32768
9D004D00  244401CC   ADDIU A0, V0, 460
9D004D04  0F404466   JAL PrintString
9D004D08  00000000   NOP
9D004D0C  1000000D   BEQ ZERO, ZERO, 0x9D004D44
9D004D10  00000000   NOP
9D004D14  3C028000   LUI V0, -32768
9D004D18  244401CC   ADDIU A0, V0, 460
9D004D1C  0F403196   JAL strlen
9D004D20  00000000   NOP
9D004D24  00401825   OR V1, V0, ZERO
9D004D28  3C028000   LUI V0, -32768
9D004D2C  244601CC   ADDIU A2, V0, 460
9D004D30  00602825   OR A1, V1, ZERO
9D004D34  8FC40010   LW A0, 16(FP)
9D004D38  0F4034CE   JAL StreamProgramExtFlash
9D004D3C  00000000   NOP
9D004D40  AFC20010   SW V0, 16(FP)
9D004D44  3C028000   LUI V0, -32768
9D004D48  24420230   ADDIU V0, V0, 560
9D004D4C  8C420064   LW V0, 100(V0)
9D004D50  00403025   OR A2, V0, ZERO
9D004D54  3C029D01   LUI V0, -25343
9D004D58  2445B554   ADDIU A1, V0, -19116
9D004D5C  3C028000   LUI V0, -32768
9D004D60  244401CC   ADDIU A0, V0, 460
9D004D64  0F40468D   JAL __wrap_sprintf
9D004D68  00000000   NOP
9D004D6C  8FC30020   LW V1, 32(FP)
9D004D70  24020001   ADDIU V0, ZERO, 1
9D004D74  14620007   BNE V1, V0, 0x9D004D94
9D004D78  00000000   NOP
9D004D7C  3C028000   LUI V0, -32768
9D004D80  244401CC   ADDIU A0, V0, 460
9D004D84  0F404466   JAL PrintString
9D004D88  00000000   NOP
9D004D8C  1000000D   BEQ ZERO, ZERO, 0x9D004DC4
9D004D90  00000000   NOP
9D004D94  3C028000   LUI V0, -32768
9D004D98  244401CC   ADDIU A0, V0, 460
9D004D9C  0F403196   JAL strlen
9D004DA0  00000000   NOP
9D004DA4  00401825   OR V1, V0, ZERO
9D004DA8  3C028000   LUI V0, -32768
9D004DAC  244601CC   ADDIU A2, V0, 460
9D004DB0  00602825   OR A1, V1, ZERO
9D004DB4  8FC40010   LW A0, 16(FP)
9D004DB8  0F4034CE   JAL StreamProgramExtFlash
9D004DBC  00000000   NOP
9D004DC0  AFC20010   SW V0, 16(FP)
9D004DC4  00000000   NOP
9D004DC8  03C0E825   OR SP, FP, ZERO
9D004DCC  8FBF001C   LW RA, 28(SP)
9D004DD0  8FBE0018   LW FP, 24(SP)
9D004DD4  27BD0020   ADDIU SP, SP, 32
9D004DD8  03E00008   JR RA
9D004DDC  00000000   NOP
9D00F6EC  27BDFFE0   ADDIU SP, SP, -32
9D00F6F0  AFBF001C   SW RA, 28(SP)
9D00F6F4  AFBE0018   SW FP, 24(SP)
9D00F6F8  03A0F025   OR FP, SP, ZERO
9D00F6FC  A3C00010   SB ZERO, 16(FP)
9D00F700  AFC00014   SW ZERO, 20(FP)
9D00F704  3C029D01   LUI V0, -25343
9D00F708  2444B3E0   ADDIU A0, V0, -19488
9D00F70C  0F404466   JAL PrintString
9D00F710  00000000   NOP
9D00F714  10000011   BEQ ZERO, ZERO, 0x9D00F75C
9D00F718  00000000   NOP
9D00F71C  8FC20014   LW V0, 20(FP)
9D00F720  24430001   ADDIU V1, V0, 1
9D00F724  AFC30014   SW V1, 20(FP)
9D00F728  00402025   OR A0, V0, ZERO
9D00F72C  0F403C73   JAL ReadExtFlash
9D00F730  00000000   NOP
9D00F734  A3C20010   SB V0, 16(FP)
9D00F738  93C30010   LBU V1, 16(FP)
9D00F73C  240200FF   ADDIU V0, ZERO, 255
9D00F740  10620006   BEQ V1, V0, 0x9D00F75C
9D00F744  00000000   NOP
9D00F748  83C20010   LB V0, 16(FP)
9D00F74C  00402825   OR A1, V0, ZERO
9D00F750  00002025   OR A0, ZERO, ZERO
9D00F754  0F400762   JAL CommandInterpreter
9D00F758  00000000   NOP
9D00F75C  93C30010   LBU V1, 16(FP)
9D00F760  240200FF   ADDIU V0, ZERO, 255
9D00F764  1462FFED   BNE V1, V0, 0x9D00F71C
9D00F768  00000000   NOP
9D00F76C  3C029D01   LUI V0, -25343
9D00F770  2444B3E8   ADDIU A0, V0, -19480
9D00F774  0F404466   JAL PrintString
9D00F778  00000000   NOP
9D00F77C  00000000   NOP
9D00F780  03C0E825   OR SP, FP, ZERO
9D00F784  8FBF001C   LW RA, 28(SP)
9D00F788  8FBE0018   LW FP, 24(SP)
9D00F78C  27BD0020   ADDIU SP, SP, 32
9D00F790  03E00008   JR RA
9D00F794  00000000   NOP
9D00F994  27BDFFE0   ADDIU SP, SP, -32
9D00F998  AFBF001C   SW RA, 28(SP)
9D00F99C  AFBE0018   SW FP, 24(SP)
9D00F9A0  03A0F025   OR FP, SP, ZERO
9D00F9A4  AFC00014   SW ZERO, 20(FP)
9D00F9A8  3C029D01   LUI V0, -25343
9D00F9AC  2444B3E0   ADDIU A0, V0, -19488
9D00F9B0  0F404466   JAL PrintString
9D00F9B4  00000000   NOP
9D00F9B8  10000010   BEQ ZERO, ZERO, 0x9D00F9FC
9D00F9BC  00000000   NOP
9D00F9C0  8FC20014   LW V0, 20(FP)
9D00F9C4  24430001   ADDIU V1, V0, 1
9D00F9C8  AFC30014   SW V1, 20(FP)
9D00F9CC  00402025   OR A0, V0, ZERO
9D00F9D0  0F403C73   JAL ReadExtFlash
9D00F9D4  00000000   NOP
9D00F9D8  A3C20010   SB V0, 16(FP)
9D00F9DC  93C30010   LBU V1, 16(FP)
9D00F9E0  240200FF   ADDIU V0, ZERO, 255
9D00F9E4  10620005   BEQ V1, V0, 0x9D00F9FC
9D00F9E8  00000000   NOP
9D00F9EC  83C20010   LB V0, 16(FP)
9D00F9F0  00402025   OR A0, V0, ZERO
9D00F9F4  0F4044E7   JAL PrintChar
9D00F9F8  00000000   NOP
9D00F9FC  93C30010   LBU V1, 16(FP)
9D00FA00  240200FF   ADDIU V0, ZERO, 255
9D00FA04  1462FFEE   BNE V1, V0, 0x9D00F9C0
9D00FA08  00000000   NOP
9D00FA0C  3C029D01   LUI V0, -25343
9D00FA10  2444B3E4   ADDIU A0, V0, -19484
9D00FA14  0F404466   JAL PrintString
9D00FA18  00000000   NOP
9D00FA1C  00000000   NOP
9D00FA20  03C0E825   OR SP, FP, ZERO
9D00FA24  8FBF001C   LW RA, 28(SP)
9D00FA28  8FBE0018   LW FP, 24(SP)
9D00FA2C  27BD0020   ADDIU SP, SP, 32
9D00FA30  03E00008   JR RA
9D00FA34  00000000   NOP
9D011050  27BDFFE8   ADDIU SP, SP, -24
9D011054  AFBF0014   SW RA, 20(SP)
9D011058  AFBE0010   SW FP, 16(SP)
9D01105C  03A0F025   OR FP, SP, ZERO
9D011060  3C038000   LUI V1, -32768
9D011064  3C029D01   LUI V0, -25343
9D011068  24630230   ADDIU V1, V1, 560
9D01106C  2442B370   ADDIU V0, V0, -19600
9D011070  24040070   ADDIU A0, ZERO, 112
9D011074  00803025   OR A2, A0, ZERO
9D011078  00402825   OR A1, V0, ZERO
9D01107C  00602025   OR A0, V1, ZERO
9D011080  0F40313C   JAL memcpy
9D011084  00000000   NOP
9D011088  00000000   NOP
9D01108C  03C0E825   OR SP, FP, ZERO
9D011090  8FBF0014   LW RA, 20(SP)
9D011094  8FBE0010   LW FP, 16(SP)
9D011098  27BD0018   ADDIU SP, SP, 24
9D01109C  03E00008   JR RA
9D0110A0  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/pwmaudioout.c  --------------
1:                   // Pass in audio sample as float between -1 and +1 to set PWM duty cycle to 0 to 100%
2:                   
3:                   
4:                   #include <stddef.h>                     // Defines NULL
5:                   #include <stdbool.h>                    // Defines true
6:                   #include <stdlib.h>                     // Defines EXIT_FAILURE
7:                   #include "definitions.h"                // SYS function prototypes
8:                   #include "main.h"                       // typedef for smp_type
9:                   
10:                  void AudioPwmSet(smp_type sample){
11:                      // Pass in audio sample as -1.0 to +1.0 to set duty cycle to 0% to 100%
12:                      OCMP1_CompareSecondaryValueSet((int)(((1.0+sample)/2)*(smp_type)PR2));
13:                  }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D010508  27BDFFE8   ADDIU SP, SP, -24
9D01050C  AFBF0014   SW RA, 20(SP)
9D010510  AFBE0010   SW FP, 16(SP)
9D010514  03A0F025   OR FP, SP, ZERO
9D010518  F7CC0018   SDC1 F12, 24(FP)
9D01051C  D7C10018   LDC1 F1, 24(FP)
9D010520  3C029D01   LUI V0, -25343
9D010524  D4401D30   LDC1 F0, 7472(V0)
9D010528  46200840   ADD.D F1, F1, F0
9D01052C  3C029D01   LUI V0, -25343
9D010530  D4401D38   LDC1 F0, 7480(V0)
9D010534  46200843   DIV.D F1, F1, F0
9D010538  3C02BF84   LUI V0, -16508
9D01053C  8C420220   LW V0, 544(V0)
9D010540  00402025   OR A0, V0, ZERO
9D010544  00002825   OR A1, ZERO, ZERO
9D010548  44840000   MTC1 A0, F0
9D01054C  44E50000   MTHC1 A1, F0
9D010550  46A00021   CVT.D.L F0, F0
9D010554  46200802   MUL.D F0, F1, F0
9D010558  4620000D   TRUNC.W.D F0, F0
9D01055C  44020000   MFC1 V0, F0
9D010560  3042FFFF   ANDI V0, V0, -1
9D010564  00402025   OR A0, V0, ZERO
9D010568  0F4045A4   JAL OCMP1_CompareSecondaryValueSet
9D01056C  00000000   NOP
9D010570  00000000   NOP
9D010574  03C0E825   OR SP, FP, ZERO
9D010578  8FBF0014   LW RA, 20(SP)
9D01057C  8FBE0010   LW FP, 16(SP)
9D010580  27BD0018   ADDIU SP, SP, 24
9D010584  03E00008   JR RA
9D010588  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/pollswitchesleds.c  ---------
1:                   // Called from the main loop. Reads switches and toggles LEDs if down.
2:                   
3:                   #include "PollSwitchesLeds.h"
4:                   
5:                   SwitchStruct_t Switches;        // Generally holds old value of switch for comparison but can also be read for 
6:                                                   // individual switch state like the encoder switch
7:                   
8:                   void PollSwitchesLeds(void){
9:                     if(MARK_HI_TOGGLEn_Get()!=Switches.S1){  // Switch state changed
10:                      Switches.S1=MARK_HI_TOGGLEn_Get();   // Remember the new state
11:                      if(0==Switches.S1){                 // S1 closed, toggle LED
12:                        MARK_HI_LED_Toggle();
13:                      }  
14:                    }
15:                    if(SHIFT_TOGGLEn_Get()!=Switches.S2){
16:                      Switches.S2=SHIFT_TOGGLEn_Get();
17:                      if(0==Switches.S2){
18:                        SHIFT_850_LED_Toggle();    
19:                      }    
20:                    }
21:                    if(AUTOSTART_TOGGLEn_Get()!=Switches.S3){
22:                      Switches.S3=AUTOSTART_TOGGLEn_Get();
23:                      if(0==Switches.S3){
24:                        AUTOSTART_LED_Toggle();    
25:                      }    
26:                    }
27:                    if(MOTOR_TOGGLEn_Get()!=Switches.S4){
28:                      Switches.S4=MOTOR_TOGGLEn_Get();
29:                      if(0==Switches.S4){
30:                        MOTOR_LED_Toggle();    
31:                      }    
32:                    }
33:                    if(KOS_TOGGLEn_Get()!=Switches.S5){
34:                      Switches.S5=KOS_TOGGLEn_Get();
35:                      if(0==Switches.S5){
36:                        KOS_LED_Toggle();    
37:                      }    
38:                    }
39:                    if(TX_TOGGLEn_Get()!=Switches.S6){
40:                      Switches.S6=TX_TOGGLEn_Get();
41:                      if(0==Switches.S6){
42:                        TX_LED_Toggle();    
43:                      }    
44:                    }
45:                    Switches.S7=ENCODER_SWn_Get();      // Just copy over encoder push switch to read without bounce
46:                  }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00A528  27BDFFF8   ADDIU SP, SP, -8
9D00A52C  AFBE0004   SW FP, 4(SP)
9D00A530  03A0F025   OR FP, SP, ZERO
9D00A534  3C02BF86   LUI V0, -16506
9D00A538  8C420120   LW V0, 288(V0)
9D00A53C  00021182   SRL V0, V0, 6
9D00A540  30420001   ANDI V0, V0, 1
9D00A544  93838160   LBU V1, -32416(GP)
9D00A548  7C630000   EXT V1, V1, 0, 1
9D00A54C  306300FF   ANDI V1, V1, 255
9D00A550  10430011   BEQ V0, V1, 0x9D00A598
9D00A554  00000000   NOP
9D00A558  3C02BF86   LUI V0, -16506
9D00A55C  8C420120   LW V0, 288(V0)
9D00A560  00021182   SRL V0, V0, 6
9D00A564  30420001   ANDI V0, V0, 1
9D00A568  304300FF   ANDI V1, V0, 255
9D00A56C  93828160   LBU V0, -32416(GP)
9D00A570  7C620004   INS V0, V1, 0, 1
9D00A574  A3828160   SB V0, -32416(GP)
9D00A578  93828160   LBU V0, -32416(GP)
9D00A57C  30420001   ANDI V0, V0, 1
9D00A580  304200FF   ANDI V0, V0, 255
9D00A584  14400004   BNE V0, ZERO, 0x9D00A598
9D00A588  00000000   NOP
9D00A58C  3C02BF86   LUI V0, -16506
9D00A590  24030080   ADDIU V1, ZERO, 128
9D00A594  AC43013C   SW V1, 316(V0)
9D00A598  3C02BF86   LUI V0, -16506
9D00A59C  8C420120   LW V0, 288(V0)
9D00A5A0  00021302   SRL V0, V0, 12
9D00A5A4  30420001   ANDI V0, V0, 1
9D00A5A8  93838160   LBU V1, -32416(GP)
9D00A5AC  7C630040   EXT V1, V1, 1, 1
9D00A5B0  306300FF   ANDI V1, V1, 255
9D00A5B4  10430011   BEQ V0, V1, 0x9D00A5FC
9D00A5B8  00000000   NOP
9D00A5BC  3C02BF86   LUI V0, -16506
9D00A5C0  8C420120   LW V0, 288(V0)
9D00A5C4  00021302   SRL V0, V0, 12
9D00A5C8  30420001   ANDI V0, V0, 1
9D00A5CC  304300FF   ANDI V1, V0, 255
9D00A5D0  93828160   LBU V0, -32416(GP)
9D00A5D4  7C620844   INS V0, V1, 1, 1
9D00A5D8  A3828160   SB V0, -32416(GP)
9D00A5DC  93828160   LBU V0, -32416(GP)
9D00A5E0  30420002   ANDI V0, V0, 2
9D00A5E4  304200FF   ANDI V0, V0, 255
9D00A5E8  14400004   BNE V0, ZERO, 0x9D00A5FC
9D00A5EC  00000000   NOP
9D00A5F0  3C02BF86   LUI V0, -16506
9D00A5F4  24032000   ADDIU V1, ZERO, 8192
9D00A5F8  AC43013C   SW V1, 316(V0)
9D00A5FC  3C02BF86   LUI V0, -16506
9D00A600  8C420120   LW V0, 288(V0)
9D00A604  000213C2   SRL V0, V0, 15
9D00A608  30420001   ANDI V0, V0, 1
9D00A60C  93838160   LBU V1, -32416(GP)
9D00A610  7C630080   EXT V1, V1, 2, 1
9D00A614  306300FF   ANDI V1, V1, 255
9D00A618  10430011   BEQ V0, V1, 0x9D00A660
9D00A61C  00000000   NOP
9D00A620  3C02BF86   LUI V0, -16506
9D00A624  8C420120   LW V0, 288(V0)
9D00A628  000213C2   SRL V0, V0, 15
9D00A62C  30420001   ANDI V0, V0, 1
9D00A630  304300FF   ANDI V1, V0, 255
9D00A634  93828160   LBU V0, -32416(GP)
9D00A638  7C621084   INS V0, V1, 2, 1
9D00A63C  A3828160   SB V0, -32416(GP)
9D00A640  93828160   LBU V0, -32416(GP)
9D00A644  30420004   ANDI V0, V0, 4
9D00A648  304200FF   ANDI V0, V0, 255
9D00A64C  14400004   BNE V0, ZERO, 0x9D00A660
9D00A650  00000000   NOP
9D00A654  3C02BF86   LUI V0, -16506
9D00A658  34038000   ORI V1, ZERO, -32768
9D00A65C  AC43023C   SW V1, 572(V0)
9D00A660  3C02BF86   LUI V0, -16506
9D00A664  8C420220   LW V0, 544(V0)
9D00A668  00021302   SRL V0, V0, 12
9D00A66C  30420001   ANDI V0, V0, 1
9D00A670  93838160   LBU V1, -32416(GP)
9D00A674  7C6300C0   EXT V1, V1, 3, 1
9D00A678  306300FF   ANDI V1, V1, 255
9D00A67C  10430011   BEQ V0, V1, 0x9D00A6C4
9D00A680  00000000   NOP
9D00A684  3C02BF86   LUI V0, -16506
9D00A688  8C420220   LW V0, 544(V0)
9D00A68C  00021302   SRL V0, V0, 12
9D00A690  30420001   ANDI V0, V0, 1
9D00A694  304300FF   ANDI V1, V0, 255
9D00A698  93828160   LBU V0, -32416(GP)
9D00A69C  7C6218C4   INS V0, V1, 3, 1
9D00A6A0  A3828160   SB V0, -32416(GP)
9D00A6A4  93828160   LBU V0, -32416(GP)
9D00A6A8  30420008   ANDI V0, V0, 8
9D00A6AC  304200FF   ANDI V0, V0, 255
9D00A6B0  14400004   BNE V0, ZERO, 0x9D00A6C4
9D00A6B4  00000000   NOP
9D00A6B8  3C02BF86   LUI V0, -16506
9D00A6BC  24030008   ADDIU V1, ZERO, 8
9D00A6C0  AC43033C   SW V1, 828(V0)
9D00A6C4  3C02BF86   LUI V0, -16506
9D00A6C8  8C420320   LW V0, 800(V0)
9D00A6CC  00021102   SRL V0, V0, 4
9D00A6D0  30420001   ANDI V0, V0, 1
9D00A6D4  93838160   LBU V1, -32416(GP)
9D00A6D8  7C630100   EXT V1, V1, 4, 1
9D00A6DC  306300FF   ANDI V1, V1, 255
9D00A6E0  10430011   BEQ V0, V1, 0x9D00A728
9D00A6E4  00000000   NOP
9D00A6E8  3C02BF86   LUI V0, -16506
9D00A6EC  8C420320   LW V0, 800(V0)
9D00A6F0  00021102   SRL V0, V0, 4
9D00A6F4  30420001   ANDI V0, V0, 1
9D00A6F8  304300FF   ANDI V1, V0, 255
9D00A6FC  93828160   LBU V0, -32416(GP)
9D00A700  7C622104   INS V0, V1, 4, 1
9D00A704  A3828160   SB V0, -32416(GP)
9D00A708  93828160   LBU V0, -32416(GP)
9D00A70C  30420010   ANDI V0, V0, 16
9D00A710  304200FF   ANDI V0, V0, 255
9D00A714  14400004   BNE V0, ZERO, 0x9D00A728
9D00A718  00000000   NOP
9D00A71C  3C02BF86   LUI V0, -16506
9D00A720  24030020   ADDIU V1, ZERO, 32
9D00A724  AC43033C   SW V1, 828(V0)
9D00A728  3C02BF86   LUI V0, -16506
9D00A72C  8C420320   LW V0, 800(V0)
9D00A730  000212C2   SRL V0, V0, 11
9D00A734  30420001   ANDI V0, V0, 1
9D00A738  93838160   LBU V1, -32416(GP)
9D00A73C  7C630140   EXT V1, V1, 5, 1
9D00A740  306300FF   ANDI V1, V1, 255
9D00A744  10430011   BEQ V0, V1, 0x9D00A78C
9D00A748  00000000   NOP
9D00A74C  3C02BF86   LUI V0, -16506
9D00A750  8C420320   LW V0, 800(V0)
9D00A754  000212C2   SRL V0, V0, 11
9D00A758  30420001   ANDI V0, V0, 1
9D00A75C  304300FF   ANDI V1, V0, 255
9D00A760  93828160   LBU V0, -32416(GP)
9D00A764  7C622944   INS V0, V1, 5, 1
9D00A768  A3828160   SB V0, -32416(GP)
9D00A76C  93828160   LBU V0, -32416(GP)
9D00A770  30420020   ANDI V0, V0, 32
9D00A774  304200FF   ANDI V0, V0, 255
9D00A778  14400004   BNE V0, ZERO, 0x9D00A78C
9D00A77C  00000000   NOP
9D00A780  3C02BF86   LUI V0, -16506
9D00A784  24030100   ADDIU V1, ZERO, 256
9D00A788  AC43013C   SW V1, 316(V0)
9D00A78C  3C02BF86   LUI V0, -16506
9D00A790  8C420520   LW V0, 1312(V0)
9D00A794  30420001   ANDI V0, V0, 1
9D00A798  304300FF   ANDI V1, V0, 255
9D00A79C  93828160   LBU V0, -32416(GP)
9D00A7A0  7C623184   INS V0, V1, 6, 1
9D00A7A4  A3828160   SB V0, -32416(GP)
9D00A7A8  00000000   NOP
9D00A7AC  03C0E825   OR SP, FP, ZERO
9D00A7B0  8FBE0004   LW FP, 4(SP)
9D00A7B4  27BD0008   ADDIU SP, SP, 8
9D00A7B8  03E00008   JR RA
9D00A7BC  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/pollencoder.c  --------------
1:                   // PollEncoder.c
2:                   
3:                   // Based on encoder rotation, increments or decrements EncoderCount.
4:                   
5:                   #include "PollEncoder.h"
6:                   #include "ByteToBinary.h"  // for degug
7:                   #include <stdbool.h>                    // Defines true
8:                   
9:                   
10:                  int32_t EncoderCount=0;
11:                  
12:                  
13:                  void PollEncoder(void){
14:                    // Get current and previous encoder bits and look for specific patterns
15:                    // indicating clockwise or counterclockwise rotation. Discard all other
16:                    // values, most likely due to contact bounce.
17:                    
18:                    static uint32_t OldNew=0x0f;  // 2 lsb are current BnAn. Nest 2 bits are previous value  
19:                    OldNew=OldNew<<2;                  // Shift old
20:                    OldNew&=0b1100;             // Clear to 2 lsb
21:                    if(1==QAn_Get()) OldNew|=1; // If A high, set the lsb
22:                    if(1==QBn_Get()) OldNew|=2; // If B high, set the D1
23:                    switch(OldNew){
24:                      case 0b1011:         // A was low, now both high
25:                        EncoderCount--;   // Moving counterclockwise, decrease count
26:                        break;
27:                      case 0b0111:        // B was low, now both high
28:                        EncoderCount++;   // Moving clockwise, increase count
29:                      default:            // Glitch or other error, do nothing
30:                        break;
31:                    }
32:                    // Debug
33:                  #if 1
34:                    static int32_t OldEncoderCount=0;   // Here for debut
35:                    if(OldEncoderCount!=EncoderCount){
36:                      OldEncoderCount=EncoderCount;
37:                      sprintf(StringBuf,"%d\r\n", EncoderCount);
38:                      UART1_Write((uint8_t*)StringBuf,strlen(StringBuf));   // Cast to uint_8. Sprintf outputs int8 while UAR12_Write takes uint8
39:                    }// End debug
40:                  #endif   
41:                  }
42:                  
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00D0E0  27BDFFE8   ADDIU SP, SP, -24
9D00D0E4  AFBF0014   SW RA, 20(SP)
9D00D0E8  AFBE0010   SW FP, 16(SP)
9D00D0EC  03A0F025   OR FP, SP, ZERO
9D00D0F0  8F828034   LW V0, -32716(GP)
9D00D0F4  00021080   SLL V0, V0, 2
9D00D0F8  AF828034   SW V0, -32716(GP)
9D00D0FC  8F828034   LW V0, -32716(GP)
9D00D100  3042000C   ANDI V0, V0, 12
9D00D104  AF828034   SW V0, -32716(GP)
9D00D108  3C02BF86   LUI V0, -16506
9D00D10C  8C420420   LW V0, 1056(V0)
9D00D110  00021042   SRL V0, V0, 1
9D00D114  30430001   ANDI V1, V0, 1
9D00D118  24020001   ADDIU V0, ZERO, 1
9D00D11C  14620004   BNE V1, V0, 0x9D00D130
9D00D120  00000000   NOP
9D00D124  8F828034   LW V0, -32716(GP)
9D00D128  34420001   ORI V0, V0, 1
9D00D12C  AF828034   SW V0, -32716(GP)
9D00D130  3C02BF86   LUI V0, -16506
9D00D134  8C420420   LW V0, 1056(V0)
9D00D138  00021082   SRL V0, V0, 2
9D00D13C  30430001   ANDI V1, V0, 1
9D00D140  24020001   ADDIU V0, ZERO, 1
9D00D144  14620004   BNE V1, V0, 0x9D00D158
9D00D148  00000000   NOP
9D00D14C  8F828034   LW V0, -32716(GP)
9D00D150  34420002   ORI V0, V0, 2
9D00D154  AF828034   SW V0, -32716(GP)
9D00D158  8F828034   LW V0, -32716(GP)
9D00D15C  24030007   ADDIU V1, ZERO, 7
9D00D160  10430009   BEQ V0, V1, 0x9D00D188
9D00D164  00000000   NOP
9D00D168  2403000B   ADDIU V1, ZERO, 11
9D00D16C  14430009   BNE V0, V1, 0x9D00D194
9D00D170  00000000   NOP
9D00D174  8F8280E8   LW V0, -32536(GP)
9D00D178  2442FFFF   ADDIU V0, V0, -1
9D00D17C  AF8280E8   SW V0, -32536(GP)
9D00D180  10000005   BEQ ZERO, ZERO, 0x9D00D198
9D00D184  00000000   NOP
9D00D188  8F8280E8   LW V0, -32536(GP)
9D00D18C  24420001   ADDIU V0, V0, 1
9D00D190  AF8280E8   SW V0, -32536(GP)
9D00D194  00000000   NOP
9D00D198  8F8380EC   LW V1, -32532(GP)
9D00D19C  8F8280E8   LW V0, -32536(GP)
9D00D1A0  10620014   BEQ V1, V0, 0x9D00D1F4
9D00D1A4  00000000   NOP
9D00D1A8  8F8280E8   LW V0, -32536(GP)
9D00D1AC  AF8280EC   SW V0, -32532(GP)
9D00D1B0  8F8280E8   LW V0, -32536(GP)
9D00D1B4  00403025   OR A2, V0, ZERO
9D00D1B8  3C029D01   LUI V0, -25343
9D00D1BC  24451DC8   ADDIU A1, V0, 7624
9D00D1C0  3C028000   LUI V0, -32768
9D00D1C4  244401CC   ADDIU A0, V0, 460
9D00D1C8  0F404697   JAL __wrap_sprintf
9D00D1CC  00000000   NOP
9D00D1D0  3C028000   LUI V0, -32768
9D00D1D4  244401CC   ADDIU A0, V0, 460
9D00D1D8  0F403196   JAL strlen
9D00D1DC  00000000   NOP
9D00D1E0  00402825   OR A1, V0, ZERO
9D00D1E4  3C028000   LUI V0, -32768
9D00D1E8  244401CC   ADDIU A0, V0, 460
9D00D1EC  0F4035A7   JAL UART1_Write
9D00D1F0  00000000   NOP
9D00D1F4  00000000   NOP
9D00D1F8  03C0E825   OR SP, FP, ZERO
9D00D1FC  8FBF0014   LW RA, 20(SP)
9D00D200  8FBE0010   LW FP, 16(SP)
9D00D204  27BD0018   ADDIU SP, SP, 24
9D00D208  03E00008   JR RA
9D00D20C  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/main.c  ---------------------
1:                   /*******************************************************************************
2:                     Main Source File
3:                   
4:                     Company:
5:                      W6IWI.ORG
6:                     File Name:
7:                       main.c
8:                   
9:                     Summary:
10:                      This file contains the "main" function for a project.
11:                  
12:                    Description:
13:                      This file contains the "main" function for a project.  The
14:                      "main" function calls the "SYS_Initialize" function to initialize the state
15:                      machines of all modules in the system
16:                   *******************************************************************************/
17:                  
18:                  // *****************************************************************************
19:                  // *****************************************************************************
20:                  // Section: Included Files
21:                  // *****************************************************************************
22:                  // *****************************************************************************
23:                  
24:                  #include <stddef.h>                     // Defines NULL
25:                  #include <stdbool.h>                    // Defines true
26:                  #include <stdlib.h>                     // Defines EXIT_FAILURE
27:                  #include <stdio.h>                      // sprintf, etc.
28:                  #include <string.h>                     // strlen, etc.
29:                  #include <stdint.h>
30:                  #include "definitions.h"                // SYS function prototypes
31:                  #include "PwmAudioOut.h"                // Convert floating sample to PWM duty cycle
32:                  #include "dds.h"                        // Generate next sample via Direct Digital Synthesis
33:                  #include "biquad.h"                     // biquad filters. Includes typedef for smp_type
34:                  #include "DynamicThreshold.h"           // Calculates threshold based on max mark and space levels
35:                  #include "agc.h"                        // Input automatic gain control
36:                  #include "main.h"
37:                  #include "display.h"
38:                  #include "xyScope.h"
39:                  #include "AfskGen.h" 
40:                  #include "BaudotUart.h"
41:                  #include "PollSwitchesLeds.h"           // Go poll the front panel
42:                  #include "PollEncoder.h"                // Poll the quadrature encoder
43:                  #include "UserConfig.h"                 // Tone frequencies, etc.
44:                  #include "filters.h"                    // Set up filters and modify based on button presses
45:                  #include "AutostartKos.h"               // Handle autostart and KOS
46:                  #include "ExtFlash.h"
47:                  #include "CommandInterpreter.h"
48:                  
49:                  static void MyTimer2Isr(uint32_t intCause, uintptr_t context);
50:                  
51:                  // *****************************************************************************
52:                  // *****************************************************************************
53:                  // Section: Main Entry Point
54:                  // *****************************************************************************
55:                  // *****************************************************************************
56:                  
57:                  // Globals 
58:                  volatile int16_t Timer2TimeoutCounter=0; // Derive 8 kHz from timer 2 80 kHz - Decremented by MyTimer2Isr.
59:                  int16_t FpPollCounter=0;                // Decrements at 8 kHz telling us when to poll switches and LEDs.
60:                  // Audio samples at various stages
61:                  uint16_t AdcSample;         // Raw sample from ADC. Converted to AdcSamplef for calculations.
62:                  char StringBuf[100];        // Build strings here
63:                  double samplef, TestSamplef, MarkSample, SpaceSample, MarkDemodOut, SpaceDemodOut, DiscrimOut, DdsOut, Threshold;  // These were originally in main but seemed to get corrupted
64:                  // What drives the audio output. Usually dds (AFSK tone), but others for debug.  
65:                  enum {NONE,ADC, AGC, INPUT_BPF, LIMITER, MARK_FILTER_OUT, SPACE_FILTER_OUT, MARK_DEMOD_OUT, SPACE_DEMOD_OUT, DISCRIM, DDS, THRESHOLD, DISCRIM_LESS_THRESHOLD} AudioOut=DDS;
66:                  UartDest_t UartDest=CLI;   // Where to send UART1 data
67:                  
68:                  
69:                  int main ( void ){
70:                    int n;
71:                    int MarkHoldTimer=0;        // How long 'til we mark hold
72:                    uint8_t RxChar;
73:                    // uint32_t FlashId;
74:                    /* Initialize all modules */
75:                    SYS_Initialize ( NULL );    // Run init code generated by Harmony
76:                    TMR2_CallbackRegister(MyTimer2Isr,0);  // Function to call on timer 2 overflow
77:                    TMR2_Start();               // Timer for 80 kHz PWM output
78:                    OCMP1_Enable();             // PWM generator for audio  
79:                    PrintString("\r\n\nPWM AFSK output initialized\r\n");
80:                    DynamicThresholdInit();     // Set up LPF used in dynamic threshold
81:                    PrintString("Dynamic threshold initialized\r\n");
82:                    LoadDefaultConfig();        // Load default user config (tone freuqncies, etc.))
83:                    PrintString("Default config loaded\r\n");
84:                    FiltersInit();              // Initialize all biquads
85:                    PrintString("Filters initialized\r\n");
86:                    AgcInit();                  // Set up automatic gain control
87:                    PrintString("AGC initialized\r\n");
88:                    DisplayInit();         // Initialize display and related fifo
89:                    PrintString("Display initialized\r\n");
90:                    AudioPwmSet(0.0);           // Initialize PWM to 50% duty cycle representing 0.0.
91:                    ADCHS_ChannelConversionStart(2); // Start a first ADC conversion
92:                    AfskGenInit();      // Initialize a low pass filter between loop current sample and DDS
93:                    PrintString("AFSK generator initialized\r\n");
94:                    sprintf(StringBuf,"External flash ID = %x. Should be ef3013\r\n",ReadExtFlashID());
95:                    PrintString(StringBuf);
96:                    LoadSavedConfig();          // Load config from flash
97:                    PrintString("\nDSP TU\r\nhttps://w6iwi.org/rttu/DspTU2\r\n\n>");
98:                    // Test ext flash write and read
99:                    //StreamProgramExtFlash(0,12,(uint8_t*)"Hello World!"); // Test write to flash
100:                   // ReadExtFlashArray(0,(uint8_t*)StringBuf,12);
101:                   DisplayClear();
102:                   while ( true ){
103:                     if(Timer2TimeoutCounter<1){        // We have timed out 10 times, so it has been 125 us
104:                       IDLEn_Set();                  // CPU not idle, so set RE7 so we can time it 
105:                       // CLRWDT;                     // Clear the watchdog timer
106:                       FpPollCounter--;                // Decrement at 8 kHz so we can poll front panel now and then
107:                       Timer2TimeoutCounter+=10;    // come back in 125 us. PWM frequency is 80 kHz, so change every 10 cycles
108:                       AdcSample=ADCHS_ChannelResultGet(2);      // Get sample as uint16_t
109:                       samplef=(smp_type)(AdcSample-2048)/2048.0;   // Convert to smp_type with mid-scale=0.0
110:                       ADCHS_ChannelConversionStart(2);              // Start next ADC conversion 
111:                       if(1==UserConfig.NoLoop){              // If NoLoop, ignore lack of loop current
112:                         AfskGen(BaudotUartTxOut);
113:                       }else{
114:                         AfskGen(LoopSenseMark && BaudotUartTxOut);     // Adjust DDS frequency based on loop condition and software uart
115:                       }  
116:                       BaudotUartRx(LoopSenseMark);        // Send sensed loop condition (true is mark) to softwaree uart)
117:                       TestSamplef=0.0;                // Output silence if nothing selected
118:                       if(AudioOut==ADC) TestSamplef=samplef;
119:                       if(UserConfig.UseInputBpf==TRUE){
120:                         samplef=BiQuad(samplef,InputBpf);
121:                       }
122:                       if(AudioOut==INPUT_BPF) TestSamplef=samplef;
123:                       if(UserConfig.UseAgc==TRUE){
124:                         samplef=agc(samplef);
125:                       }
126:                       if(AudioOut==AGC) TestSamplef=samplef;
127:                       if(UserConfig.UseLimiter==TRUE){                            // Use limiter or pass input to output
128:                         samplef=(smp_type)copysign(1.0,(double)samplef);            // Limiter. Returns 1.0 if sample positive, =1.0 if negative
129:                       }
130:                       if(AudioOut==LIMITER) TestSamplef=samplef;
131:                       MarkSample=samplef;                         
132:                       SpaceSample=samplef;
133:                       for(n=0;n<NumBpf;n++){
134:                         MarkSample=BiQuad(MarkSample,MarkFilter[n]);       // Mark BPF
135:                         SpaceSample=BiQuad(SpaceSample,SpaceFilter[n]);     // Space BPF
136:                       }
137:                       xyScope(MarkSample,SpaceSample);
138:                       if(AudioOut==MARK_FILTER_OUT) TestSamplef=MarkSample;
139:                       if(AudioOut==SPACE_FILTER_OUT) TestSamplef=SpaceSample;
140:                       MarkDemodOut=BiQuad(fabs(MarkSample), MarkDataFilter);  // Envelope detected and filtered mark
141:                       SpaceDemodOut=BiQuad(fabs(SpaceSample), SpaceDataFilter);    // Same for space
142:                       Threshold=DynamicThresholdGet(MarkDemodOut, SpaceDemodOut);
143:                       if(AudioOut==MARK_DEMOD_OUT) TestSamplef=MarkDemodOut;
144:                       if(AudioOut==SPACE_DEMOD_OUT) TestSamplef=SpaceDemodOut;
145:                              // DiscrimOut is difference between LPF of full wave rectified of mark and space BPFs
146:                       DiscrimOut=MarkDemodOut-SpaceDemodOut;
147:                       if(DiscrimOut-Threshold>UserConfig.MarkHoldThresh){  // we have mark instead of space or noise
148:                         MarkHoldTimer=2400;         // Allow loop key for another 300ms. One character is 163ms long
149:                       }else{
150:                         if(MarkHoldTimer>0) MarkHoldTimer--;
151:                       } 
152:                       if(AudioOut==DISCRIM) TestSamplef=DiscrimOut;
153:                       if(AudioOut==THRESHOLD) TestSamplef=Threshold;
154:                       if(AudioOut==DISCRIM_LESS_THRESHOLD) TestSamplef=DiscrimOut-Threshold;
155:                       if(TX_LED_Get()){     // Transmit selected
156:                         DdsOut=DdsNextSample(); // Run DDS tone generator only in transmit
157:                         LOOP_KEY_Set();     // Loop switch on
158:                         AFSK_OUT_EN_Set();  // Enable AFSK output
159:                         PTT_Set();          // Close PTT relay
160:                         MarkHoldTimer=0;    // Go into mark hold when dropping out of transmit
161:                       }else{                  // Not in tx, let received data key loop
162:                         AFSK_OUT_EN_Clear();  // Disable AFSK output
163:                         PTT_Clear();          // Release PTT relay                                        
164:                         if(MarkHoldTimer>0){     // Not in mark hold, key loop
165:                           if((DiscrimOut-Threshold)>=0){      // Mark
166:                             LOOP_KEY_Set();     // Loop switch on
167:                           }else{                  // Space
168:                             LOOP_KEY_Clear();     // Loop switch off
169:                           } 
170:                         }else{
171:                           LOOP_KEY_Set();     // Mark hold timed out, so hold mark
172:                         }
173:                       }       // end else not in transmit 
174:                       BaudotUartTx();     // UART data to baudot to BaudotUartTxOut. Run in both
175:                                           // tx and rx so KOS works.
176:                       AutostartKos(DiscrimOut);       // Handle autostart and Keyboard Operated Send only in mark
177:                       if(AudioOut==DDS) TestSamplef=DdsOut;
178:                       AudioPwmSet(TestSamplef);   // Output selected test signal or DDS
179:                     } // endif Timer2TimeoutCounter
180:                     if(Timer2TimeoutCounter>5){   // Don't need to handle audio for a while
181:                       DisplayPoll();            // If something in display fifo, send it
182:                       if(FpPollCounter<1){      // Time to poll front panel switches, LEDs, etc.
183:                         PollSwitchesLeds();   // Go poll the switches and LEDs.
184:                         PollShiftMarkHi();    // Change filters if shift or MarkHi changed
185:                         PollEncoder();        // Poll the quadrature encoder updating EncoderCount
186:                         FpPollCounter+=10;  // Each pass is 125us. Come back in 1.25ms
187:                       }
188:                       if(UartDest==CLI){    // UART/USB for command line interface
189:                         if(UART1_ReadCountGet()>0){   // There is a character waiting from UART1
190:                           UART1_Read(&RxChar,1);      // Get one character from uart fifo
191:                           CommandInterpreter(0,(char)RxChar); // Send to command interpreter
192:                           PrintString(StringBuf);     // Print any results
193:                         }
194:                       }  
195:                     }  
196:                     IDLEn_Clear();      // Exiting DSP code, so make RE7 low so we can see how much time spent there.  
197:                     /* Maintain state machines of all polled MPLAB Harmony modules. */
198:                     SYS_Tasks ( );
199:                   }  // end while(true))
200:                     /* Execution should not come here during normal operation */
201:                 
202:                     return ( EXIT_FAILURE );
203:                   }  // end main())
204:                 
205:                 
206:                 static void MyTimer2Isr(uint32_t intCause, uintptr_t context){
207:                     // Decrement a counter. Used to count 10 PWM cycles of 80 kHz to update duty cycle at 8 kHz
208:                     // See https://microchipdeveloper.com/harmony3:pic32mzef-getting-started-training-module-step5
209:                     // for info on interrupt callbacks.
210:                     Timer2TimeoutCounter--;
211:                 }
212:                 /*******************************************************************************
213:                  End of File
214:                 */
215:                 
216:                 void PrintString(char *string){
217:                   // Send the string to UART1 to USB.
218:                   UART1_Write((uint8_t*)string,strlen(string));   
219:                 }
220:                 
221:                 void PrintChar(char data){
222:                   // Print a character
223:                   UART1_Write((uint8_t*)&data,1); // Send to uart fofp
224:                 }
225:                 
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D005ED8  27BDFFC8   ADDIU SP, SP, -56
9D005EDC  AFBF0034   SW RA, 52(SP)
9D005EE0  AFBE0030   SW FP, 48(SP)
9D005EE4  AFB3002C   SW S3, 44(SP)
9D005EE8  AFB20028   SW S2, 40(SP)
9D005EEC  AFB10024   SW S1, 36(SP)
9D005EF0  AFB00020   SW S0, 32(SP)
9D005EF4  03A0F025   OR FP, SP, ZERO
9D005EF8  AFC00014   SW ZERO, 20(FP)
9D005EFC  00002025   OR A0, ZERO, ZERO
9D005F00  0F403B7B   JAL SYS_Initialize
9D005F04  00000000   NOP
9D005F08  00002825   OR A1, ZERO, ZERO
9D005F0C  3C029D01   LUI V0, -25343
9D005F10  244412C4   ADDIU A0, V0, 4804
9D005F14  0F40454A   JAL TMR2_CallbackRegister
9D005F18  00000000   NOP
9D005F1C  0F404601   JAL TMR2_Start
9D005F20  00000000   NOP
9D005F24  0F4045F5   JAL OCMP1_Enable
9D005F28  00000000   NOP
9D005F2C  3C029D01   LUI V0, -25343
9D005F30  2444D210   ADDIU A0, V0, -11760
9D005F34  0F404466   JAL PrintString
9D005F38  00000000   NOP
9D005F3C  0F4042CB   JAL DynamicThresholdInit
9D005F40  00000000   NOP
9D005F44  3C029D01   LUI V0, -25343
9D005F48  2444D234   ADDIU A0, V0, -11724
9D005F4C  0F404466   JAL PrintString
9D005F50  00000000   NOP
9D005F54  0F404414   JAL LoadDefaultConfig
9D005F58  00000000   NOP
9D005F5C  3C029D01   LUI V0, -25343
9D005F60  2444D254   ADDIU A0, V0, -11692
9D005F64  0F404466   JAL PrintString
9D005F68  00000000   NOP
9D005F6C  0F402A94   JAL FiltersInit
9D005F70  00000000   NOP
9D005F74  3C029D01   LUI V0, -25343
9D005F78  2444D26C   ADDIU A0, V0, -11668
9D005F7C  0F404466   JAL PrintString
9D005F80  00000000   NOP
9D005F84  0F404296   JAL AgcInit
9D005F88  00000000   NOP
9D005F8C  3C029D01   LUI V0, -25343
9D005F90  2444D284   ADDIU A0, V0, -11644
9D005F94  0F404466   JAL PrintString
9D005F98  00000000   NOP
9D005F9C  0F402744   JAL DisplayInit
9D005FA0  00000000   NOP
9D005FA4  3C029D01   LUI V0, -25343
9D005FA8  2444D298   ADDIU A0, V0, -11624
9D005FAC  0F404466   JAL PrintString
9D005FB0  00000000   NOP
9D005FB4  44806000   MTC1 ZERO, F12
9D005FB8  44E06000   MTHC1 ZERO, F12
9D005FBC  0F404142   JAL AudioPwmSet
9D005FC0  00000000   NOP
9D005FC4  24040002   ADDIU A0, ZERO, 2
9D005FC8  0F4043A5   JAL ADCHS_ChannelConversionStart
9D005FCC  00000000   NOP
9D005FD0  0F404559   JAL AfskGenInit
9D005FD4  00000000   NOP
9D005FD8  3C029D01   LUI V0, -25343
9D005FDC  2444D2B0   ADDIU A0, V0, -11600
9D005FE0  0F404466   JAL PrintString
9D005FE4  00000000   NOP
9D005FE8  0F403EDF   JAL ReadExtFlashID
9D005FEC  00000000   NOP
9D005FF0  00403025   OR A2, V0, ZERO
9D005FF4  3C029D01   LUI V0, -25343
9D005FF8  2445D2D0   ADDIU A1, V0, -11568
9D005FFC  3C028000   LUI V0, -32768
9D006000  244401CC   ADDIU A0, V0, 460
9D006004  0F404697   JAL __wrap_sprintf
9D006008  00000000   NOP
9D00600C  3C028000   LUI V0, -32768
9D006010  244401CC   ADDIU A0, V0, 460
9D006014  0F404466   JAL PrintString
9D006018  00000000   NOP
9D00601C  0F403DBB   JAL LoadSavedConfig
9D006020  00000000   NOP
9D006024  3C029D01   LUI V0, -25343
9D006028  2444D2FC   ADDIU A0, V0, -11524
9D00602C  0F404466   JAL PrintString
9D006030  00000000   NOP
9D006034  0F404183   JAL DisplayClear
9D006038  00000000   NOP
9D00603C  97828074   LHU V0, -32652(GP)
9D006040  7C021620   SEH V0, V0
9D006044  1C400156   BGTZ V0, main
9D006048  00000000   NOP
9D00604C  3C02BF86   LUI V0, -16506
9D006050  24030008   ADDIU V1, ZERO, 8
9D006054  AC430138   SW V1, 312(V0)
9D006058  87828076   LH V0, -32650(GP)
9D00605C  3042FFFF   ANDI V0, V0, -1
9D006060  2442FFFF   ADDIU V0, V0, -1
9D006064  3042FFFF   ANDI V0, V0, -1
9D006068  7C021620   SEH V0, V0
9D00606C  A7828076   SH V0, -32650(GP)
9D006070  97828074   LHU V0, -32652(GP)
9D006074  7C021620   SEH V0, V0
9D006078  3042FFFF   ANDI V0, V0, -1
9D00607C  2442000A   ADDIU V0, V0, 10
9D006080  3042FFFF   ANDI V0, V0, -1
9D006084  7C021620   SEH V0, V0
9D006088  A7828074   SH V0, -32652(GP)
9D00608C  24040002   ADDIU A0, ZERO, 2
9D006090  0F404509   JAL ADCHS_ChannelResultGet
9D006094  00000000   NOP
9D006098  A7828140   SH V0, -32448(GP)
9D00609C  97828140   LHU V0, -32448(GP)
9D0060A0  2442F800   ADDIU V0, V0, -2048
9D0060A4  44820000   MTC1 V0, F0
9D0060A8  46800061   CVT.D.W F1, F0
9D0060AC  3C029D01   LUI V0, -25343
9D0060B0  D440D328   LDC1 F0, -11480(V0)
9D0060B4  46200803   DIV.D F0, F1, F0
9D0060B8  F7808108   SDC1 F0, -32504(GP)
9D0060BC  24040002   ADDIU A0, ZERO, 2
9D0060C0  0F4043A5   JAL ADCHS_ChannelConversionStart
9D0060C4  00000000   NOP
9D0060C8  3C028000   LUI V0, -32768
9D0060CC  24420230   ADDIU V0, V0, 560
9D0060D0  8C430064   LW V1, 100(V0)
9D0060D4  24020001   ADDIU V0, ZERO, 1
9D0060D8  14620009   BNE V1, V0, main
9D0060DC  00000000   NOP
9D0060E0  8F828014   LW V0, -32748(GP)
9D0060E4  0002102B   SLTU V0, ZERO, V0
9D0060E8  304200FF   ANDI V0, V0, 255
9D0060EC  00402025   OR A0, V0, ZERO
9D0060F0  0F4042B1   JAL AfskGen
9D0060F4  00000000   NOP
9D0060F8  10000013   BEQ ZERO, ZERO, main
9D0060FC  00000000   NOP
9D006100  3C02BF86   LUI V0, -16506
9D006104  8C420420   LW V0, 1056(V0)
9D006108  00021182   SRL V0, V0, 6
9D00610C  30420001   ANDI V0, V0, 1
9D006110  14400007   BNE V0, ZERO, main
9D006114  00000000   NOP
9D006118  8F828014   LW V0, -32748(GP)
9D00611C  10400004   BEQ V0, ZERO, main
9D006120  00000000   NOP
9D006124  24020001   ADDIU V0, ZERO, 1
9D006128  10000002   BEQ ZERO, ZERO, main
9D00612C  00000000   NOP
9D006130  00001025   OR V0, ZERO, ZERO
9D006134  30420001   ANDI V0, V0, 1
9D006138  304200FF   ANDI V0, V0, 255
9D00613C  00402025   OR A0, V0, ZERO
9D006140  0F4042B1   JAL AfskGen
9D006144  00000000   NOP
9D006148  3C02BF86   LUI V0, -16506
9D00614C  8C420420   LW V0, 1056(V0)
9D006150  00021182   SRL V0, V0, 6
9D006154  30420001   ANDI V0, V0, 1
9D006158  2C420001   SLTIU V0, V0, 1
9D00615C  304200FF   ANDI V0, V0, 255
9D006160  00402025   OR A0, V0, ZERO
9D006164  0F402583   JAL BaudotUartRx
9D006168  00000000   NOP
9D00616C  AF808150   SW ZERO, -32432(GP)
9D006170  AF808154   SW ZERO, -32428(GP)
9D006174  8F838010   LW V1, -32752(GP)
9D006178  24020001   ADDIU V0, ZERO, 1
9D00617C  14620003   BNE V1, V0, main
9D006180  00000000   NOP
9D006184  D7808108   LDC1 F0, -32504(GP)
9D006188  F7808150   SDC1 F0, -32432(GP)
9D00618C  3C028000   LUI V0, -32768
9D006190  24420230   ADDIU V0, V0, 560
9D006194  8C430058   LW V1, 88(V0)
9D006198  24020001   ADDIU V0, ZERO, 1
9D00619C  14620008   BNE V1, V0, main
9D0061A0  00000000   NOP
9D0061A4  D7808108   LDC1 F0, -32504(GP)
9D0061A8  8F828194   LW V0, -32364(GP)
9D0061AC  00403025   OR A2, V0, ZERO
9D0061B0  46200306   MOV.D F12, F0
9D0061B4  0F403A06   JAL BiQuad
9D0061B8  00000000   NOP
9D0061BC  F7808108   SDC1 F0, -32504(GP)
9D0061C0  8F838010   LW V1, -32752(GP)
9D0061C4  24020003   ADDIU V0, ZERO, 3
9D0061C8  14620003   BNE V1, V0, main
9D0061CC  00000000   NOP
9D0061D0  D7808108   LDC1 F0, -32504(GP)
9D0061D4  F7808150   SDC1 F0, -32432(GP)
9D0061D8  3C028000   LUI V0, -32768
9D0061DC  24420230   ADDIU V0, V0, 560
9D0061E0  8C430060   LW V1, 96(V0)
9D0061E4  24020001   ADDIU V0, ZERO, 1
9D0061E8  14620006   BNE V1, V0, main
9D0061EC  00000000   NOP
9D0061F0  D7808108   LDC1 F0, -32504(GP)
9D0061F4  46200306   MOV.D F12, F0
9D0061F8  0F403B13   JAL agc
9D0061FC  00000000   NOP
9D006200  F7808108   SDC1 F0, -32504(GP)
9D006204  8F838010   LW V1, -32752(GP)
9D006208  24020002   ADDIU V0, ZERO, 2
9D00620C  14620003   BNE V1, V0, main
9D006210  00000000   NOP
9D006214  D7808108   LDC1 F0, -32504(GP)
9D006218  F7808150   SDC1 F0, -32432(GP)
9D00621C  3C028000   LUI V0, -32768
9D006220  24420230   ADDIU V0, V0, 560
9D006224  8C43005C   LW V1, 92(V0)
9D006228  24020001   ADDIU V0, ZERO, 1
9D00622C  14620009   BNE V1, V0, main
9D006230  00000000   NOP
9D006234  D7818108   LDC1 F1, -32504(GP)
9D006238  3C029D01   LUI V0, -25343
9D00623C  D440D330   LDC1 F0, -11472(V0)
9D006240  46200B86   MOV.D F14, F1
9D006244  46200306   MOV.D F12, F0
9D006248  0F404677   JAL copysign
9D00624C  00000000   NOP
9D006250  F7808108   SDC1 F0, -32504(GP)
9D006254  8F838010   LW V1, -32752(GP)
9D006258  24020004   ADDIU V0, ZERO, 4
9D00625C  14620003   BNE V1, V0, main
9D006260  00000000   NOP
9D006264  D7808108   LDC1 F0, -32504(GP)
9D006268  F7808150   SDC1 F0, -32432(GP)
9D00626C  D7808108   LDC1 F0, -32504(GP)
9D006270  F7808130   SDC1 F0, -32464(GP)
9D006274  D7808108   LDC1 F0, -32504(GP)
9D006278  F7808120   SDC1 F0, -32480(GP)
9D00627C  AFC00010   SW ZERO, 16(FP)
9D006280  1000001A   BEQ ZERO, ZERO, main
9D006284  00000000   NOP
9D006288  D7808130   LDC1 F0, -32464(GP)
9D00628C  8FC20010   LW V0, 16(FP)
9D006290  00021880   SLL V1, V0, 2
9D006294  27828188   ADDIU V0, GP, -32376
9D006298  00621021   ADDU V0, V1, V0
9D00629C  8C420000   LW V0, 0(V0)
9D0062A0  00403025   OR A2, V0, ZERO
9D0062A4  46200306   MOV.D F12, F0
9D0062A8  0F403A06   JAL BiQuad
9D0062AC  00000000   NOP
9D0062B0  F7808130   SDC1 F0, -32464(GP)
9D0062B4  D7808120   LDC1 F0, -32480(GP)
9D0062B8  8FC20010   LW V0, 16(FP)
9D0062BC  00021880   SLL V1, V0, 2
9D0062C0  27828174   ADDIU V0, GP, -32396
9D0062C4  00621021   ADDU V0, V1, V0
9D0062C8  8C420000   LW V0, 0(V0)
9D0062CC  00403025   OR A2, V0, ZERO
9D0062D0  46200306   MOV.D F12, F0
9D0062D4  0F403A06   JAL BiQuad
9D0062D8  00000000   NOP
9D0062DC  F7808120   SDC1 F0, -32480(GP)
9D0062E0  8FC20010   LW V0, 16(FP)
9D0062E4  24420001   ADDIU V0, V0, 1
9D0062E8  AFC20010   SW V0, 16(FP)
9D0062EC  8FC20010   LW V0, 16(FP)
9D0062F0  28420002   SLTI V0, V0, 2
9D0062F4  1440FFE4   BNE V0, ZERO, main
9D0062F8  00000000   NOP
9D0062FC  D7808130   LDC1 F0, -32464(GP)
9D006300  D7818120   LDC1 F1, -32480(GP)
9D006304  46200B86   MOV.D F14, F1
9D006308  46200306   MOV.D F12, F0
9D00630C  0F402BCB   JAL xyScope
9D006310  00000000   NOP
9D006314  8F838010   LW V1, -32752(GP)
9D006318  24020005   ADDIU V0, ZERO, 5
9D00631C  14620003   BNE V1, V0, main
9D006320  00000000   NOP
9D006324  D7808130   LDC1 F0, -32464(GP)
9D006328  F7808150   SDC1 F0, -32432(GP)
9D00632C  8F838010   LW V1, -32752(GP)
9D006330  24020006   ADDIU V0, ZERO, 6
9D006334  14620003   BNE V1, V0, main
9D006338  00000000   NOP
9D00633C  D7808120   LDC1 F0, -32480(GP)
9D006340  F7808150   SDC1 F0, -32432(GP)
9D006344  8F828130   LW V0, -32464(GP)
9D006348  8F838134   LW V1, -32460(GP)
9D00634C  00408025   OR S0, V0, ZERO
9D006350  7C71F000   EXT S1, V1, 0, 31
9D006354  8F828170   LW V0, -32400(GP)
9D006358  00403025   OR A2, V0, ZERO
9D00635C  44906000   MTC1 S0, F12
9D006360  44F16000   MTHC1 S1, F12
9D006364  0F403A06   JAL BiQuad
9D006368  00000000   NOP
9D00636C  F7808138   SDC1 F0, -32456(GP)
9D006370  8F828120   LW V0, -32480(GP)
9D006374  8F838124   LW V1, -32476(GP)
9D006378  00409025   OR S2, V0, ZERO
9D00637C  7C73F000   EXT S3, V1, 0, 31
9D006380  8F828190   LW V0, -32368(GP)
9D006384  00403025   OR A2, V0, ZERO
9D006388  44926000   MTC1 S2, F12
9D00638C  44F36000   MTHC1 S3, F12
9D006390  0F403A06   JAL BiQuad
9D006394  00000000   NOP
9D006398  F7808128   SDC1 F0, -32472(GP)
9D00639C  D7808138   LDC1 F0, -32456(GP)
9D0063A0  D7818128   LDC1 F1, -32472(GP)
9D0063A4  46200B86   MOV.D F14, F1
9D0063A8  46200306   MOV.D F12, F0
9D0063AC  0F4035EB   JAL DynamicThresholdGet
9D0063B0  00000000   NOP
9D0063B4  F7808110   SDC1 F0, -32496(GP)
9D0063B8  8F838010   LW V1, -32752(GP)
9D0063BC  24020007   ADDIU V0, ZERO, 7
9D0063C0  14620003   BNE V1, V0, main
9D0063C4  00000000   NOP
9D0063C8  D7808138   LDC1 F0, -32456(GP)
9D0063CC  F7808150   SDC1 F0, -32432(GP)
9D0063D0  8F838010   LW V1, -32752(GP)
9D0063D4  24020008   ADDIU V0, ZERO, 8
9D0063D8  14620003   BNE V1, V0, main
9D0063DC  00000000   NOP
9D0063E0  D7808128   LDC1 F0, -32472(GP)
9D0063E4  F7808150   SDC1 F0, -32432(GP)
9D0063E8  D7818138   LDC1 F1, -32456(GP)
9D0063EC  D7808128   LDC1 F0, -32472(GP)
9D0063F0  46200801   SUB.D F0, F1, F0
9D0063F4  F7808118   SDC1 F0, -32488(GP)
9D0063F8  D7818118   LDC1 F1, -32488(GP)
9D0063FC  D7808110   LDC1 F0, -32496(GP)
9D006400  46200841   SUB.D F1, F1, F0
9D006404  3C028000   LUI V0, -32768
9D006408  24420230   ADDIU V0, V0, 560
9D00640C  D4400030   LDC1 F0, 48(V0)
9D006410  4621003C   C.LT.D F0, F1
9D006414  45000005   BC1F main
9D006418  00000000   NOP
9D00641C  24020960   ADDIU V0, ZERO, 2400
9D006420  AFC20014   SW V0, 20(FP)
9D006424  10000007   BEQ ZERO, ZERO, main
9D006428  00000000   NOP
9D00642C  8FC20014   LW V0, 20(FP)
9D006430  18400004   BLEZ V0, main
9D006434  00000000   NOP
9D006438  8FC20014   LW V0, 20(FP)
9D00643C  2442FFFF   ADDIU V0, V0, -1
9D006440  AFC20014   SW V0, 20(FP)
9D006444  8F838010   LW V1, -32752(GP)
9D006448  24020009   ADDIU V0, ZERO, 9
9D00644C  14620003   BNE V1, V0, main
9D006450  00000000   NOP
9D006454  D7808118   LDC1 F0, -32488(GP)
9D006458  F7808150   SDC1 F0, -32432(GP)
9D00645C  8F838010   LW V1, -32752(GP)
9D006460  2402000B   ADDIU V0, ZERO, 11
9D006464  14620003   BNE V1, V0, main
9D006468  00000000   NOP
9D00646C  D7808110   LDC1 F0, -32496(GP)
9D006470  F7808150   SDC1 F0, -32432(GP)
9D006474  8F838010   LW V1, -32752(GP)
9D006478  2402000C   ADDIU V0, ZERO, 12
9D00647C  14620005   BNE V1, V0, main
9D006480  00000000   NOP
9D006484  D7818118   LDC1 F1, -32488(GP)
9D006488  D7808110   LDC1 F0, -32496(GP)
9D00648C  46200801   SUB.D F0, F1, F0
9D006490  F7808150   SDC1 F0, -32432(GP)
9D006494  3C02BF86   LUI V0, -16506
9D006498  8C420120   LW V0, 288(V0)
9D00649C  00021202   SRL V0, V0, 8
9D0064A0  30420001   ANDI V0, V0, 1
9D0064A4  10400010   BEQ V0, ZERO, main
9D0064A8  00000000   NOP
9D0064AC  0F404203   JAL DdsNextSample
9D0064B0  00000000   NOP
9D0064B4  F7808148   SDC1 F0, -32440(GP)
9D0064B8  3C02BF86   LUI V0, -16506
9D0064BC  24030020   ADDIU V1, ZERO, 32
9D0064C0  AC430438   SW V1, 1080(V0)
9D0064C4  3C02BF86   LUI V0, -16506
9D0064C8  24030020   ADDIU V1, ZERO, 32
9D0064CC  AC430138   SW V1, 312(V0)
9D0064D0  3C02BF86   LUI V0, -16506
9D0064D4  24030010   ADDIU V1, ZERO, 16
9D0064D8  AC430138   SW V1, 312(V0)
9D0064DC  AFC00014   SW ZERO, 20(FP)
9D0064E0  1000001F   BEQ ZERO, ZERO, main
9D0064E4  00000000   NOP
9D0064E8  3C02BF86   LUI V0, -16506
9D0064EC  24030020   ADDIU V1, ZERO, 32
9D0064F0  AC430134   SW V1, 308(V0)
9D0064F4  3C02BF86   LUI V0, -16506
9D0064F8  24030010   ADDIU V1, ZERO, 16
9D0064FC  AC430134   SW V1, 308(V0)
9D006500  8FC20014   LW V0, 20(FP)
9D006504  18400013   BLEZ V0, main
9D006508  00000000   NOP
9D00650C  D7818118   LDC1 F1, -32488(GP)
9D006510  D7808110   LDC1 F0, -32496(GP)
9D006514  46200801   SUB.D F0, F1, F0
9D006518  44800800   MTC1 ZERO, F1
9D00651C  44E00800   MTHC1 ZERO, F1
9D006520  4620093E   C.LE.D 1, F1, F0
9D006524  45040006   BC1F 1, main
9D006528  00000000   NOP
9D00652C  3C02BF86   LUI V0, -16506
9D006530  24030020   ADDIU V1, ZERO, 32
9D006534  AC430438   SW V1, 1080(V0)
9D006538  10000009   BEQ ZERO, ZERO, main
9D00653C  00000000   NOP
9D006540  3C02BF86   LUI V0, -16506
9D006544  24030020   ADDIU V1, ZERO, 32
9D006548  AC430434   SW V1, 1076(V0)
9D00654C  10000004   BEQ ZERO, ZERO, main
9D006550  00000000   NOP
9D006554  3C02BF86   LUI V0, -16506
9D006558  24030020   ADDIU V1, ZERO, 32
9D00655C  AC430438   SW V1, 1080(V0)
9D006560  0F401EBE   JAL BaudotUartTx
9D006564  00000000   NOP
9D006568  D7808118   LDC1 F0, -32488(GP)
9D00656C  46200306   MOV.D F12, F0
9D006570  0F40248A   JAL AutostartKos
9D006574  00000000   NOP
9D006578  8F838010   LW V1, -32752(GP)
9D00657C  2402000A   ADDIU V0, ZERO, 10
9D006580  14620003   BNE V1, V0, main
9D006584  00000000   NOP
9D006588  D7808148   LDC1 F0, -32440(GP)
9D00658C  F7808150   SDC1 F0, -32432(GP)
9D006590  D7808150   LDC1 F0, -32432(GP)
9D006594  46200306   MOV.D F12, F0
9D006598  0F404142   JAL AudioPwmSet
9D00659C  00000000   NOP
9D0065A0  97828074   LHU V0, -32652(GP)
9D0065A4  7C021620   SEH V0, V0
9D0065A8  28420006   SLTI V0, V0, 6
9D0065AC  14400028   BNE V0, ZERO, main
9D0065B0  00000000   NOP
9D0065B4  0F403773   JAL DisplayPoll
9D0065B8  00000000   NOP
9D0065BC  87828076   LH V0, -32650(GP)
9D0065C0  1C40000D   BGTZ V0, main
9D0065C4  00000000   NOP
9D0065C8  0F40294A   JAL PollSwitchesLeds
9D0065CC  00000000   NOP
9D0065D0  0F403F77   JAL PollShiftMarkHi
9D0065D4  00000000   NOP
9D0065D8  0F403438   JAL PollEncoder
9D0065DC  00000000   NOP
9D0065E0  87828076   LH V0, -32650(GP)
9D0065E4  3042FFFF   ANDI V0, V0, -1
9D0065E8  2442000A   ADDIU V0, V0, 10
9D0065EC  3042FFFF   ANDI V0, V0, -1
9D0065F0  7C021620   SEH V0, V0
9D0065F4  A7828076   SH V0, -32650(GP)
9D0065F8  8F828078   LW V0, -32648(GP)
9D0065FC  14400014   BNE V0, ZERO, main
9D006600  00000000   NOP
9D006604  0F403FC1   JAL UART1_ReadCountGet
9D006608  00000000   NOP
9D00660C  10400010   BEQ V0, ZERO, main
9D006610  00000000   NOP
9D006614  27C20018   ADDIU V0, FP, 24
9D006618  24050001   ADDIU A1, ZERO, 1
9D00661C  00402025   OR A0, V0, ZERO
9D006620  0F403346   JAL UART1_Read
9D006624  00000000   NOP
9D006628  93C20018   LBU V0, 24(FP)
9D00662C  7C021420   SEB V0, V0
9D006630  00402825   OR A1, V0, ZERO
9D006634  00002025   OR A0, ZERO, ZERO
9D006638  0F400762   JAL CommandInterpreter
9D00663C  00000000   NOP
9D006640  3C028000   LUI V0, -32768
9D006644  244401CC   ADDIU A0, V0, 460
9D006648  0F404466   JAL PrintString
9D00664C  00000000   NOP
9D006650  3C02BF86   LUI V0, -16506
9D006654  24030008   ADDIU V1, ZERO, 8
9D006658  AC430134   SW V1, 308(V0)
9D00665C  1000FE77   BEQ ZERO, ZERO, main
9D006660  00000000   NOP
9D011198  27BDFFE8   ADDIU SP, SP, -24
9D01119C  AFBF0014   SW RA, 20(SP)
9D0111A0  AFBE0010   SW FP, 16(SP)
9D0111A4  03A0F025   OR FP, SP, ZERO
9D0111A8  AFC40018   SW A0, 24(FP)
9D0111AC  8FC40018   LW A0, 24(FP)
9D0111B0  0F403196   JAL strlen
9D0111B4  00000000   NOP
9D0111B8  00402825   OR A1, V0, ZERO
9D0111BC  8FC40018   LW A0, 24(FP)
9D0111C0  0F4035A7   JAL UART1_Write
9D0111C4  00000000   NOP
9D0111C8  00000000   NOP
9D0111CC  03C0E825   OR SP, FP, ZERO
9D0111D0  8FBF0014   LW RA, 20(SP)
9D0111D4  8FBE0010   LW FP, 16(SP)
9D0111D8  27BD0018   ADDIU SP, SP, 24
9D0111DC  03E00008   JR RA
9D0111E0  00000000   NOP
9D0112C4  27BDFFF8   ADDIU SP, SP, -8
9D0112C8  AFBE0004   SW FP, 4(SP)
9D0112CC  03A0F025   OR FP, SP, ZERO
9D0112D0  AFC40008   SW A0, 8(FP)
9D0112D4  AFC5000C   SW A1, 12(FP)
9D0112D8  97828074   LHU V0, -32652(GP)
9D0112DC  7C021620   SEH V0, V0
9D0112E0  3042FFFF   ANDI V0, V0, -1
9D0112E4  2442FFFF   ADDIU V0, V0, -1
9D0112E8  3042FFFF   ANDI V0, V0, -1
9D0112EC  7C021620   SEH V0, V0
9D0112F0  A7828074   SH V0, -32652(GP)
9D0112F4  00000000   NOP
9D0112F8  03C0E825   OR SP, FP, ZERO
9D0112FC  8FBE0004   LW FP, 4(SP)
9D011300  27BD0008   ADDIU SP, SP, 8
9D011304  03E00008   JR RA
9D011308  00000000   NOP
9D01139C  27BDFFE8   ADDIU SP, SP, -24
9D0113A0  AFBF0014   SW RA, 20(SP)
9D0113A4  AFBE0010   SW FP, 16(SP)
9D0113A8  03A0F025   OR FP, SP, ZERO
9D0113AC  00801025   OR V0, A0, ZERO
9D0113B0  A3C20018   SB V0, 24(FP)
9D0113B4  24050001   ADDIU A1, ZERO, 1
9D0113B8  27C40018   ADDIU A0, FP, 24
9D0113BC  0F4035A7   JAL UART1_Write
9D0113C0  00000000   NOP
9D0113C4  00000000   NOP
9D0113C8  03C0E825   OR SP, FP, ZERO
9D0113CC  8FBF0014   LW RA, 20(SP)
9D0113D0  8FBE0010   LW FP, 16(SP)
9D0113D4  27BD0018   ADDIU SP, SP, 24
9D0113D8  03E00008   JR RA
9D0113DC  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/filters.c  ------------------
1:                   // Setup filters and update based on button presses.
2:                   
3:                   
4:                   #include "filters.h"
5:                   #include "main.h"     // definition of smp_type
6:                   #include "UserConfig.h"// frequencies, shifts, etc.
7:                   #include <math.h>
8:                   
9:                   
10:                  
11:                  
12:                  
13:                  // Globals 
14:                  // The Biquad Filters
15:                  biquad *MarkFilter[NumBpf]; // Audio BPF for mark (array of pointers for cascaded filters)
16:                  biquad *SpaceFilter[NumBpf]; // Audio BPF for space
17:                  biquad *MarkDataFilter;     // Mark LPF after absolute value "full wave rectification" 
18:                  biquad *SpaceDataFilter;
19:                  biquad *InputBpf;
20:                  double MarkFreq, SpaceFreq;
21:                  
22:                  void FiltersInit(void){
23:                    int n;
24:                    double ToneFilterBW, MarkQ, SpaceQ, MarkQn, SpaceQn, InputBpfBW, InputBpfFreq;
25:                    MarkFreq = UserConfig.NarrowShiftCenterFreq - (UserConfig.NarrowShiftHz/2); // Mark half shift below center
26:                    SpaceFreq = UserConfig.NarrowShiftCenterFreq + (UserConfig.NarrowShiftHz/2);  // Space half shift above center
27:                    InputBpfFreq=sqrt(MarkFreq*SpaceFreq);     // Input BPF center freq
28:                    InputBpfBW=2*UserConfig.NarrowShiftHz;
29:                    ToneFilterBW=UserConfig.ToneFilterBwBrMult*UserConfig.BaudRate;  // Tone filter wide enough for minimal attenuation of BR/2 sideband
30:                                                              // demod signal reaches full amplitude at middle of bit time.
31:                    MarkQ=MarkFreq/ToneFilterBW;              // Calculate Q for each filter. Could vary for wide shift
32:                    SpaceQ=SpaceFreq/ToneFilterBW;
33:                    MarkQn=MarkQ*sqrt(pow(2,1/(double)NumBpf)-1.0);   // Q of filter section with NumBpf cascaded sections
34:                    SpaceQn=SpaceQ*sqrt(pow(2,1/(double)NumBpf)-1.0);
35:                    for(n=0;n<NumBpf;n++){      // Initialize tone BPFs (array of pointers). 8000.0 is audio sample rate.
36:                      MarkFilter[n] = BiQuad_new(BPF, 0.0, MarkFreq, 8000.0, MarkQn);    
37:                      SpaceFilter[n] = BiQuad_new(BPF, 0.0, SpaceFreq, 8000.0, SpaceQn);
38:                    }  
39:                    MarkDataFilter=BiQuad_new(LPF, 0.0, UserConfig.BaudRate, 8000.0, 0.707 ); // After rectification data LPF. Cutoff same as baud rate
40:                    SpaceDataFilter=BiQuad_new(LPF, 0.0, UserConfig.BaudRate, 8000.0, 0.707 );
41:                    InputBpf=BiQuad_new(BPF,0.0,InputBpfFreq, 8000.0, InputBpfFreq/InputBpfBW);  // Calculate Q from freq/bw
42:                  }
43:                  
44:                  void PollShiftMarkHi(void){
45:                    // See if we need to reload filters due to a change in shift or MarkHi. Uses UserConfig for center frequency and shift
46:                    // to determine mark and space frequencies. Multiplies half shift by ShiftFlipNot before subtracting or adding so
47:                    // mark high flips frequencies. 
48:                    static int OldMarkHi=0, OldShift=0;
49:                    if((OldShift!=SHIFT_850_LED_Get()) || (OldMarkHi!=MARK_HI_LED_Get())){  // Shift LED changed
50:                      OldShift=SHIFT_850_LED_Get();     // Remember new value
51:                      OldMarkHi=MARK_HI_LED_Get(); 
52:                      UpdateDemodFilters();
53:                    }
54:                  }
55:                  
56:                  void UpdateDemodFilters(){
57:                  // Update all filters and Mark/Space frequencies used by DDS
58:                    double ToneFilterBW, MarkQ, SpaceQ, MarkQn, SpaceQn, InputBpfBW, InputBpfFreq, ShiftFlipNot;
59:                    int n;
60:                    if(1==MARK_HI_LED_Get()){
61:                      ShiftFlipNot=-1.0;        // Mark high, so flip shift
62:                    }else{
63:                      ShiftFlipNot=1.0;         // Mark high LED not on, so multiply shift by 1.0
64:                    }
65:                    if(SHIFT_850_LED_Get()){          // LED is on, use wide shift
66:                      MarkFreq = UserConfig.WideShiftCenterFreq - (ShiftFlipNot*(UserConfig.WideShiftHz/2)); // Mark half shift below center or above
67:                      SpaceFreq = UserConfig.WideShiftCenterFreq + (ShiftFlipNot*(UserConfig.WideShiftHz/2));  // Space half shift above center
68:                      InputBpfBW=2*UserConfig.WideShiftHz;
69:                    }else{                              // Changed to narrow shift
70:                      MarkFreq = UserConfig.NarrowShiftCenterFreq - (ShiftFlipNot*(UserConfig.NarrowShiftHz/2)); // Mark half shift below center
71:                      SpaceFreq = UserConfig.NarrowShiftCenterFreq + (ShiftFlipNot*(UserConfig.NarrowShiftHz/2));  // Space half shift above center
72:                      InputBpfBW=2*UserConfig.NarrowShiftHz;
73:                    } // end else narrow shift
74:                    ToneFilterBW=1.5*UserConfig.BaudRate;     // arrived at experimentally so fundamental is not attenauted so
75:                    MarkQ=MarkFreq/ToneFilterBW;              // Calculate Q for each filter. Could vary for wide shift
76:                    SpaceQ=SpaceFreq/ToneFilterBW;
77:                    MarkQn=MarkQ*sqrt(pow(2,1/(double)NumBpf)-1.0);   // Q of filter section with NumBpf cascaded sections
78:                    SpaceQn=SpaceQ*sqrt(pow(2,1/(double)NumBpf)-1.0);
79:                    for(n=0;n<NumBpf;n++){      // Initialize tone BPFs (array of pointers). 8000.0 is audio sample rate.
80:                      BiQuad_modify(MarkFilter[n], BPF, 0.0, MarkFreq, 8000.0, MarkQn);    
81:                      BiQuad_modify(SpaceFilter[n], BPF, 0.0, SpaceFreq, 8000.0, SpaceQn);
82:                    }// end for  
83:                    BiQuad_modify(MarkDataFilter, LPF, 0.0, UserConfig.BaudRate, 8000.0, 0.707 ); // After rectification data LPF. Cutoff same as baud rate
84:                    BiQuad_modify(SpaceDataFilter, LPF, 0.0, UserConfig.BaudRate, 8000.0, 0.707 );
85:                    InputBpfFreq=sqrt(MarkFreq*SpaceFreq);     // Input BPF center freq
86:                    BiQuad_modify(InputBpf, BPF,0.0,InputBpfFreq, 8000.0, InputBpfFreq/InputBpfBW);  // Calculate Q from freq/bw
87:                  }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D009998  27BDFF88   ADDIU SP, SP, -120
9D00999C  AFBF0074   SW RA, 116(SP)
9D0099A0  AFBE0070   SW FP, 112(SP)
9D0099A4  03A0F025   OR FP, SP, ZERO
9D0099A8  3C02BF86   LUI V0, -16506
9D0099AC  8C420120   LW V0, 288(V0)
9D0099B0  000211C2   SRL V0, V0, 7
9D0099B4  30430001   ANDI V1, V0, 1
9D0099B8  24020001   ADDIU V0, ZERO, 1
9D0099BC  14620006   BNE V1, V0, 0x9D0099D8
9D0099C0  00000000   NOP
9D0099C4  3C029D01   LUI V0, -25343
9D0099C8  D4401720   LDC1 F0, 5920(V0)
9D0099CC  F7C00030   SDC1 F0, 48(FP)
9D0099D0  10000004   BEQ ZERO, ZERO, 0x9D0099E4
9D0099D4  00000000   NOP
9D0099D8  3C029D01   LUI V0, -25343
9D0099DC  D4401728   LDC1 F0, 5928(V0)
9D0099E0  F7C00030   SDC1 F0, 48(FP)
9D0099E4  3C02BF86   LUI V0, -16506
9D0099E8  8C420120   LW V0, 288(V0)
9D0099EC  00021342   SRL V0, V0, 13
9D0099F0  30420001   ANDI V0, V0, 1
9D0099F4  10400022   BEQ V0, ZERO, 0x9D009A80
9D0099F8  00000000   NOP
9D0099FC  3C028000   LUI V0, -32768
9D009A00  24420230   ADDIU V0, V0, 560
9D009A04  D4410010   LDC1 F1, 16(V0)
9D009A08  3C028000   LUI V0, -32768
9D009A0C  24420230   ADDIU V0, V0, 560
9D009A10  D4420018   LDC1 F2, 24(V0)
9D009A14  3C029D01   LUI V0, -25343
9D009A18  D4401700   LDC1 F0, 5888(V0)
9D009A1C  46201083   DIV.D F2, F2, F0
9D009A20  D7C00030   LDC1 F0, 48(FP)
9D009A24  46201002   MUL.D F0, F2, F0
9D009A28  46200801   SUB.D F0, F1, F0
9D009A2C  F7808180   SDC1 F0, -32384(GP)
9D009A30  3C028000   LUI V0, -32768
9D009A34  24420230   ADDIU V0, V0, 560
9D009A38  D4410010   LDC1 F1, 16(V0)
9D009A3C  3C028000   LUI V0, -32768
9D009A40  24420230   ADDIU V0, V0, 560
9D009A44  D4420018   LDC1 F2, 24(V0)
9D009A48  3C029D01   LUI V0, -25343
9D009A4C  D4401700   LDC1 F0, 5888(V0)
9D009A50  46201083   DIV.D F2, F2, F0
9D009A54  D7C00030   LDC1 F0, 48(FP)
9D009A58  46201002   MUL.D F0, F2, F0
9D009A5C  46200800   ADD.D F0, F1, F0
9D009A60  F7808168   SDC1 F0, -32408(GP)
9D009A64  3C028000   LUI V0, -32768
9D009A68  24420230   ADDIU V0, V0, 560
9D009A6C  D4400018   LDC1 F0, 24(V0)
9D009A70  46200000   ADD.D F0, F0, F0
9D009A74  F7C00028   SDC1 F0, 40(FP)
9D009A78  1000001E   BEQ ZERO, ZERO, 0x9D009AF4
9D009A7C  00000000   NOP
9D009A80  3C028000   LUI V0, -32768
9D009A84  D4410230   LDC1 F1, 560(V0)
9D009A88  3C028000   LUI V0, -32768
9D009A8C  24420230   ADDIU V0, V0, 560
9D009A90  D4420008   LDC1 F2, 8(V0)
9D009A94  3C029D01   LUI V0, -25343
9D009A98  D4401700   LDC1 F0, 5888(V0)
9D009A9C  46201083   DIV.D F2, F2, F0
9D009AA0  D7C00030   LDC1 F0, 48(FP)
9D009AA4  46201002   MUL.D F0, F2, F0
9D009AA8  46200801   SUB.D F0, F1, F0
9D009AAC  F7808180   SDC1 F0, -32384(GP)
9D009AB0  3C028000   LUI V0, -32768
9D009AB4  D4410230   LDC1 F1, 560(V0)
9D009AB8  3C028000   LUI V0, -32768
9D009ABC  24420230   ADDIU V0, V0, 560
9D009AC0  D4420008   LDC1 F2, 8(V0)
9D009AC4  3C029D01   LUI V0, -25343
9D009AC8  D4401700   LDC1 F0, 5888(V0)
9D009ACC  46201083   DIV.D F2, F2, F0
9D009AD0  D7C00030   LDC1 F0, 48(FP)
9D009AD4  46201002   MUL.D F0, F2, F0
9D009AD8  46200800   ADD.D F0, F1, F0
9D009ADC  F7808168   SDC1 F0, -32408(GP)
9D009AE0  3C028000   LUI V0, -32768
9D009AE4  24420230   ADDIU V0, V0, 560
9D009AE8  D4400008   LDC1 F0, 8(V0)
9D009AEC  46200000   ADD.D F0, F0, F0
9D009AF0  F7C00028   SDC1 F0, 40(FP)
9D009AF4  3C028000   LUI V0, -32768
9D009AF8  24420230   ADDIU V0, V0, 560
9D009AFC  D4410020   LDC1 F1, 32(V0)
9D009B00  3C029D01   LUI V0, -25343
9D009B04  D4401730   LDC1 F0, 5936(V0)
9D009B08  46200802   MUL.D F0, F1, F0
9D009B0C  F7C00040   SDC1 F0, 64(FP)
9D009B10  D7818180   LDC1 F1, -32384(GP)
9D009B14  D7C00040   LDC1 F0, 64(FP)
9D009B18  46200803   DIV.D F0, F1, F0
9D009B1C  F7C00048   SDC1 F0, 72(FP)
9D009B20  D7818168   LDC1 F1, -32408(GP)
9D009B24  D7C00040   LDC1 F0, 64(FP)
9D009B28  46200803   DIV.D F0, F1, F0
9D009B2C  F7C00050   SDC1 F0, 80(FP)
9D009B30  D7C10048   LDC1 F1, 72(FP)
9D009B34  3C029D01   LUI V0, -25343
9D009B38  D4401708   LDC1 F0, 5896(V0)
9D009B3C  46200802   MUL.D F0, F1, F0
9D009B40  F7C00058   SDC1 F0, 88(FP)
9D009B44  D7C10050   LDC1 F1, 80(FP)
9D009B48  3C029D01   LUI V0, -25343
9D009B4C  D4401708   LDC1 F0, 5896(V0)
9D009B50  46200802   MUL.D F0, F1, F0
9D009B54  F7C00060   SDC1 F0, 96(FP)
9D009B58  AFC00038   SW ZERO, 56(FP)
9D009B5C  10000028   BEQ ZERO, ZERO, 0x9D009C00
9D009B60  00000000   NOP
9D009B64  8FC20038   LW V0, 56(FP)
9D009B68  00021880   SLL V1, V0, 2
9D009B6C  27828188   ADDIU V0, GP, -32376
9D009B70  00621021   ADDU V0, V1, V0
9D009B74  8C430000   LW V1, 0(V0)
9D009B78  D7808180   LDC1 F0, -32384(GP)
9D009B7C  D7C10058   LDC1 F1, 88(FP)
9D009B80  F7A10020   SDC1 F1, 32(SP)
9D009B84  3C029D01   LUI V0, -25343
9D009B88  D4411710   LDC1 F1, 5904(V0)
9D009B8C  F7A10018   SDC1 F1, 24(SP)
9D009B90  F7A00010   SDC1 F0, 16(SP)
9D009B94  00003025   OR A2, ZERO, ZERO
9D009B98  00003825   OR A3, ZERO, ZERO
9D009B9C  24050002   ADDIU A1, ZERO, 2
9D009BA0  00602025   OR A0, V1, ZERO
9D009BA4  0F401999   JAL BiQuad_modify
9D009BA8  00000000   NOP
9D009BAC  8FC20038   LW V0, 56(FP)
9D009BB0  00021880   SLL V1, V0, 2
9D009BB4  27828174   ADDIU V0, GP, -32396
9D009BB8  00621021   ADDU V0, V1, V0
9D009BBC  8C430000   LW V1, 0(V0)
9D009BC0  D7808168   LDC1 F0, -32408(GP)
9D009BC4  D7C10060   LDC1 F1, 96(FP)
9D009BC8  F7A10020   SDC1 F1, 32(SP)
9D009BCC  3C029D01   LUI V0, -25343
9D009BD0  D4411710   LDC1 F1, 5904(V0)
9D009BD4  F7A10018   SDC1 F1, 24(SP)
9D009BD8  F7A00010   SDC1 F0, 16(SP)
9D009BDC  00003025   OR A2, ZERO, ZERO
9D009BE0  00003825   OR A3, ZERO, ZERO
9D009BE4  24050002   ADDIU A1, ZERO, 2
9D009BE8  00602025   OR A0, V1, ZERO
9D009BEC  0F401999   JAL BiQuad_modify
9D009BF0  00000000   NOP
9D009BF4  8FC20038   LW V0, 56(FP)
9D009BF8  24420001   ADDIU V0, V0, 1
9D009BFC  AFC20038   SW V0, 56(FP)
9D009C00  8FC20038   LW V0, 56(FP)
9D009C04  28420002   SLTI V0, V0, 2
9D009C08  1440FFD6   BNE V0, ZERO, 0x9D009B64
9D009C0C  00000000   NOP
9D009C10  8F838170   LW V1, -32400(GP)
9D009C14  3C028000   LUI V0, -32768
9D009C18  24420230   ADDIU V0, V0, 560
9D009C1C  D4400020   LDC1 F0, 32(V0)
9D009C20  3C029D01   LUI V0, -25343
9D009C24  D4411718   LDC1 F1, 5912(V0)
9D009C28  F7A10020   SDC1 F1, 32(SP)
9D009C2C  3C029D01   LUI V0, -25343
9D009C30  D4411710   LDC1 F1, 5904(V0)
9D009C34  F7A10018   SDC1 F1, 24(SP)
9D009C38  F7A00010   SDC1 F0, 16(SP)
9D009C3C  00003025   OR A2, ZERO, ZERO
9D009C40  00003825   OR A3, ZERO, ZERO
9D009C44  00002825   OR A1, ZERO, ZERO
9D009C48  00602025   OR A0, V1, ZERO
9D009C4C  0F401999   JAL BiQuad_modify
9D009C50  00000000   NOP
9D009C54  8F838190   LW V1, -32368(GP)
9D009C58  3C028000   LUI V0, -32768
9D009C5C  24420230   ADDIU V0, V0, 560
9D009C60  D4400020   LDC1 F0, 32(V0)
9D009C64  3C029D01   LUI V0, -25343
9D009C68  D4411718   LDC1 F1, 5912(V0)
9D009C6C  F7A10020   SDC1 F1, 32(SP)
9D009C70  3C029D01   LUI V0, -25343
9D009C74  D4411710   LDC1 F1, 5904(V0)
9D009C78  F7A10018   SDC1 F1, 24(SP)
9D009C7C  F7A00010   SDC1 F0, 16(SP)
9D009C80  00003025   OR A2, ZERO, ZERO
9D009C84  00003825   OR A3, ZERO, ZERO
9D009C88  00002825   OR A1, ZERO, ZERO
9D009C8C  00602025   OR A0, V1, ZERO
9D009C90  0F401999   JAL BiQuad_modify
9D009C94  00000000   NOP
9D009C98  D7818180   LDC1 F1, -32384(GP)
9D009C9C  D7808168   LDC1 F0, -32408(GP)
9D009CA0  46200802   MUL.D F0, F1, F0
9D009CA4  46200306   MOV.D F12, F0
9D009CA8  0F402B36   JAL sqrt
9D009CAC  00000000   NOP
9D009CB0  F7C00068   SDC1 F0, 104(FP)
9D009CB4  8F838194   LW V1, -32364(GP)
9D009CB8  D7C10068   LDC1 F1, 104(FP)
9D009CBC  D7C00028   LDC1 F0, 40(FP)
9D009CC0  46200803   DIV.D F0, F1, F0
9D009CC4  F7A00020   SDC1 F0, 32(SP)
9D009CC8  3C029D01   LUI V0, -25343
9D009CCC  D4401710   LDC1 F0, 5904(V0)
9D009CD0  F7A00018   SDC1 F0, 24(SP)
9D009CD4  D7C00068   LDC1 F0, 104(FP)
9D009CD8  F7A00010   SDC1 F0, 16(SP)
9D009CDC  00003025   OR A2, ZERO, ZERO
9D009CE0  00003825   OR A3, ZERO, ZERO
9D009CE4  24050002   ADDIU A1, ZERO, 2
9D009CE8  00602025   OR A0, V1, ZERO
9D009CEC  0F401999   JAL BiQuad_modify
9D009CF0  00000000   NOP
9D009CF4  00000000   NOP
9D009CF8  03C0E825   OR SP, FP, ZERO
9D009CFC  8FBF0074   LW RA, 116(SP)
9D009D00  8FBE0070   LW FP, 112(SP)
9D009D04  27BD0078   ADDIU SP, SP, 120
9D009D08  03E00008   JR RA
9D009D0C  00000000   NOP
9D00AA50  27BDFF90   ADDIU SP, SP, -112
9D00AA54  AFBF006C   SW RA, 108(SP)
9D00AA58  AFBE0068   SW FP, 104(SP)
9D00AA5C  03A0F025   OR FP, SP, ZERO
9D00AA60  3C028000   LUI V0, -32768
9D00AA64  D4410230   LDC1 F1, 560(V0)
9D00AA68  3C028000   LUI V0, -32768
9D00AA6C  24420230   ADDIU V0, V0, 560
9D00AA70  D4420008   LDC1 F2, 8(V0)
9D00AA74  3C029D01   LUI V0, -25343
9D00AA78  D4401700   LDC1 F0, 5888(V0)
9D00AA7C  46201003   DIV.D F0, F2, F0
9D00AA80  46200801   SUB.D F0, F1, F0
9D00AA84  F7808180   SDC1 F0, -32384(GP)
9D00AA88  3C028000   LUI V0, -32768
9D00AA8C  D4410230   LDC1 F1, 560(V0)
9D00AA90  3C028000   LUI V0, -32768
9D00AA94  24420230   ADDIU V0, V0, 560
9D00AA98  D4420008   LDC1 F2, 8(V0)
9D00AA9C  3C029D01   LUI V0, -25343
9D00AAA0  D4401700   LDC1 F0, 5888(V0)
9D00AAA4  46201003   DIV.D F0, F2, F0
9D00AAA8  46200800   ADD.D F0, F1, F0
9D00AAAC  F7808168   SDC1 F0, -32408(GP)
9D00AAB0  D7818180   LDC1 F1, -32384(GP)
9D00AAB4  D7808168   LDC1 F0, -32408(GP)
9D00AAB8  46200802   MUL.D F0, F1, F0
9D00AABC  46200306   MOV.D F12, F0
9D00AAC0  0F402B36   JAL sqrt
9D00AAC4  00000000   NOP
9D00AAC8  F7C00030   SDC1 F0, 48(FP)
9D00AACC  3C028000   LUI V0, -32768
9D00AAD0  24420230   ADDIU V0, V0, 560
9D00AAD4  D4400008   LDC1 F0, 8(V0)
9D00AAD8  46200000   ADD.D F0, F0, F0
9D00AADC  F7C00038   SDC1 F0, 56(FP)
9D00AAE0  3C028000   LUI V0, -32768
9D00AAE4  24420230   ADDIU V0, V0, 560
9D00AAE8  D4410028   LDC1 F1, 40(V0)
9D00AAEC  3C028000   LUI V0, -32768
9D00AAF0  24420230   ADDIU V0, V0, 560
9D00AAF4  D4400020   LDC1 F0, 32(V0)
9D00AAF8  46200802   MUL.D F0, F1, F0
9D00AAFC  F7C00040   SDC1 F0, 64(FP)
9D00AB00  D7818180   LDC1 F1, -32384(GP)
9D00AB04  D7C00040   LDC1 F0, 64(FP)
9D00AB08  46200803   DIV.D F0, F1, F0
9D00AB0C  F7C00048   SDC1 F0, 72(FP)
9D00AB10  D7818168   LDC1 F1, -32408(GP)
9D00AB14  D7C00040   LDC1 F0, 64(FP)
9D00AB18  46200803   DIV.D F0, F1, F0
9D00AB1C  F7C00050   SDC1 F0, 80(FP)
9D00AB20  D7C10048   LDC1 F1, 72(FP)
9D00AB24  3C029D01   LUI V0, -25343
9D00AB28  D4401708   LDC1 F0, 5896(V0)
9D00AB2C  46200802   MUL.D F0, F1, F0
9D00AB30  F7C00058   SDC1 F0, 88(FP)
9D00AB34  D7C10050   LDC1 F1, 80(FP)
9D00AB38  3C029D01   LUI V0, -25343
9D00AB3C  D4401708   LDC1 F0, 5896(V0)
9D00AB40  46200802   MUL.D F0, F1, F0
9D00AB44  F7C00060   SDC1 F0, 96(FP)
9D00AB48  AFC00028   SW ZERO, 40(FP)
9D00AB4C  10000028   BEQ ZERO, ZERO, 0x9D00ABF0
9D00AB50  00000000   NOP
9D00AB54  D7808180   LDC1 F0, -32384(GP)
9D00AB58  D7C10058   LDC1 F1, 88(FP)
9D00AB5C  F7A10020   SDC1 F1, 32(SP)
9D00AB60  3C029D01   LUI V0, -25343
9D00AB64  D4411710   LDC1 F1, 5904(V0)
9D00AB68  F7A10018   SDC1 F1, 24(SP)
9D00AB6C  F7A00010   SDC1 F0, 16(SP)
9D00AB70  00003025   OR A2, ZERO, ZERO
9D00AB74  00003825   OR A3, ZERO, ZERO
9D00AB78  24040002   ADDIU A0, ZERO, 2
9D00AB7C  0F403A3C   JAL BiQuad_new
9D00AB80  00000000   NOP
9D00AB84  00402025   OR A0, V0, ZERO
9D00AB88  8FC20028   LW V0, 40(FP)
9D00AB8C  00021880   SLL V1, V0, 2
9D00AB90  27828188   ADDIU V0, GP, -32376
9D00AB94  00621021   ADDU V0, V1, V0
9D00AB98  AC440000   SW A0, 0(V0)
9D00AB9C  D7808168   LDC1 F0, -32408(GP)
9D00ABA0  D7C10060   LDC1 F1, 96(FP)
9D00ABA4  F7A10020   SDC1 F1, 32(SP)
9D00ABA8  3C029D01   LUI V0, -25343
9D00ABAC  D4411710   LDC1 F1, 5904(V0)
9D00ABB0  F7A10018   SDC1 F1, 24(SP)
9D00ABB4  F7A00010   SDC1 F0, 16(SP)
9D00ABB8  00003025   OR A2, ZERO, ZERO
9D00ABBC  00003825   OR A3, ZERO, ZERO
9D00ABC0  24040002   ADDIU A0, ZERO, 2
9D00ABC4  0F403A3C   JAL BiQuad_new
9D00ABC8  00000000   NOP
9D00ABCC  00402025   OR A0, V0, ZERO
9D00ABD0  8FC20028   LW V0, 40(FP)
9D00ABD4  00021880   SLL V1, V0, 2
9D00ABD8  27828174   ADDIU V0, GP, -32396
9D00ABDC  00621021   ADDU V0, V1, V0
9D00ABE0  AC440000   SW A0, 0(V0)
9D00ABE4  8FC20028   LW V0, 40(FP)
9D00ABE8  24420001   ADDIU V0, V0, 1
9D00ABEC  AFC20028   SW V0, 40(FP)
9D00ABF0  8FC20028   LW V0, 40(FP)
9D00ABF4  28420002   SLTI V0, V0, 2
9D00ABF8  1440FFD6   BNE V0, ZERO, 0x9D00AB54
9D00ABFC  00000000   NOP
9D00AC00  3C028000   LUI V0, -32768
9D00AC04  24420230   ADDIU V0, V0, 560
9D00AC08  D4400020   LDC1 F0, 32(V0)
9D00AC0C  3C029D01   LUI V0, -25343
9D00AC10  D4411718   LDC1 F1, 5912(V0)
9D00AC14  F7A10020   SDC1 F1, 32(SP)
9D00AC18  3C029D01   LUI V0, -25343
9D00AC1C  D4411710   LDC1 F1, 5904(V0)
9D00AC20  F7A10018   SDC1 F1, 24(SP)
9D00AC24  F7A00010   SDC1 F0, 16(SP)
9D00AC28  00003025   OR A2, ZERO, ZERO
9D00AC2C  00003825   OR A3, ZERO, ZERO
9D00AC30  00002025   OR A0, ZERO, ZERO
9D00AC34  0F403A3C   JAL BiQuad_new
9D00AC38  00000000   NOP
9D00AC3C  AF828170   SW V0, -32400(GP)
9D00AC40  3C028000   LUI V0, -32768
9D00AC44  24420230   ADDIU V0, V0, 560
9D00AC48  D4400020   LDC1 F0, 32(V0)
9D00AC4C  3C029D01   LUI V0, -25343
9D00AC50  D4411718   LDC1 F1, 5912(V0)
9D00AC54  F7A10020   SDC1 F1, 32(SP)
9D00AC58  3C029D01   LUI V0, -25343
9D00AC5C  D4411710   LDC1 F1, 5904(V0)
9D00AC60  F7A10018   SDC1 F1, 24(SP)
9D00AC64  F7A00010   SDC1 F0, 16(SP)
9D00AC68  00003025   OR A2, ZERO, ZERO
9D00AC6C  00003825   OR A3, ZERO, ZERO
9D00AC70  00002025   OR A0, ZERO, ZERO
9D00AC74  0F403A3C   JAL BiQuad_new
9D00AC78  00000000   NOP
9D00AC7C  AF828190   SW V0, -32368(GP)
9D00AC80  D7C10030   LDC1 F1, 48(FP)
9D00AC84  D7C00038   LDC1 F0, 56(FP)
9D00AC88  46200803   DIV.D F0, F1, F0
9D00AC8C  F7A00020   SDC1 F0, 32(SP)
9D00AC90  3C029D01   LUI V0, -25343
9D00AC94  D4401710   LDC1 F0, 5904(V0)
9D00AC98  F7A00018   SDC1 F0, 24(SP)
9D00AC9C  D7C00030   LDC1 F0, 48(FP)
9D00ACA0  F7A00010   SDC1 F0, 16(SP)
9D00ACA4  00003025   OR A2, ZERO, ZERO
9D00ACA8  00003825   OR A3, ZERO, ZERO
9D00ACAC  24040002   ADDIU A0, ZERO, 2
9D00ACB0  0F403A3C   JAL BiQuad_new
9D00ACB4  00000000   NOP
9D00ACB8  AF828194   SW V0, -32364(GP)
9D00ACBC  00000000   NOP
9D00ACC0  03C0E825   OR SP, FP, ZERO
9D00ACC4  8FBF006C   LW RA, 108(SP)
9D00ACC8  8FBE0068   LW FP, 104(SP)
9D00ACCC  27BD0070   ADDIU SP, SP, 112
9D00ACD0  03E00008   JR RA
9D00ACD4  00000000   NOP
9D00FDDC  27BDFFE8   ADDIU SP, SP, -24
9D00FDE0  AFBF0014   SW RA, 20(SP)
9D00FDE4  AFBE0010   SW FP, 16(SP)
9D00FDE8  03A0F025   OR FP, SP, ZERO
9D00FDEC  3C02BF86   LUI V0, -16506
9D00FDF0  8C420120   LW V0, 288(V0)
9D00FDF4  00021342   SRL V0, V0, 13
9D00FDF8  30420001   ANDI V0, V0, 1
9D00FDFC  8F8380F0   LW V1, -32528(GP)
9D00FE00  14430008   BNE V0, V1, 0x9D00FE24
9D00FE04  00000000   NOP
9D00FE08  3C02BF86   LUI V0, -16506
9D00FE0C  8C420120   LW V0, 288(V0)
9D00FE10  000211C2   SRL V0, V0, 7
9D00FE14  30420001   ANDI V0, V0, 1
9D00FE18  8F8380F4   LW V1, -32524(GP)
9D00FE1C  1043000D   BEQ V0, V1, 0x9D00FE54
9D00FE20  00000000   NOP
9D00FE24  3C02BF86   LUI V0, -16506
9D00FE28  8C420120   LW V0, 288(V0)
9D00FE2C  00021342   SRL V0, V0, 13
9D00FE30  30420001   ANDI V0, V0, 1
9D00FE34  AF8280F0   SW V0, -32528(GP)
9D00FE38  3C02BF86   LUI V0, -16506
9D00FE3C  8C420120   LW V0, 288(V0)
9D00FE40  000211C2   SRL V0, V0, 7
9D00FE44  30420001   ANDI V0, V0, 1
9D00FE48  AF8280F4   SW V0, -32524(GP)
9D00FE4C  0F402666   JAL UpdateDemodFilters
9D00FE50  00000000   NOP
9D00FE54  00000000   NOP
9D00FE58  03C0E825   OR SP, FP, ZERO
9D00FE5C  8FBF0014   LW RA, 20(SP)
9D00FE60  8FBE0010   LW FP, 16(SP)
9D00FE64  27BD0018   ADDIU SP, SP, 24
9D00FE68  03E00008   JR RA
9D00FE6C  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/fifo16.c  -------------------
1:                   // fifo16.c
2:                   
3:                   // Create and interface to a 16 bit wide fifo. NOT INTERRUPT SAFE!
4:                   
5:                   // fifo16.c 
6:                   
7:                   // Simple circular buffer fifo
8:                   
9:                   #include "fifo16.h"
10:                  
11:                  
12:                  
13:                  Fifo16_t *Fifo16Create(uint32_t size){
14:                  // Create a FIFO of the specified size. Return a pointer to it.
15:                  Fifo16_t *pResult;
16:                    pResult=malloc((2*size)+20);    // fifo size plus space for size, indices, counters
17:                    if(pResult){                // it was created ok
18:                      pResult->FifoSize=size;   // remember size
19:                      pResult->IndexIn=0;       // start at beginning
20:                      pResult->IndexOut=0;
21:                      pResult->BufFull=0;    // buf is empty
22:                      pResult->BufFree=size;
23:                    }
24:                    return(pResult);
25:                  }
26:                  
27:                  uint16_t Fifo16Put(Fifo16_t *fifo, uint16_t data){
28:                  	uint16_t result;
29:                  	// Put data in the specified fifo. Return 0 on success. Nonzero on error.
30:                  	if(fifo->BufFree){						// we have room
31:                  
32:                            fifo->buffer[fifo->IndexIn++]=data;     // save data 
33:                          fifo->IndexIn=fifo->IndexIn % fifo->FifoSize;
34:                  		fifo->BufFull++;						// add one to buffer contents
35:                  		fifo->BufFree--;						// and subtract one from how many are free
36:                  		result=0;											// exit error free
37:                  	}else{														// no room
38:                  	  result=1;
39:                      } 
40:                    	return(result);  
41:                  }
42:                  
43:                  uint16_t Fifo16Get(Fifo16_t *fifo){
44:                  	// Get a word from the specified fifo. Returns 0 if nothing available
45:                    uint16_t result;	
46:                    if(fifo->BufFull){
47:                      result=fifo->buffer[fifo->IndexOut++];	// return the character
48:                      fifo->IndexOut=fifo->IndexOut % fifo->FifoSize;
49:                      fifo->BufFull--;						// subtract one from contents
50:                  
51:                      fifo->BufFree++;							// add one to how many are free
52:                    }else{													// fifo is empty
53:                      result=0;   // give back nothing and change nothing
54:                    }
55:                    return(result);
56:                  }		    	  	   
57:                  
58:                  void Fifo16Clear(Fifo16_t *fifo){
59:                  // dump fifo contents
60:                    fifo->IndexIn=0;
61:                    fifo->IndexOut=0;
62:                    fifo->BufFull=0;
63:                    fifo->BufFree=fifo->FifoSize;
64:                  }  
65:                   
66:                  uint32_t Fifo16Full(Fifo16_t *fifo){
67:                  // How many words are in the fifo
68:                    return(fifo->BufFull);
69:                  }
70:                  
71:                  uint32_t Fifo16Free(Fifo16_t *fifo){
72:                  // How many words are available in the fifo
73:                    return(fifo->BufFree);
74:                  } 
75:                  
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
00000010  00000000   NOP
00000018  00000000   NOP
00000020  00000000   NOP
00000028  00000000   NOP
00000030  00000000   NOP
00000038  00000000   NOP
9D00ED1C  27BDFFF0   ADDIU SP, SP, -16
9D00ED20  AFBE000C   SW FP, 12(SP)
9D00ED24  03A0F025   OR FP, SP, ZERO
9D00ED28  AFC40010   SW A0, 16(FP)
9D00ED2C  00A01025   OR V0, A1, ZERO
9D00ED30  A7C20014   SH V0, 20(FP)
9D00ED34  8FC20010   LW V0, 16(FP)
9D00ED38  8C420010   LW V0, 16(V0)
9D00ED3C  10400023   BEQ V0, ZERO, 0x9D00EDCC
9D00ED40  00000000   NOP
9D00ED44  8FC20010   LW V0, 16(FP)
9D00ED48  8C420004   LW V0, 4(V0)
9D00ED4C  24440001   ADDIU A0, V0, 1
9D00ED50  8FC30010   LW V1, 16(FP)
9D00ED54  AC640004   SW A0, 4(V1)
9D00ED58  8FC30010   LW V1, 16(FP)
9D00ED5C  24420008   ADDIU V0, V0, 8
9D00ED60  00021040   SLL V0, V0, 1
9D00ED64  00621021   ADDU V0, V1, V0
9D00ED68  97C30014   LHU V1, 20(FP)
9D00ED6C  A4430004   SH V1, 4(V0)
9D00ED70  8FC20010   LW V0, 16(FP)
9D00ED74  8C430004   LW V1, 4(V0)
9D00ED78  8FC20010   LW V0, 16(FP)
9D00ED7C  8C420000   LW V0, 0(V0)
9D00ED80  0062001B   DIVU V1, V0
9D00ED84  004001F4   TEQ V0, ZERO
9D00ED88  00001010   MFHI V0
9D00ED8C  00401825   OR V1, V0, ZERO
9D00ED90  8FC20010   LW V0, 16(FP)
9D00ED94  AC430004   SW V1, 4(V0)
9D00ED98  8FC20010   LW V0, 16(FP)
9D00ED9C  8C42000C   LW V0, 12(V0)
9D00EDA0  24430001   ADDIU V1, V0, 1
9D00EDA4  8FC20010   LW V0, 16(FP)
9D00EDA8  AC43000C   SW V1, 12(V0)
9D00EDAC  8FC20010   LW V0, 16(FP)
9D00EDB0  8C420010   LW V0, 16(V0)
9D00EDB4  2443FFFF   ADDIU V1, V0, -1
9D00EDB8  8FC20010   LW V0, 16(FP)
9D00EDBC  AC430010   SW V1, 16(V0)
9D00EDC0  A7C00000   SH ZERO, 0(FP)
9D00EDC4  10000003   BEQ ZERO, ZERO, 0x9D00EDD4
9D00EDC8  00000000   NOP
9D00EDCC  24020001   ADDIU V0, ZERO, 1
9D00EDD0  A7C20000   SH V0, 0(FP)
9D00EDD4  97C20000   LHU V0, 0(FP)
9D00EDD8  03C0E825   OR SP, FP, ZERO
9D00EDDC  8FBE000C   LW FP, 12(SP)
9D00EDE0  27BD0010   ADDIU SP, SP, 16
9D00EDE4  03E00008   JR RA
9D00EDE8  00000000   NOP
9D00F290  27BDFFF0   ADDIU SP, SP, -16
9D00F294  AFBE000C   SW FP, 12(SP)
9D00F298  03A0F025   OR FP, SP, ZERO
9D00F29C  AFC40010   SW A0, 16(FP)
9D00F2A0  8FC20010   LW V0, 16(FP)
9D00F2A4  8C42000C   LW V0, 12(V0)
9D00F2A8  10400022   BEQ V0, ZERO, 0x9D00F334
9D00F2AC  00000000   NOP
9D00F2B0  8FC20010   LW V0, 16(FP)
9D00F2B4  8C420008   LW V0, 8(V0)
9D00F2B8  24440001   ADDIU A0, V0, 1
9D00F2BC  8FC30010   LW V1, 16(FP)
9D00F2C0  AC640008   SW A0, 8(V1)
9D00F2C4  8FC30010   LW V1, 16(FP)
9D00F2C8  24420008   ADDIU V0, V0, 8
9D00F2CC  00021040   SLL V0, V0, 1
9D00F2D0  00621021   ADDU V0, V1, V0
9D00F2D4  94420004   LHU V0, 4(V0)
9D00F2D8  A7C20000   SH V0, 0(FP)
9D00F2DC  8FC20010   LW V0, 16(FP)
9D00F2E0  8C430008   LW V1, 8(V0)
9D00F2E4  8FC20010   LW V0, 16(FP)
9D00F2E8  8C420000   LW V0, 0(V0)
9D00F2EC  0062001B   DIVU V1, V0
9D00F2F0  004001F4   TEQ V0, ZERO
9D00F2F4  00001010   MFHI V0
9D00F2F8  00401825   OR V1, V0, ZERO
9D00F2FC  8FC20010   LW V0, 16(FP)
9D00F300  AC430008   SW V1, 8(V0)
9D00F304  8FC20010   LW V0, 16(FP)
9D00F308  8C42000C   LW V0, 12(V0)
9D00F30C  2443FFFF   ADDIU V1, V0, -1
9D00F310  8FC20010   LW V0, 16(FP)
9D00F314  AC43000C   SW V1, 12(V0)
9D00F318  8FC20010   LW V0, 16(FP)
9D00F31C  8C420010   LW V0, 16(V0)
9D00F320  24430001   ADDIU V1, V0, 1
9D00F324  8FC20010   LW V0, 16(FP)
9D00F328  AC430010   SW V1, 16(V0)
9D00F32C  10000002   BEQ ZERO, ZERO, 0x9D00F338
9D00F330  00000000   NOP
9D00F334  A7C00000   SH ZERO, 0(FP)
9D00F338  97C20000   LHU V0, 0(FP)
9D00F33C  03C0E825   OR SP, FP, ZERO
9D00F340  8FBE000C   LW FP, 12(SP)
9D00F344  27BD0010   ADDIU SP, SP, 16
9D00F348  03E00008   JR RA
9D00F34C  00000000   NOP
9D0103F8  27BDFFE0   ADDIU SP, SP, -32
9D0103FC  AFBF001C   SW RA, 28(SP)
9D010400  AFBE0018   SW FP, 24(SP)
9D010404  03A0F025   OR FP, SP, ZERO
9D010408  AFC40020   SW A0, 32(FP)
9D01040C  8FC20020   LW V0, 32(FP)
9D010410  2442000A   ADDIU V0, V0, 10
9D010414  00021040   SLL V0, V0, 1
9D010418  00402025   OR A0, V0, ZERO
9D01041C  0F4028A3   JAL malloc
9D010420  00000000   NOP
9D010424  AFC20010   SW V0, 16(FP)
9D010428  8FC20010   LW V0, 16(FP)
9D01042C  1040000D   BEQ V0, ZERO, 0x9D010464
9D010430  00000000   NOP
9D010434  8FC20010   LW V0, 16(FP)
9D010438  8FC30020   LW V1, 32(FP)
9D01043C  AC430000   SW V1, 0(V0)
9D010440  8FC20010   LW V0, 16(FP)
9D010444  AC400004   SW ZERO, 4(V0)
9D010448  8FC20010   LW V0, 16(FP)
9D01044C  AC400008   SW ZERO, 8(V0)
9D010450  8FC20010   LW V0, 16(FP)
9D010454  AC40000C   SW ZERO, 12(V0)
9D010458  8FC20010   LW V0, 16(FP)
9D01045C  8FC30020   LW V1, 32(FP)
9D010460  AC430010   SW V1, 16(V0)
9D010464  8FC20010   LW V0, 16(FP)
9D010468  03C0E825   OR SP, FP, ZERO
9D01046C  8FBF001C   LW RA, 28(SP)
9D010470  8FBE0018   LW FP, 24(SP)
9D010474  27BD0020   ADDIU SP, SP, 32
9D010478  03E00008   JR RA
9D01047C  00000000   NOP
9D011958  27BDFFF8   ADDIU SP, SP, -8
9D01195C  AFBE0004   SW FP, 4(SP)
9D011960  03A0F025   OR FP, SP, ZERO
9D011964  AFC40008   SW A0, 8(FP)
9D011968  8FC20008   LW V0, 8(FP)
9D01196C  8C42000C   LW V0, 12(V0)
9D011970  03C0E825   OR SP, FP, ZERO
9D011974  8FBE0004   LW FP, 4(SP)
9D011978  27BD0008   ADDIU SP, SP, 8
9D01197C  03E00008   JR RA
9D011980  00000000   NOP
9D011984  27BDFFF8   ADDIU SP, SP, -8
9D011988  AFBE0004   SW FP, 4(SP)
9D01198C  03A0F025   OR FP, SP, ZERO
9D011990  AFC40008   SW A0, 8(FP)
9D011994  8FC20008   LW V0, 8(FP)
9D011998  8C420010   LW V0, 16(V0)
9D01199C  03C0E825   OR SP, FP, ZERO
9D0119A0  8FBE0004   LW FP, 4(SP)
9D0119A4  27BD0008   ADDIU SP, SP, 8
9D0119A8  03E00008   JR RA
9D0119AC  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/extflash.c  -----------------
1:                   // ExtFlash.c
2:                   #include <stdint.h>
3:                   #include "definitions.h"                // SYS function prototypes
4:                   #include "main.h"             // PrintString for error messages
5:                   #include "ExtFlash.h"
6:                   
7:                   #if 0
8:                   void PageProgramExtFlash(uint32_t addr, uint32_t NumBytes, uint8_t *pdata); // write a number of bytes to external flash.  
9:                   uint8_t ReadExtFlash(uint32_t addr);	  // read the external flash. 
10:                  uint8_t ReadExtFlashStatus(void);   // Write data to the external flash status register
11:                  void WriteExtFlashStatus(uint8_t data); // Write data to the external flash status register. 
12:                  uint32_t ReadExtFlashID(void);          // Read the ID of the external flash. For M25P16, should read 0x20201510.
13:                  void SectorEraseExtFlash(uint32_t addr);// Erase the sector containing addr. A sector is 256 pages, and a page is 256 bytes. We can program a page at a time, but erase a sector at a time
14:                  void ExtFlashCs(uint8_t cs);// Set or clear the chip select line. We're using a function call so it's a little slower because the minimum
15:                  // CS disable time is 500ns.
16:                  void InitializeSpi(void);   // Initialize SPI for the external flash 
17:                  void ReadExtFlashArray(uint32_t addr, uint8_t *pdata, uint32_t NumBytes); // Read NumBytes starting at addr and put them in ram at address pointed to by pdata
18:                  uint8_t SwSpiExchange(uint8_t data);  // send and get spi from bitmap flash
19:                  uint32_t StreamProgramExtFlash(uint32_t addr, uint32_t NumBytes, uint8_t *pdata);// Program a stream of data to external flash. Breaks in to 256 byte pages and 65kByte sectors. Returns the next available address in external flash
20:                  
21:                  #endif
22:                  
23:                  uint8_t Spi3Exchange(uint8_t data){
24:                    // Pass data to SPI3 and return result
25:                    while(SPI3_IsTransmitterBusy());     // Loop 'til ready
26:                    SPI3BUF=(data);                     // Pass om data
27:                    while(SPI3_IsTransmitterBusy());     // Loop 'til transmission complete
28:                    return(SPI3BUF);                    // Return what was shifted in as we shifted data out
29:                  }
30:                  
31:                  
32:                  void WaitForExtFlashReady(void){
33:                  uint32_t LoopCount=100000;  
34:                    while(ReadExtFlashStatus() & 0x01){ // loop here until write completes
35:                      if(0==(LoopCount--)){
36:                        PrintString("WaitForExtFlashReady timed out\r\n");
37:                        break;      // get out of while loop
38:                      }
39:                    }
40:                  }
41:                  
42:                  
43:                  
44:                  
45:                  void SectorEraseExtFlash(uint32_t addr){
46:                  // Erase the sector containing addr. A sector is 4 kB. 
47:                  // We can program a page (256 bytes) at a time, but erase a sector at a time. 
48:                    union{
49:                      uint32_t u32;
50:                      uint8_t u8[4];
51:                    }LocalAddr;
52:                    int n;
53:                    WaitForExtFlashReady();     // wait here while write in progress
54:                    WriteExtFlashStatus(0b10);  // enable write and remove any block protection
55:                    WaitForExtFlashReady();     // wait here while write in progress
56:                    LocalAddr.u32=addr;         // local copy of address
57:                    FLASH_CSn_Clear();          // Chip select low
58:                    Spi3Exchange(0x06);         // enable write
59:                    FLASH_CSn_Set();            // chip select high
60:                    FLASH_CSn_Clear();          // Chip select low
61:                    Spi3Exchange(0x20);         // 4 kB sector erase instruction
62:                    for(n=1;n<4;n++){           // send the address (24 bits) big endian
63:                      Spi3Exchange(LocalAddr.u8[3-n]);  // send byte. Byte sent as index 2, 1, 0 or msb to lsb
64:                    }
65:                    FLASH_CSn_Set();            // chip select high
66:                  }
67:                  
68:                  
69:                  
70:                  void BulkEraseExtFlash(void){
71:                  // This erases the whole chip.
72:                    WaitForExtFlashReady();     // wait here while write in progress
73:                    WriteExtFlashStatus(0b10);  // enable write and remove any block protection
74:                    WaitForExtFlashReady();     // wait here while write in progress
75:                    FLASH_CSn_Clear();          // Chip select low
76:                    Spi3Exchange(0x06);       // enable write
77:                    FLASH_CSn_Set();            // chip select high
78:                    FLASH_CSn_Clear();          // Chip select low
79:                    Spi3Exchange(0xc7);       // bulk erase instruction
80:                    FLASH_CSn_Set();            // chip select high
81:                  }
82:                  
83:                  
84:                  
85:                  uint32_t StreamProgramExtFlash(uint32_t addr, uint32_t NumBytes, uint8_t *pdata){
86:                  // Program a stream of data to external flash. Breaks in to 256 byte pages and 4 kByte sectors. 
87:                  //  Returns the next available address in external flash
88:                  uint32_t BytesLeftOnPage;
89:                      while(NumBytes){
90:                      if((addr & 4095)==0){   // we're on a 4k boundary, erase the sector
91:                        WaitForExtFlashReady();     // wait here while write in progress
92:                        SectorEraseExtFlash(addr);
93:                        WaitForExtFlashReady();     // wait here while write in progress
94:                      }
95:                      BytesLeftOnPage=(uint32_t)256-(addr&0xff); // 
96:                      if(NumBytes>BytesLeftOnPage){         // more than will fit on this page 
97:                        PageProgramExtFlash(addr,BytesLeftOnPage,pdata);     // program the rest of the page
98:                        addr+=(uint32_t)BytesLeftOnPage;      // increment address to point to next one we'll program
99:                        pdata+=BytesLeftOnPage;             // move data pointer that many bytes also
100:                       NumBytes-=BytesLeftOnPage;
101:                     }else{
102:                       PageProgramExtFlash(addr,NumBytes,pdata);
103:                       addr+=(uint32_t)NumBytes;             // advance the address
104:                       pdata+=NumBytes;                    // advance data pointer (not really needed, but be constent)
105:                       NumBytes=0;                         // we just sent the last of them
106:                     }
107:                   }//end while
108:                   return(addr);     // send back the next available address
109:                 }
110:                 
111:                 
112:                 
113:                 void PageProgramExtFlash(uint32_t addr, uint32_t NumBytes, uint8_t *pdata){
114:                 // Program NumBytes pointed to by pdata at addr
115:                   union{
116:                     uint32_t u32;
117:                     uint8_t u8[4];
118:                   }LocalAddr;
119:                   uint32_t n;
120:                   WaitForExtFlashReady();     // wait here while write in progress
121:                   WriteExtFlashStatus(0b10);  // enable write and remove any block protection
122:                   WaitForExtFlashReady();     // wait here while write in progress
123:                   LocalAddr.u32=addr;         // local copy of address
124:                   FLASH_CSn_Clear();          // Chip select low
125:                   Spi3Exchange(0x06);         // enable write
126:                   FLASH_CSn_Set();            // chip select high
127:                   FLASH_CSn_Clear();          // Chip select low
128:                   Spi3Exchange(0x02);         // page program instruction
129:                   for(n=1;n<4;n++){           // send the address (24 bits) big endian
130:                     Spi3Exchange(LocalAddr.u8[3-n]);  // send byte. Byte sent as index 2, 1, 0 or msb to lsb
131:                   }
132:                   n=NumBytes;
133:                   while(n--){                 // send n bytes
134:                     Spi3Exchange(*pdata++);   // send the data and bump the pointer
135:                   }
136:                   FLASH_CSn_Set();            // chip select high
137:                 }
138:                 
139:                 
140:                 
141:                 
142:                 
143:                 uint8_t ReadExtFlash(uint32_t addr){
144:                 // Read a byte from the external flash. 
145:                   uint8_t result;
146:                   union{
147:                     uint32_t u32;
148:                     uint8_t u8[4];
149:                   }LocalAddr;
150:                   uint8_t n;
151:                   LocalAddr.u32=addr;         // make a local copy of the address
152:                   WaitForExtFlashReady();     // wait here while write in progress
153:                   FLASH_CSn_Clear();      // Chip select low
154:                   Spi3Exchange(0x03);       // read instruction
155:                   for(n=1;n<4;n++){           // send the address (24 bits) big endian
156:                     Spi3Exchange(LocalAddr.u8[3-n]);  // send byte. Byte sent as index 2, 1, 0 or msb to lsb
157:                   }
158:                   result=Spi3Exchange(0);    // read the data we read
159:                   FLASH_CSn_Set();     // chip select high
160:                   return(result);
161:                 }
162:                 
163:                 
164:                 
165:                 void ReadExtFlashArray(uint32_t addr, uint8_t *pdata, uint32_t NumBytes){
166:                   // read the external flash. Read NumBytes starting at addr and put them in ram at address pointed to by pdata. 
167:                   union{
168:                     uint32_t u32;
169:                     uint8_t u8[4];
170:                   }LocalAddr;
171:                   uint8_t *pDataLocal;
172:                   uint8_t n;
173:                   LocalAddr.u32=addr;         // make a local copy of the address
174:                   pDataLocal=pdata;
175:                   WaitForExtFlashReady();     // wait here while write in progress
176:                   FLASH_CSn_Clear();      // Chip select low
177:                   Spi3Exchange(0x03);         // read instruction
178:                   for(n=1;n<4;n++){           // send the address (24 bits) big endian
179:                     Spi3Exchange(LocalAddr.u8[3-n]);  // send byte. Byte sent as index 2, 1, 0 or msb to lsb
180:                   }
181:                   while(NumBytes--){
182:                     *pDataLocal++=Spi3Exchange(0);   // get the data, save it to pdata and bump the pointer
183:                   }
184:                   FLASH_CSn_Set();     // chip select high
185:                 }
186:                 
187:                 
188:                 
189:                 uint8_t ReadExtFlashStatus(){
190:                 // Read the status register of the external flash. 
191:                   uint8_t result;
192:                   FLASH_CSn_Clear();      // Chip select low
193:                   Spi3Exchange(0x05);       // read status register instruction
194:                   result=Spi3Exchange(0);   // get the result
195:                   FLASH_CSn_Set();     // chip select high
196:                   return(result);
197:                 }
198:                 
199:                 void WriteExtFlashStatus(uint8_t data){
200:                 // Write data to the external flash status register. BaseAddr is the JSD100 decoded address we'll use to select the particular flash chip,
201:                 // as specified in Jsd100BaseAddr.h. For example, pass in Flash0 (0x5400) to select Flash0
202:                   FLASH_CSn_Clear();      // Chip select low
203:                   Spi3Exchange(0x01);       // write status register instruction
204:                   Spi3Exchange(data);       // send what we want to write
205:                   FLASH_CSn_Set();     // chip select high
206:                 }
207:                 
208:                 
209:                 uint32_t ReadExtFlashID(void){
210:                 // Read the ID of the external flash. . 
211:                   union{
212:                     uint32_t u32;
213:                     uint8_t u8[4];
214:                   }result;
215:                   int n;
216:                   result.u8[3]=0;         // msb is 0
217:                   FLASH_CSn_Clear();      // Chip select low
218:                   Spi3Exchange(0x9f);     // read ID instruction
219:                   for(n=2;n>=0;n--){
220:                     result.u8[n]=Spi3Exchange(0); // get the result and make first bye msb
221:                   }
222:                   FLASH_CSn_Set();     // chip select high
223:                   return(result.u32);
224:                 }
225:                 
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
00000010  00000000   NOP
00000018  00000000   NOP
00000020  00000000   NOP
00000024  00000000   NOP
00000028  00000000   NOP
0000002C  00000000   NOP
00000030  00000000   NOP
00000038  00000000   NOP
00000044  00000000   NOP
00000050  00000000   NOP
00000058  00000000   NOP
0000005C  00000000   NOP
00000060  00000000   NOP
00000068  00000000   NOP
0000006C  00000000   NOP
00000074  00000000   NOP
00000084  00000000   NOP
00000090  00000000   NOP
000000A0  00000000   NOP
000000A8  00000000   NOP
000000B4  00000000   NOP
000000C0  00000000   NOP
000000C4  00000000   NOP
000000D0  00000000   NOP
000000D8  00000000   NOP
000000E4  00000000   NOP
9D000010  27BDFFE0   ADDIU SP, SP, -32
9D000014  AFBF001C   SW RA, 28(SP)
9D000018  AFBE0018   SW FP, 24(SP)
9D00001C  03A0F025   OR FP, SP, ZERO
9D000020  AFC40020   SW A0, 32(FP)
9D000024  0F4041A3   JAL WaitForExtFlashReady
9D000028  00000000   NOP
9D00002C  24040002   ADDIU A0, ZERO, 2
9D000030  0F4042E5   JAL WriteExtFlashStatus
9D000034  00000000   NOP
9D000038  0F4041A3   JAL WaitForExtFlashReady
9D00003C  00000000   NOP
9D000040  8FC20020   LW V0, 32(FP)
9D000044  AFC20014   SW V0, 20(FP)
9D000048  3C02BF86   LUI V0, -16506
9D00004C  24030800   ADDIU V1, ZERO, 2048
9D000050  AC430134   SW V1, 308(V0)
9D000054  24040006   ADDIU A0, ZERO, 6
9D000058  0F400044   JAL Spi3Exchange
9D00005C  00000000   NOP
9D000060  3C02BF86   LUI V0, -16506
9D000064  24030800   ADDIU V1, ZERO, 2048
9D000068  AC430138   SW V1, 312(V0)
9D00006C  3C02BF86   LUI V0, -16506
9D000070  24030800   ADDIU V1, ZERO, 2048
9D000074  AC430134   SW V1, 308(V0)
9D000078  24040020   ADDIU A0, ZERO, 32
9D00007C  0F400044   JAL Spi3Exchange
9D000080  00000000   NOP
9D000084  24020001   ADDIU V0, ZERO, 1
9D000088  AFC20010   SW V0, 16(FP)
9D00008C  1000000D   BEQ ZERO, ZERO, 0x9D0000C4
9D000090  00000000   NOP
9D000094  24030003   ADDIU V1, ZERO, 3
9D000098  8FC20010   LW V0, 16(FP)
9D00009C  00621023   SUBU V0, V1, V0
9D0000A0  27C30010   ADDIU V1, FP, 16
9D0000A4  00621021   ADDU V0, V1, V0
9D0000A8  90420004   LBU V0, 4(V0)
9D0000AC  00402025   OR A0, V0, ZERO
9D0000B0  0F400044   JAL Spi3Exchange
9D0000B4  00000000   NOP
9D0000B8  8FC20010   LW V0, 16(FP)
9D0000BC  24420001   ADDIU V0, V0, 1
9D0000C0  AFC20010   SW V0, 16(FP)
9D0000C4  8FC20010   LW V0, 16(FP)
9D0000C8  28420004   SLTI V0, V0, 4
9D0000CC  1440FFF1   BNE V0, ZERO, 0x9D000094
9D0000D0  00000000   NOP
9D0000D4  3C02BF86   LUI V0, -16506
9D0000D8  24030800   ADDIU V1, ZERO, 2048
9D0000DC  AC430138   SW V1, 312(V0)
9D0000E0  00000000   NOP
9D0000E4  03C0E825   OR SP, FP, ZERO
9D0000E8  8FBF001C   LW RA, 28(SP)
9D0000EC  8FBE0018   LW FP, 24(SP)
9D0000F0  27BD0020   ADDIU SP, SP, 32
9D0000F4  03E00008   JR RA
9D0000F8  00000000   NOP
9D000110  27BDFFE8   ADDIU SP, SP, -24
9D000114  AFBF0014   SW RA, 20(SP)
9D000118  AFBE0010   SW FP, 16(SP)
9D00011C  03A0F025   OR FP, SP, ZERO
9D000120  00801025   OR V0, A0, ZERO
9D000124  A3C20018   SB V0, 24(FP)
9D000128  00000000   NOP
9D00012C  0F4045DB   JAL SPI3_IsTransmitterBusy
9D000130  00000000   NOP
9D000134  1440FFFD   BNE V0, ZERO, 0x9D00012C
9D000138  00000000   NOP
9D00013C  93C30018   LBU V1, 24(FP)
9D000140  3C02BF82   LUI V0, -16510
9D000144  AC431420   SW V1, 5152(V0)
9D000148  00000000   NOP
9D00014C  0F4045DB   JAL SPI3_IsTransmitterBusy
9D000150  00000000   NOP
9D000154  1440FFFD   BNE V0, ZERO, 0x9D00014C
9D000158  00000000   NOP
9D00015C  3C02BF82   LUI V0, -16510
9D000160  8C421420   LW V0, 5152(V0)
9D000164  304200FF   ANDI V0, V0, 255
9D000168  03C0E825   OR SP, FP, ZERO
9D00016C  8FBF0014   LW RA, 20(SP)
9D000170  8FBE0010   LW FP, 16(SP)
9D000174  27BD0018   ADDIU SP, SP, 24
9D000178  03E00008   JR RA
9D00017C  00000000   NOP
9D00CFAC  27BDFFE0   ADDIU SP, SP, -32
9D00CFB0  AFBF001C   SW RA, 28(SP)
9D00CFB4  AFBE0018   SW FP, 24(SP)
9D00CFB8  03A0F025   OR FP, SP, ZERO
9D00CFBC  AFC40020   SW A0, 32(FP)
9D00CFC0  AFC50024   SW A1, 36(FP)
9D00CFC4  AFC60028   SW A2, 40(FP)
9D00CFC8  0F4041A3   JAL WaitForExtFlashReady
9D00CFCC  00000000   NOP
9D00CFD0  24040002   ADDIU A0, ZERO, 2
9D00CFD4  0F4042E5   JAL WriteExtFlashStatus
9D00CFD8  00000000   NOP
9D00CFDC  0F4041A3   JAL WaitForExtFlashReady
9D00CFE0  00000000   NOP
9D00CFE4  8FC20020   LW V0, 32(FP)
9D00CFE8  AFC20014   SW V0, 20(FP)
9D00CFEC  3C02BF86   LUI V0, -16506
9D00CFF0  24030800   ADDIU V1, ZERO, 2048
9D00CFF4  AC430134   SW V1, 308(V0)
9D00CFF8  24040006   ADDIU A0, ZERO, 6
9D00CFFC  0F400044   JAL Spi3Exchange
9D00D000  00000000   NOP
9D00D004  3C02BF86   LUI V0, -16506
9D00D008  24030800   ADDIU V1, ZERO, 2048
9D00D00C  AC430138   SW V1, 312(V0)
9D00D010  3C02BF86   LUI V0, -16506
9D00D014  24030800   ADDIU V1, ZERO, 2048
9D00D018  AC430134   SW V1, 308(V0)
9D00D01C  24040002   ADDIU A0, ZERO, 2
9D00D020  0F400044   JAL Spi3Exchange
9D00D024  00000000   NOP
9D00D028  24020001   ADDIU V0, ZERO, 1
9D00D02C  AFC20010   SW V0, 16(FP)
9D00D030  1000000D   BEQ ZERO, ZERO, 0x9D00D068
9D00D034  00000000   NOP
9D00D038  24030003   ADDIU V1, ZERO, 3
9D00D03C  8FC20010   LW V0, 16(FP)
9D00D040  00621023   SUBU V0, V1, V0
9D00D044  27C30010   ADDIU V1, FP, 16
9D00D048  00621021   ADDU V0, V1, V0
9D00D04C  90420004   LBU V0, 4(V0)
9D00D050  00402025   OR A0, V0, ZERO
9D00D054  0F400044   JAL Spi3Exchange
9D00D058  00000000   NOP
9D00D05C  8FC20010   LW V0, 16(FP)
9D00D060  24420001   ADDIU V0, V0, 1
9D00D064  AFC20010   SW V0, 16(FP)
9D00D068  8FC20010   LW V0, 16(FP)
9D00D06C  2C420004   SLTIU V0, V0, 4
9D00D070  1440FFF1   BNE V0, ZERO, 0x9D00D038
9D00D074  00000000   NOP
9D00D078  8FC20024   LW V0, 36(FP)
9D00D07C  AFC20010   SW V0, 16(FP)
9D00D080  10000008   BEQ ZERO, ZERO, 0x9D00D0A4
9D00D084  00000000   NOP
9D00D088  8FC20028   LW V0, 40(FP)
9D00D08C  24430001   ADDIU V1, V0, 1
9D00D090  AFC30028   SW V1, 40(FP)
9D00D094  90420000   LBU V0, 0(V0)
9D00D098  00402025   OR A0, V0, ZERO
9D00D09C  0F400044   JAL Spi3Exchange
9D00D0A0  00000000   NOP
9D00D0A4  8FC20010   LW V0, 16(FP)
9D00D0A8  2443FFFF   ADDIU V1, V0, -1
9D00D0AC  AFC30010   SW V1, 16(FP)
9D00D0B0  1440FFF5   BNE V0, ZERO, 0x9D00D088
9D00D0B4  00000000   NOP
9D00D0B8  3C02BF86   LUI V0, -16506
9D00D0BC  24030800   ADDIU V1, ZERO, 2048
9D00D0C0  AC430138   SW V1, 312(V0)
9D00D0C4  00000000   NOP
9D00D0C8  03C0E825   OR SP, FP, ZERO
9D00D0CC  8FBF001C   LW RA, 28(SP)
9D00D0D0  8FBE0018   LW FP, 24(SP)
9D00D0D4  27BD0020   ADDIU SP, SP, 32
9D00D0D8  03E00008   JR RA
9D00D0DC  00000000   NOP
9D00D338  27BDFFE0   ADDIU SP, SP, -32
9D00D33C  AFBF001C   SW RA, 28(SP)
9D00D340  AFBE0018   SW FP, 24(SP)
9D00D344  03A0F025   OR FP, SP, ZERO
9D00D348  AFC40020   SW A0, 32(FP)
9D00D34C  AFC50024   SW A1, 36(FP)
9D00D350  AFC60028   SW A2, 40(FP)
9D00D354  10000037   BEQ ZERO, ZERO, 0x9D00D434
9D00D358  00000000   NOP
9D00D35C  8FC20020   LW V0, 32(FP)
9D00D360  30420FFF   ANDI V0, V0, 4095
9D00D364  14400008   BNE V0, ZERO, 0x9D00D388
9D00D368  00000000   NOP
9D00D36C  0F4041A3   JAL WaitForExtFlashReady
9D00D370  00000000   NOP
9D00D374  8FC40020   LW A0, 32(FP)
9D00D378  0F400004   JAL SectorEraseExtFlash
9D00D37C  00000000   NOP
9D00D380  0F4041A3   JAL WaitForExtFlashReady
9D00D384  00000000   NOP
9D00D388  8FC20020   LW V0, 32(FP)
9D00D38C  304200FF   ANDI V0, V0, 255
9D00D390  24030100   ADDIU V1, ZERO, 256
9D00D394  00621023   SUBU V0, V1, V0
9D00D398  AFC20010   SW V0, 16(FP)
9D00D39C  8FC30024   LW V1, 36(FP)
9D00D3A0  8FC20010   LW V0, 16(FP)
9D00D3A4  0043102B   SLTU V0, V0, V1
9D00D3A8  10400014   BEQ V0, ZERO, 0x9D00D3FC
9D00D3AC  00000000   NOP
9D00D3B0  8FC60028   LW A2, 40(FP)
9D00D3B4  8FC50010   LW A1, 16(FP)
9D00D3B8  8FC40020   LW A0, 32(FP)
9D00D3BC  0F4033EB   JAL PageProgramExtFlash
9D00D3C0  00000000   NOP
9D00D3C4  8FC30020   LW V1, 32(FP)
9D00D3C8  8FC20010   LW V0, 16(FP)
9D00D3CC  00621021   ADDU V0, V1, V0
9D00D3D0  AFC20020   SW V0, 32(FP)
9D00D3D4  8FC30028   LW V1, 40(FP)
9D00D3D8  8FC20010   LW V0, 16(FP)
9D00D3DC  00621021   ADDU V0, V1, V0
9D00D3E0  AFC20028   SW V0, 40(FP)
9D00D3E4  8FC30024   LW V1, 36(FP)
9D00D3E8  8FC20010   LW V0, 16(FP)
9D00D3EC  00621023   SUBU V0, V1, V0
9D00D3F0  AFC20024   SW V0, 36(FP)
9D00D3F4  1000000F   BEQ ZERO, ZERO, 0x9D00D434
9D00D3F8  00000000   NOP
9D00D3FC  8FC60028   LW A2, 40(FP)
9D00D400  8FC50024   LW A1, 36(FP)
9D00D404  8FC40020   LW A0, 32(FP)
9D00D408  0F4033EB   JAL PageProgramExtFlash
9D00D40C  00000000   NOP
9D00D410  8FC30020   LW V1, 32(FP)
9D00D414  8FC20024   LW V0, 36(FP)
9D00D418  00621021   ADDU V0, V1, V0
9D00D41C  AFC20020   SW V0, 32(FP)
9D00D420  8FC30028   LW V1, 40(FP)
9D00D424  8FC20024   LW V0, 36(FP)
9D00D428  00621021   ADDU V0, V1, V0
9D00D42C  AFC20028   SW V0, 40(FP)
9D00D430  AFC00024   SW ZERO, 36(FP)
9D00D434  8FC20024   LW V0, 36(FP)
9D00D438  1440FFC8   BNE V0, ZERO, 0x9D00D35C
9D00D43C  00000000   NOP
9D00D440  8FC20020   LW V0, 32(FP)
9D00D444  03C0E825   OR SP, FP, ZERO
9D00D448  8FBF001C   LW RA, 28(SP)
9D00D44C  8FBE0018   LW FP, 24(SP)
9D00D450  27BD0020   ADDIU SP, SP, 32
9D00D454  03E00008   JR RA
9D00D458  00000000   NOP
9D00F1CC  27BDFFE0   ADDIU SP, SP, -32
9D00F1D0  AFBF001C   SW RA, 28(SP)
9D00F1D4  AFBE0018   SW FP, 24(SP)
9D00F1D8  03A0F025   OR FP, SP, ZERO
9D00F1DC  AFC40020   SW A0, 32(FP)
9D00F1E0  8FC20020   LW V0, 32(FP)
9D00F1E4  AFC20014   SW V0, 20(FP)
9D00F1E8  0F4041A3   JAL WaitForExtFlashReady
9D00F1EC  00000000   NOP
9D00F1F0  3C02BF86   LUI V0, -16506
9D00F1F4  24030800   ADDIU V1, ZERO, 2048
9D00F1F8  AC430134   SW V1, 308(V0)
9D00F1FC  24040003   ADDIU A0, ZERO, 3
9D00F200  0F400044   JAL Spi3Exchange
9D00F204  00000000   NOP
9D00F208  24020001   ADDIU V0, ZERO, 1
9D00F20C  A3C20010   SB V0, 16(FP)
9D00F210  1000000D   BEQ ZERO, ZERO, 0x9D00F248
9D00F214  00000000   NOP
9D00F218  93C20010   LBU V0, 16(FP)
9D00F21C  24030003   ADDIU V1, ZERO, 3
9D00F220  00621023   SUBU V0, V1, V0
9D00F224  27C30010   ADDIU V1, FP, 16
9D00F228  00621021   ADDU V0, V1, V0
9D00F22C  90420004   LBU V0, 4(V0)
9D00F230  00402025   OR A0, V0, ZERO
9D00F234  0F400044   JAL Spi3Exchange
9D00F238  00000000   NOP
9D00F23C  93C20010   LBU V0, 16(FP)
9D00F240  24420001   ADDIU V0, V0, 1
9D00F244  A3C20010   SB V0, 16(FP)
9D00F248  93C20010   LBU V0, 16(FP)
9D00F24C  2C420004   SLTIU V0, V0, 4
9D00F250  1440FFF1   BNE V0, ZERO, 0x9D00F218
9D00F254  00000000   NOP
9D00F258  00002025   OR A0, ZERO, ZERO
9D00F25C  0F400044   JAL Spi3Exchange
9D00F260  00000000   NOP
9D00F264  A3C20011   SB V0, 17(FP)
9D00F268  3C02BF86   LUI V0, -16506
9D00F26C  24030800   ADDIU V1, ZERO, 2048
9D00F270  AC430138   SW V1, 312(V0)
9D00F274  93C20011   LBU V0, 17(FP)
9D00F278  03C0E825   OR SP, FP, ZERO
9D00F27C  8FBF001C   LW RA, 28(SP)
9D00F280  8FBE0018   LW FP, 24(SP)
9D00F284  27BD0020   ADDIU SP, SP, 32
9D00F288  03E00008   JR RA
9D00F28C  00000000   NOP
9D00FB7C  27BDFFE0   ADDIU SP, SP, -32
9D00FB80  AFBF001C   SW RA, 28(SP)
9D00FB84  AFBE0018   SW FP, 24(SP)
9D00FB88  03A0F025   OR FP, SP, ZERO
9D00FB8C  A3C00017   SB ZERO, 23(FP)
9D00FB90  3C02BF86   LUI V0, -16506
9D00FB94  24030800   ADDIU V1, ZERO, 2048
9D00FB98  AC430134   SW V1, 308(V0)
9D00FB9C  2404009F   ADDIU A0, ZERO, 159
9D00FBA0  0F400044   JAL Spi3Exchange
9D00FBA4  00000000   NOP
9D00FBA8  24020002   ADDIU V0, ZERO, 2
9D00FBAC  AFC20010   SW V0, 16(FP)
9D00FBB0  1000000C   BEQ ZERO, ZERO, 0x9D00FBE4
9D00FBB4  00000000   NOP
9D00FBB8  00002025   OR A0, ZERO, ZERO
9D00FBBC  0F400044   JAL Spi3Exchange
9D00FBC0  00000000   NOP
9D00FBC4  00401825   OR V1, V0, ZERO
9D00FBC8  8FC20010   LW V0, 16(FP)
9D00FBCC  27C40010   ADDIU A0, FP, 16
9D00FBD0  00821021   ADDU V0, A0, V0
9D00FBD4  A0430004   SB V1, 4(V0)
9D00FBD8  8FC20010   LW V0, 16(FP)
9D00FBDC  2442FFFF   ADDIU V0, V0, -1
9D00FBE0  AFC20010   SW V0, 16(FP)
9D00FBE4  8FC20010   LW V0, 16(FP)
9D00FBE8  0441FFF3   BGEZ V0, 0x9D00FBB8
9D00FBEC  00000000   NOP
9D00FBF0  3C02BF86   LUI V0, -16506
9D00FBF4  24030800   ADDIU V1, ZERO, 2048
9D00FBF8  AC430138   SW V1, 312(V0)
9D00FBFC  8FC20014   LW V0, 20(FP)
9D00FC00  03C0E825   OR SP, FP, ZERO
9D00FC04  8FBF001C   LW RA, 28(SP)
9D00FC08  8FBE0018   LW FP, 24(SP)
9D00FC0C  27BD0020   ADDIU SP, SP, 32
9D00FC10  03E00008   JR RA
9D00FC14  00000000   NOP
9D01068C  27BDFFE0   ADDIU SP, SP, -32
9D010690  AFBF001C   SW RA, 28(SP)
9D010694  AFBE0018   SW FP, 24(SP)
9D010698  03A0F025   OR FP, SP, ZERO
9D01069C  3C020001   LUI V0, 1
9D0106A0  344286A0   ORI V0, V0, -31072
9D0106A4  AFC20010   SW V0, 16(FP)
9D0106A8  1000000C   BEQ ZERO, ZERO, 0x9D0106DC
9D0106AC  00000000   NOP
9D0106B0  8FC20010   LW V0, 16(FP)
9D0106B4  2443FFFF   ADDIU V1, V0, -1
9D0106B8  AFC30010   SW V1, 16(FP)
9D0106BC  14400007   BNE V0, ZERO, 0x9D0106DC
9D0106C0  00000000   NOP
9D0106C4  3C029D01   LUI V0, -25343
9D0106C8  24441AF8   ADDIU A0, V0, 6904
9D0106CC  0F404466   JAL PrintString
9D0106D0  00000000   NOP
9D0106D4  10000006   BEQ ZERO, ZERO, 0x9D0106F0
9D0106D8  00000000   NOP
9D0106DC  0F404330   JAL ReadExtFlashStatus
9D0106E0  00000000   NOP
9D0106E4  30420001   ANDI V0, V0, 1
9D0106E8  1440FFF1   BNE V0, ZERO, 0x9D0106B0
9D0106EC  00000000   NOP
9D0106F0  00000000   NOP
9D0106F4  03C0E825   OR SP, FP, ZERO
9D0106F8  8FBF001C   LW RA, 28(SP)
9D0106FC  8FBE0018   LW FP, 24(SP)
9D010700  27BD0020   ADDIU SP, SP, 32
9D010704  03E00008   JR RA
9D010708  00000000   NOP
9D010B94  27BDFFE8   ADDIU SP, SP, -24
9D010B98  AFBF0014   SW RA, 20(SP)
9D010B9C  AFBE0010   SW FP, 16(SP)
9D010BA0  03A0F025   OR FP, SP, ZERO
9D010BA4  00801025   OR V0, A0, ZERO
9D010BA8  A3C20018   SB V0, 24(FP)
9D010BAC  3C02BF86   LUI V0, -16506
9D010BB0  24030800   ADDIU V1, ZERO, 2048
9D010BB4  AC430134   SW V1, 308(V0)
9D010BB8  24040001   ADDIU A0, ZERO, 1
9D010BBC  0F400044   JAL Spi3Exchange
9D010BC0  00000000   NOP
9D010BC4  93C20018   LBU V0, 24(FP)
9D010BC8  00402025   OR A0, V0, ZERO
9D010BCC  0F400044   JAL Spi3Exchange
9D010BD0  00000000   NOP
9D010BD4  3C02BF86   LUI V0, -16506
9D010BD8  24030800   ADDIU V1, ZERO, 2048
9D010BDC  AC430138   SW V1, 312(V0)
9D010BE0  00000000   NOP
9D010BE4  03C0E825   OR SP, FP, ZERO
9D010BE8  8FBF0014   LW RA, 20(SP)
9D010BEC  8FBE0010   LW FP, 16(SP)
9D010BF0  27BD0018   ADDIU SP, SP, 24
9D010BF4  03E00008   JR RA
9D010BF8  00000000   NOP
9D010CC0  27BDFFE0   ADDIU SP, SP, -32
9D010CC4  AFBF001C   SW RA, 28(SP)
9D010CC8  AFBE0018   SW FP, 24(SP)
9D010CCC  03A0F025   OR FP, SP, ZERO
9D010CD0  3C02BF86   LUI V0, -16506
9D010CD4  24030800   ADDIU V1, ZERO, 2048
9D010CD8  AC430134   SW V1, 308(V0)
9D010CDC  24040005   ADDIU A0, ZERO, 5
9D010CE0  0F400044   JAL Spi3Exchange
9D010CE4  00000000   NOP
9D010CE8  00002025   OR A0, ZERO, ZERO
9D010CEC  0F400044   JAL Spi3Exchange
9D010CF0  00000000   NOP
9D010CF4  A3C20010   SB V0, 16(FP)
9D010CF8  3C02BF86   LUI V0, -16506
9D010CFC  24030800   ADDIU V1, ZERO, 2048
9D010D00  AC430138   SW V1, 312(V0)
9D010D04  93C20010   LBU V0, 16(FP)
9D010D08  03C0E825   OR SP, FP, ZERO
9D010D0C  8FBF001C   LW RA, 28(SP)
9D010D10  8FBE0018   LW FP, 24(SP)
9D010D14  27BD0020   ADDIU SP, SP, 32
9D010D18  03E00008   JR RA
9D010D1C  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/dynamicthreshold.c  ---------
1:                   // DynamicThreshold.c
2:                   
3:                   // Determines mark/space threshold based on current mark/space levels.
4:                   
5:                   #include "biquad.h"
6:                   #include "main.h"// typedef for smp_type
7:                   
8:                   #define DynamicThresholdF 50.0     // LPF cutoff frequency
9:                   
10:                  biquad *DynamicThresholdLpf;    
11:                  
12:                  void DynamicThresholdInit(void){
13:                    DynamicThresholdLpf=BiQuad_new(LPF, 0.0, DynamicThresholdF, 8000.0, 0.707 );    
14:                  }
15:                  
16:                  smp_type DynamicThresholdGet(smp_type MarkLevel, smp_type SpaceLevel){
17:                  // Returns a level half way between the average max of mark and space levels.
18:                    static smp_type LastThreshold=0.0;    // Threshold after LPF. Use to determine if currently mark or space
19:                    static smp_type Max=0.0;          // Maximum mark or space received so far
20:                    static smp_type MarkMax=0.0;      // Last peak level received for mark
21:                    static smp_type SpaceMax=0.0;
22:                    static enum{Mark, Space} PreviousState=Mark; // Remember last so we detect transitions
23:                    if((MarkLevel-SpaceLevel)>0.0){   // Currently in mark condition
24:                      if(PreviousState==Space){               // Space ended. Save max and reset
25:                        SpaceMax=Max;
26:                        Max=0;
27:                        PreviousState=Mark;                     // Remember that we changed to mark
28:                      }    
29:                      if(MarkLevel>Max) Max=MarkLevel;        // If higher than max so far, save.
30:                    }else{                              // Currently in space condition
31:                      if(PreviousState==Mark){          // Mark ended. Save max and reset
32:                        MarkMax=Max;
33:                        Max=0;
34:                        PreviousState=Space;            // Remember that we changed to space
35:                      }    
36:                      if(SpaceLevel>Max) Max=SpaceLevel;  // If higher than max so far, save
37:                    }                                     // End currently in space
38:                      // Pass center of mark-space max to LPF
39:                    LastThreshold=BiQuad((MarkMax-SpaceMax)/2.0, DynamicThresholdLpf);
40:                    return(LastThreshold);
41:                  }
42:                  
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00D7AC  27BDFFE8   ADDIU SP, SP, -24
9D00D7B0  AFBF0014   SW RA, 20(SP)
9D00D7B4  AFBE0010   SW FP, 16(SP)
9D00D7B8  03A0F025   OR FP, SP, ZERO
9D00D7BC  F7CC0018   SDC1 F12, 24(FP)
9D00D7C0  F7CE0020   SDC1 F14, 32(FP)
9D00D7C4  D7C10018   LDC1 F1, 24(FP)
9D00D7C8  D7C00020   LDC1 F0, 32(FP)
9D00D7CC  46200801   SUB.D F0, F1, F0
9D00D7D0  44800800   MTC1 ZERO, F1
9D00D7D4  44E00800   MTHC1 ZERO, F1
9D00D7D8  4620083C   C.LT.D F1, F0
9D00D7DC  45000013   BC1F 0x9D00D82C
9D00D7E0  00000000   NOP
9D00D7E4  8F8380A8   LW V1, -32600(GP)
9D00D7E8  24020001   ADDIU V0, ZERO, 1
9D00D7EC  14620006   BNE V1, V0, 0x9D00D808
9D00D7F0  00000000   NOP
9D00D7F4  D78080B0   LDC1 F0, -32592(GP)
9D00D7F8  F78080B8   SDC1 F0, -32584(GP)
9D00D7FC  AF8080B0   SW ZERO, -32592(GP)
9D00D800  AF8080B4   SW ZERO, -32588(GP)
9D00D804  AF8080A8   SW ZERO, -32600(GP)
9D00D808  D78080B0   LDC1 F0, -32592(GP)
9D00D80C  D7C10018   LDC1 F1, 24(FP)
9D00D810  4621013C   C.LT.D 1, F0, F1
9D00D814  45040015   BC1F 1, 0x9D00D86C
9D00D818  00000000   NOP
9D00D81C  D7C00018   LDC1 F0, 24(FP)
9D00D820  F78080B0   SDC1 F0, -32592(GP)
9D00D824  10000011   BEQ ZERO, ZERO, 0x9D00D86C
9D00D828  00000000   NOP
9D00D82C  8F8280A8   LW V0, -32600(GP)
9D00D830  14400007   BNE V0, ZERO, 0x9D00D850
9D00D834  00000000   NOP
9D00D838  D78080B0   LDC1 F0, -32592(GP)
9D00D83C  F78080C0   SDC1 F0, -32576(GP)
9D00D840  AF8080B0   SW ZERO, -32592(GP)
9D00D844  AF8080B4   SW ZERO, -32588(GP)
9D00D848  24020001   ADDIU V0, ZERO, 1
9D00D84C  AF8280A8   SW V0, -32600(GP)
9D00D850  D78080B0   LDC1 F0, -32592(GP)
9D00D854  D7C10020   LDC1 F1, 32(FP)
9D00D858  4621023C   C.LT.D 2, F0, F1
9D00D85C  45080003   BC1F 2, 0x9D00D86C
9D00D860  00000000   NOP
9D00D864  D7C00020   LDC1 F0, 32(FP)
9D00D868  F78080B0   SDC1 F0, -32592(GP)
9D00D86C  D78180C0   LDC1 F1, -32576(GP)
9D00D870  D78080B8   LDC1 F0, -32584(GP)
9D00D874  46200841   SUB.D F1, F1, F0
9D00D878  3C029D01   LUI V0, -25343
9D00D87C  D4401B58   LDC1 F0, 7000(V0)
9D00D880  46200803   DIV.D F0, F1, F0
9D00D884  8F828158   LW V0, -32424(GP)
9D00D888  00403025   OR A2, V0, ZERO
9D00D88C  46200306   MOV.D F12, F0
9D00D890  0F403A06   JAL BiQuad
9D00D894  00000000   NOP
9D00D898  F78080C8   SDC1 F0, -32568(GP)
9D00D89C  D78080C8   LDC1 F0, -32568(GP)
9D00D8A0  03C0E825   OR SP, FP, ZERO
9D00D8A4  8FBF0014   LW RA, 20(SP)
9D00D8A8  8FBE0010   LW FP, 16(SP)
9D00D8AC  27BD0018   ADDIU SP, SP, 24
9D00D8B0  03E00008   JR RA
9D00D8B4  00000000   NOP
9D010B2C  27BDFFD0   ADDIU SP, SP, -48
9D010B30  AFBF002C   SW RA, 44(SP)
9D010B34  AFBE0028   SW FP, 40(SP)
9D010B38  03A0F025   OR FP, SP, ZERO
9D010B3C  3C029D01   LUI V0, -25343
9D010B40  D4401B40   LDC1 F0, 6976(V0)
9D010B44  F7A00020   SDC1 F0, 32(SP)
9D010B48  3C029D01   LUI V0, -25343
9D010B4C  D4401B48   LDC1 F0, 6984(V0)
9D010B50  F7A00018   SDC1 F0, 24(SP)
9D010B54  3C029D01   LUI V0, -25343
9D010B58  D4401B50   LDC1 F0, 6992(V0)
9D010B5C  F7A00010   SDC1 F0, 16(SP)
9D010B60  00003025   OR A2, ZERO, ZERO
9D010B64  00003825   OR A3, ZERO, ZERO
9D010B68  00002025   OR A0, ZERO, ZERO
9D010B6C  0F403A3C   JAL BiQuad_new
9D010B70  00000000   NOP
9D010B74  AF828158   SW V0, -32424(GP)
9D010B78  00000000   NOP
9D010B7C  03C0E825   OR SP, FP, ZERO
9D010B80  8FBF002C   LW RA, 44(SP)
9D010B84  8FBE0028   LW FP, 40(SP)
9D010B88  27BD0030   ADDIU SP, SP, 48
9D010B8C  03E00008   JR RA
9D010B90  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/display.c  ------------------
1:                   // display.c
2:                   
3:                   #include "fifo16.h"        // FIFO to old SPI data going to display
4:                   #include <stddef.h>                     // Defines NULL
5:                   #include <stdbool.h>                    // Defines true
6:                   #include <stdlib.h>                     // Defines EXIT_FAILURE
7:                   #include "definitions.h"                // SYS function prototypes
8:                   #include "main.h"                       // access to Timer2TimeoutCounter for delays
9:                   #include "display.h"
10:                  
11:                  
12:                  /*
13:                   * This code drives a 128x128 RGB pixel display with an SSD1351 controller.
14:                   * The display is https://www.aliexpress.com/item/2255799949791867.html which
15:                   * comes with NO documentation. It appears to be very similar to the display
16:                   * at https://www.buydisplay.com/full-color-1-5-inch-arduino-raspberry-pi-oled-display-module-128x128
17:                   * which does include sample code. The 8051 code at 
18:                   * https://www.buydisplay.com/8051/ER-OLEDM015-1C_8051_Tutorial.zip proved most
19:                   * useful. Even that has skimpy documentation.
20:                   * 
21:                   * Both the BuyDisplay and my code use the 8 bit SPI interface since the PIC
22:                   * does not support 9 bit transmission. 8 bit mode makes use of the Data/Commandn
23:                   * line. 
24:                   * 
25:                   * To avoid having the code wait around for SPI transmissions, data is put
26:                   * in a 16 bit wide FIFO for transmission when the SPI is available. The
27:                   * FIFO is 16 bits wide to carry the 8 bit data, the state of Data/Commandn ,
28:                   * and the chip select. It is interesting that the SSD1351D shows chip select
29:                   * being held low for the command and the following parameters while the 
30:                   * BuyDisplay code drives chip select high after each byte. The code here
31:                   * follows the SSD1351 method of leaving chip select low through the whole
32:                   * command and data.
33:                   * 
34:                   * Not documented anywhere is the coding of color. The display uses 16 bits
35:                   * per pixel for color with the following bit fields:
36:                   * b15..b11 - Red
37:                   * b10..b5  - Green
38:                   * b4..0    - Blue
39:                   */
40:                  
41:                  #define DisplayFifoSize 1024 //3000
42:                  
43:                  union DisplayWord{
44:                      uint16_t word;
45:                      struct{
46:                        uint8_t data;
47:                        uint8_t ChipSelect:7;   // binary coded chip select. Display is 1. 0 is deselect
48:                        uint8_t CommandBit:1;   // 1=command, 0=data (backwards from pin)
49:                      };  
50:                  };
51:                  
52:                  static Fifo16_t *DisplayFifo;
53:                  
54:                  void DisplayFifoWrite(uint8_t chip, uint8_t CommandFlag, uint8_t data){
55:                    union DisplayWord FifoData;
56:                    FifoData.ChipSelect=chip;      // Which chip we are talking to (display=1)
57:                    FifoData.CommandBit=CommandFlag;   // True if command (DataCmdn will be low)
58:                    FifoData.data=data;                // 8 bit data to send
59:                    while(Fifo16Free(DisplayFifo)<5) DisplayPoll(); // Let Fifo drain catch up. Typically on display clear
60:                    Fifo16Put(DisplayFifo,FifoData.word);  // Put result in fifo
61:                  }
62:                  
63:                  void ComWrite(uint8_t command){
64:                  // Put a byte in the fifo with CommandFlag true and chip=1 (display)
65:                    DisplayFifoWrite(0,0,0);      // Drive CSn high before each command  
66:                    DisplayFifoWrite(1,1,command);    
67:                  }
68:                  
69:                  void DataWrite(uint8_t data){
70:                  // Put a byte in the fifo with CommandFlag false and chip=1 (display)
71:                    DisplayFifoWrite(1,0,data);    
72:                  }
73:                  
74:                  void DisplayCSN(void){
75:                  // Put a dummy byte in the fifo with chip=0 to disable chip select
76:                    DisplayFifoWrite(0,0,0);    
77:                  }
78:                  
79:                  void DisplayInit(void){
80:                    DisplayFifo=Fifo16Create(DisplayFifoSize);    // Create a FIFO 16 bits wide
81:                    if(NULL==DisplayFifo){
82:                      PrintString("Insufficient heap for DisplayFifo\r\n");
83:                    }
84:                    DISPLAY_CSn_Set();
85:                    DisplayCSN();                      // Chip select high. Put in fifo
86:                    Timer2TimeoutCounter=80;          // Counts down at 80 kHz, 12.5 us per click
87:                    while(Timer2TimeoutCounter>0);       // Delay 1ms
88:                    DISPLAY_RESETn_Clear();            // Display reset line low
89:                    Timer2TimeoutCounter=2;           // Delay 12.5 to 25us, 2us min
90:                    while(Timer2TimeoutCounter>0);       // Delay 1ms
91:                    DISPLAY_RESETn_Set();              // Display reset line high
92:                    Timer2TimeoutCounter=17;            // Wait about 200ms 
93:                    while(Timer2TimeoutCounter>0);
94:                    // Below code from https://www.buydisplay.com/8051/ER-OLEDM015-1C_8051_Tutorial.zip
95:                    // Note that that code has CSn go high between each byte while the datasheet at
96:                    // https://www.buydisplay.com/download/ic/SSD1351.pdf has CSn stay low through the entire 
97:                    // command and data byte sequence. ComWrite() puts a code in the FIFO to drive CSn high.
98:                    // This is then followed by the command which drives CSn low.
99:                    ComWrite(0xfd); // Set Command Lock
100:                   DataWrite(0xb1);
101:                   ComWrite(0xae); // Display off
102:                   ComWrite(0x15); //set column
103:                   DataWrite(0x00);
104:                   DataWrite(0x7f);
105:                   ComWrite(0x75); //set row
106:                   DataWrite(0x00);
107:                   DataWrite(0x7f);
108:                   ComWrite(0xa0); // Set Re-map / Color Depth 
109:                   DataWrite(0x65);				//   Color sequence is swapped: C .. B .. A
110:                   ComWrite(0xa2); // Set display offset
111:                   DataWrite(0x00);
112:                   ComWrite(0xa6); // Normal display
113:                   ComWrite(0xab); // Set Function selection
114:                   DataWrite(0x01);
115:                   ComWrite(0xaf); // Set Sleep mode
116:                   ComWrite(0xb1); // Set pre & dis_charge
117:                   DataWrite(0x32);
118:                   ComWrite(0xb3); // clock & frequency
119:                   DataWrite(0xf1);
120:                   ComWrite(0xb4); // Set Segment LOW Voltage
121:                   DataWrite(0xa0);
122:                   DataWrite(0xb5);
123:                   DataWrite(0x55);
124:                   ComWrite(0xb5); // Set GPIO 0 to 1  turn on DC/DC
125:                   DataWrite(0x0b);
126:                   ComWrite(0xb6); // Set Second Pre-charge Period
127:                   DataWrite(0x01);
128:                   /* - Try without gamma table
129:                   ComWrite(0xb8); //Set Gray Table
130:                   DataWrite(0); //0
131:                   DataWrite(2); //1
132:                   DataWrite(3); //2
133:                   DataWrite(4); //3
134:                   DataWrite(5); //4
135:                   DataWrite(6); //5
136:                   DataWrite(7); //6
137:                   DataWrite(8); //7
138:                   DataWrite(9); //8
139:                   DataWrite(10); //9
140:                   DataWrite(11); //10
141:                   DataWrite(12); //11
142:                   DataWrite(13); //12
143:                   DataWrite(14); //13
144:                   DataWrite(15); //14
145:                   DataWrite(16); //15
146:                   DataWrite(17); //16
147:                   DataWrite(18); //17
148:                   DataWrite(19); //18
149:                   DataWrite(21); //19
150:                   DataWrite(23); //20
151:                   DataWrite(25); //21
152:                   DataWrite(27); //22
153:                   DataWrite(29); //23
154:                   DataWrite(31); //24
155:                   DataWrite(33); //25
156:                   DataWrite(35); //26
157:                   DataWrite(37); //27
158:                   DataWrite(39); //28
159:                   DataWrite(42); //29
160:                   DataWrite(45); //30
161:                   DataWrite(48); //31
162:                   DataWrite(51); //32
163:                   DataWrite(54); //33
164:                   DataWrite(57); //34
165:                   DataWrite(60); //35
166:                   DataWrite(63); //36
167:                   DataWrite(66); //37
168:                   DataWrite(69); //38
169:                   DataWrite(72); //39
170:                   DataWrite(76); //40
171:                   DataWrite(80); //41
172:                   DataWrite(84); //42
173:                   DataWrite(88); //43
174:                   DataWrite(92); //44
175:                   DataWrite(96); //45
176:                   DataWrite(100); //46
177:                   DataWrite(104); //47
178:                   DataWrite(108); //48
179:                   DataWrite(112); //49
180:                   DataWrite(116); //50
181:                   DataWrite(120); //51
182:                   DataWrite(125); //52
183:                   DataWrite(130); //53
184:                   DataWrite(135); //54
185:                   DataWrite(140); //55
186:                   DataWrite(145); //56
187:                   DataWrite(150); //57
188:                   DataWrite(155); //58
189:                   DataWrite(160); //59
190:                   DataWrite(165); //60
191:                   DataWrite(170); //61
192:                   DataWrite(175); //62
193:                   DataWrite(180); //63
194:                   */
195:                   ComWrite(0xbb); // Set pre-charge voltage of color A B C
196:                   DataWrite(0x17);
197:                   ComWrite(0xbe); // Set VcomH
198:                   DataWrite(0x05);
199:                   ComWrite(0xc1); // Set contrast current for A B C
200:                   DataWrite(0x88);
201:                   DataWrite(0x70);
202:                   DataWrite(0x88);
203:                   ComWrite(0xc7); // Set master contrast
204:                   DataWrite(0x0f);
205:                   ComWrite(0xca); // Duty
206:                   DataWrite(0x7f);
207:                   ComWrite(0xaf); // Display on
208:                   DisplayCSN();   // CSn high
209:                 }
210:                 
211:                 void DisplayPoll(void){
212:                     // If display SPI ready, and something in fifo, send it
213:                     union DisplayWord FifoData;    // Parse fifo data here
214:                     if(0==SPI1_IsTransmitterBusy()){ // SPI transmitter not busy
215:                       if(Fifo16Full(DisplayFifo)){    // We have data to send
216:                         FifoData.word=Fifo16Get(DisplayFifo); // Get a word from the fifo
217:                         switch(FifoData.ChipSelect){        // allow for a bunch of chip selects
218:                           case 1:                         // talking to display
219:                             DISPLAY_CSn_Clear();             // Make chip select low
220:                             if(FifoData.CommandBit){        // This is a command
221:                               DISPLAY_DATA_CMDn_Clear();      // Pin low for command
222:                             }else{ 
223:                               DISPLAY_DATA_CMDn_Set();       // and high for data
224:                             }
225:                             SPI1BUF=(uint32_t)FifoData.data;    // Send the byte
226:                            break;
227:                           case 0:
228:                             DISPLAY_CSn_Set();               // chip select high
229:                         }    
230:                       }  
231:                     }
232:                 }
233:                 uint8_t ColorHi=0x40, ColorLo=0;
234:                 void DisplayWriteNextPixel(uint8_t r, uint8_t g, uint8_t b){
235:                     // Write next pixel in display RAM.
236:                     union{
237:                         uint8_t byte[2];
238:                         struct{
239:                             uint8_t blue:5;
240:                             uint8_t green:6;
241:                             uint8_t red:5;
242:                         };
243:                     }color;
244:                     color.byte[0]=0;
245:                     color.byte[1]=0;
246:                     color.red=r>>3;     // Align msb
247:                     color.green=g>>2;
248:                     color.red=b>>3;
249:                     ComWrite(0x5c);     // write to RAM command
250:                     DataWrite(color.byte[1]);       // Write high byte of color
251:                     DataWrite(color.byte[0]);       // and low byte
252:                     DisplayCSN();       // put chip deselect in fifo
253:                 }
254:                 
255:                 void DisplaySetXY(uint8_t x, uint8_t y){
256:                     ComWrite(0x15);
257:                     DataWrite(x);       // Set column address
258:                     DataWrite(127);     // End column. Use default. Wraps around on this column
259:                     ComWrite(0x75);     // Note ComWrite sets CSN high before setting low to start command
260:                     DataWrite(y);       // Set row address
261:                     DataWrite(127);
262:                     DisplayCSN();
263:                 }
264:                 
265:                 void DisplayWritePixel(uint8_t x, uint8_t y, uint8_t r, uint8_t g, uint8_t b){
266:                     DisplaySetXY(x,y);
267:                     DisplayWriteNextPixel(r,g,b);
268:                     DisplayCSN();
269:                 }
270:                 
271:                 void DisplayClear(void){
272:                     // Write black pixels to entire display
273:                     int n;
274:                     DisplaySetXY(0,0);
275:                     for(n=0;n<128*128;n++){
276:                          DisplayWriteNextPixel(0,0,0);
277:                     }    
278:                     DisplayCSN();
279:                 }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D009D10  27BDFFE8   ADDIU SP, SP, -24
9D009D14  AFBF0014   SW RA, 20(SP)
9D009D18  AFBE0010   SW FP, 16(SP)
9D009D1C  03A0F025   OR FP, SP, ZERO
9D009D20  24040400   ADDIU A0, ZERO, 1024
9D009D24  0F4040FE   JAL Fifo16Create
9D009D28  00000000   NOP
9D009D2C  AF8280E0   SW V0, -32544(GP)
9D009D30  8F8280E0   LW V0, -32544(GP)
9D009D34  14400005   BNE V0, ZERO, 0x9D009D4C
9D009D38  00000000   NOP
9D009D3C  3C029D01   LUI V0, -25343
9D009D40  24441AD4   ADDIU A0, V0, 6868
9D009D44  0F404466   JAL PrintString
9D009D48  00000000   NOP
9D009D4C  3C02BF86   LUI V0, -16506
9D009D50  24034000   ADDIU V1, ZERO, 16384
9D009D54  AC430238   SW V1, 568(V0)
9D009D58  0F404519   JAL DisplayCSN
9D009D5C  00000000   NOP
9D009D60  24020050   ADDIU V0, ZERO, 80
9D009D64  A7828074   SH V0, -32652(GP)
9D009D68  00000000   NOP
9D009D6C  97828074   LHU V0, -32652(GP)
9D009D70  7C021620   SEH V0, V0
9D009D74  1C40FFFD   BGTZ V0, 0x9D009D6C
9D009D78  00000000   NOP
9D009D7C  3C02BF86   LUI V0, -16506
9D009D80  24030001   ADDIU V1, ZERO, 1
9D009D84  AC430334   SW V1, 820(V0)
9D009D88  24020002   ADDIU V0, ZERO, 2
9D009D8C  A7828074   SH V0, -32652(GP)
9D009D90  00000000   NOP
9D009D94  97828074   LHU V0, -32652(GP)
9D009D98  7C021620   SEH V0, V0
9D009D9C  1C40FFFD   BGTZ V0, 0x9D009D94
9D009DA0  00000000   NOP
9D009DA4  3C02BF86   LUI V0, -16506
9D009DA8  24030001   ADDIU V1, ZERO, 1
9D009DAC  AC430338   SW V1, 824(V0)
9D009DB0  24020011   ADDIU V0, ZERO, 17
9D009DB4  A7828074   SH V0, -32652(GP)
9D009DB8  00000000   NOP
9D009DBC  97828074   LHU V0, -32652(GP)
9D009DC0  7C021620   SEH V0, V0
9D009DC4  1C40FFFD   BGTZ V0, 0x9D009DBC
9D009DC8  00000000   NOP
9D009DCC  240400FD   ADDIU A0, ZERO, 253
9D009DD0  0F404318   JAL ComWrite
9D009DD4  00000000   NOP
9D009DD8  240400B1   ADDIU A0, ZERO, 177
9D009DDC  0F404479   JAL DataWrite
9D009DE0  00000000   NOP
9D009DE4  240400AE   ADDIU A0, ZERO, 174
9D009DE8  0F404318   JAL ComWrite
9D009DEC  00000000   NOP
9D009DF0  24040015   ADDIU A0, ZERO, 21
9D009DF4  0F404318   JAL ComWrite
9D009DF8  00000000   NOP
9D009DFC  00002025   OR A0, ZERO, ZERO
9D009E00  0F404479   JAL DataWrite
9D009E04  00000000   NOP
9D009E08  2404007F   ADDIU A0, ZERO, 127
9D009E0C  0F404479   JAL DataWrite
9D009E10  00000000   NOP
9D009E14  24040075   ADDIU A0, ZERO, 117
9D009E18  0F404318   JAL ComWrite
9D009E1C  00000000   NOP
9D009E20  00002025   OR A0, ZERO, ZERO
9D009E24  0F404479   JAL DataWrite
9D009E28  00000000   NOP
9D009E2C  2404007F   ADDIU A0, ZERO, 127
9D009E30  0F404479   JAL DataWrite
9D009E34  00000000   NOP
9D009E38  240400A0   ADDIU A0, ZERO, 160
9D009E3C  0F404318   JAL ComWrite
9D009E40  00000000   NOP
9D009E44  24040065   ADDIU A0, ZERO, 101
9D009E48  0F404479   JAL DataWrite
9D009E4C  00000000   NOP
9D009E50  240400A2   ADDIU A0, ZERO, 162
9D009E54  0F404318   JAL ComWrite
9D009E58  00000000   NOP
9D009E5C  00002025   OR A0, ZERO, ZERO
9D009E60  0F404479   JAL DataWrite
9D009E64  00000000   NOP
9D009E68  240400A6   ADDIU A0, ZERO, 166
9D009E6C  0F404318   JAL ComWrite
9D009E70  00000000   NOP
9D009E74  240400AB   ADDIU A0, ZERO, 171
9D009E78  0F404318   JAL ComWrite
9D009E7C  00000000   NOP
9D009E80  24040001   ADDIU A0, ZERO, 1
9D009E84  0F404479   JAL DataWrite
9D009E88  00000000   NOP
9D009E8C  240400AF   ADDIU A0, ZERO, 175
9D009E90  0F404318   JAL ComWrite
9D009E94  00000000   NOP
9D009E98  240400B1   ADDIU A0, ZERO, 177
9D009E9C  0F404318   JAL ComWrite
9D009EA0  00000000   NOP
9D009EA4  24040032   ADDIU A0, ZERO, 50
9D009EA8  0F404479   JAL DataWrite
9D009EAC  00000000   NOP
9D009EB0  240400B3   ADDIU A0, ZERO, 179
9D009EB4  0F404318   JAL ComWrite
9D009EB8  00000000   NOP
9D009EBC  240400F1   ADDIU A0, ZERO, 241
9D009EC0  0F404479   JAL DataWrite
9D009EC4  00000000   NOP
9D009EC8  240400B4   ADDIU A0, ZERO, 180
9D009ECC  0F404318   JAL ComWrite
9D009ED0  00000000   NOP
9D009ED4  240400A0   ADDIU A0, ZERO, 160
9D009ED8  0F404479   JAL DataWrite
9D009EDC  00000000   NOP
9D009EE0  240400B5   ADDIU A0, ZERO, 181
9D009EE4  0F404479   JAL DataWrite
9D009EE8  00000000   NOP
9D009EEC  24040055   ADDIU A0, ZERO, 85
9D009EF0  0F404479   JAL DataWrite
9D009EF4  00000000   NOP
9D009EF8  240400B5   ADDIU A0, ZERO, 181
9D009EFC  0F404318   JAL ComWrite
9D009F00  00000000   NOP
9D009F04  2404000B   ADDIU A0, ZERO, 11
9D009F08  0F404479   JAL DataWrite
9D009F0C  00000000   NOP
9D009F10  240400B6   ADDIU A0, ZERO, 182
9D009F14  0F404318   JAL ComWrite
9D009F18  00000000   NOP
9D009F1C  24040001   ADDIU A0, ZERO, 1
9D009F20  0F404479   JAL DataWrite
9D009F24  00000000   NOP
9D009F28  240400BB   ADDIU A0, ZERO, 187
9D009F2C  0F404318   JAL ComWrite
9D009F30  00000000   NOP
9D009F34  24040017   ADDIU A0, ZERO, 23
9D009F38  0F404479   JAL DataWrite
9D009F3C  00000000   NOP
9D009F40  240400BE   ADDIU A0, ZERO, 190
9D009F44  0F404318   JAL ComWrite
9D009F48  00000000   NOP
9D009F4C  24040005   ADDIU A0, ZERO, 5
9D009F50  0F404479   JAL DataWrite
9D009F54  00000000   NOP
9D009F58  240400C1   ADDIU A0, ZERO, 193
9D009F5C  0F404318   JAL ComWrite
9D009F60  00000000   NOP
9D009F64  24040088   ADDIU A0, ZERO, 136
9D009F68  0F404479   JAL DataWrite
9D009F6C  00000000   NOP
9D009F70  24040070   ADDIU A0, ZERO, 112
9D009F74  0F404479   JAL DataWrite
9D009F78  00000000   NOP
9D009F7C  24040088   ADDIU A0, ZERO, 136
9D009F80  0F404479   JAL DataWrite
9D009F84  00000000   NOP
9D009F88  240400C7   ADDIU A0, ZERO, 199
9D009F8C  0F404318   JAL ComWrite
9D009F90  00000000   NOP
9D009F94  2404000F   ADDIU A0, ZERO, 15
9D009F98  0F404479   JAL DataWrite
9D009F9C  00000000   NOP
9D009FA0  240400CA   ADDIU A0, ZERO, 202
9D009FA4  0F404318   JAL ComWrite
9D009FA8  00000000   NOP
9D009FAC  2404007F   ADDIU A0, ZERO, 127
9D009FB0  0F404479   JAL DataWrite
9D009FB4  00000000   NOP
9D009FB8  240400AF   ADDIU A0, ZERO, 175
9D009FBC  0F404318   JAL ComWrite
9D009FC0  00000000   NOP
9D009FC4  0F404519   JAL DisplayCSN
9D009FC8  00000000   NOP
9D009FCC  00000000   NOP
9D009FD0  03C0E825   OR SP, FP, ZERO
9D009FD4  8FBF0014   LW RA, 20(SP)
9D009FD8  8FBE0010   LW FP, 16(SP)
9D009FDC  27BD0018   ADDIU SP, SP, 24
9D009FE0  03E00008   JR RA
9D009FE4  00000000   NOP
9D00DDCC  27BDFFE0   ADDIU SP, SP, -32
9D00DDD0  AFBF001C   SW RA, 28(SP)
9D00DDD4  AFBE0018   SW FP, 24(SP)
9D00DDD8  03A0F025   OR FP, SP, ZERO
9D00DDDC  0F4045CE   JAL SPI1_IsTransmitterBusy
9D00DDE0  00000000   NOP
9D00DDE4  38420001   XORI V0, V0, 1
9D00DDE8  304200FF   ANDI V0, V0, 255
9D00DDEC  1040002F   BEQ V0, ZERO, 0x9D00DEAC
9D00DDF0  00000000   NOP
9D00DDF4  8F8280E0   LW V0, -32544(GP)
9D00DDF8  00402025   OR A0, V0, ZERO
9D00DDFC  0F404656   JAL Fifo16Full
9D00DE00  00000000   NOP
9D00DE04  10400029   BEQ V0, ZERO, 0x9D00DEAC
9D00DE08  00000000   NOP
9D00DE0C  8F8280E0   LW V0, -32544(GP)
9D00DE10  00402025   OR A0, V0, ZERO
9D00DE14  0F403CA4   JAL Fifo16Get
9D00DE18  00000000   NOP
9D00DE1C  A7C20010   SH V0, 16(FP)
9D00DE20  8FC20010   LW V0, 16(FP)
9D00DE24  7C423200   EXT V0, V0, 8, 7
9D00DE28  304200FF   ANDI V0, V0, 255
9D00DE2C  1040001A   BEQ V0, ZERO, 0x9D00DE98
9D00DE30  00000000   NOP
9D00DE34  24030001   ADDIU V1, ZERO, 1
9D00DE38  1443001D   BNE V0, V1, 0x9D00DEB0
9D00DE3C  00000000   NOP
9D00DE40  3C02BF86   LUI V0, -16506
9D00DE44  24034000   ADDIU V1, ZERO, 16384
9D00DE48  AC430234   SW V1, 564(V0)
9D00DE4C  93C20011   LBU V0, 17(FP)
9D00DE50  7C023004   INS V0, ZERO, 0, 7
9D00DE54  304200FF   ANDI V0, V0, 255
9D00DE58  10400006   BEQ V0, ZERO, 0x9D00DE74
9D00DE5C  00000000   NOP
9D00DE60  3C02BF86   LUI V0, -16506
9D00DE64  24032000   ADDIU V1, ZERO, 8192
9D00DE68  AC430234   SW V1, 564(V0)
9D00DE6C  10000004   BEQ ZERO, ZERO, 0x9D00DE80
9D00DE70  00000000   NOP
9D00DE74  3C02BF86   LUI V0, -16506
9D00DE78  24032000   ADDIU V1, ZERO, 8192
9D00DE7C  AC430238   SW V1, 568(V0)
9D00DE80  93C20010   LBU V0, 16(FP)
9D00DE84  00401825   OR V1, V0, ZERO
9D00DE88  3C02BF82   LUI V0, -16510
9D00DE8C  AC431020   SW V1, 4128(V0)
9D00DE90  10000007   BEQ ZERO, ZERO, 0x9D00DEB0
9D00DE94  00000000   NOP
9D00DE98  3C02BF86   LUI V0, -16506
9D00DE9C  24034000   ADDIU V1, ZERO, 16384
9D00DEA0  AC430238   SW V1, 568(V0)
9D00DEA4  10000002   BEQ ZERO, ZERO, 0x9D00DEB0
9D00DEA8  00000000   NOP
9D00DEAC  00000000   NOP
9D00DEB0  00000000   NOP
9D00DEB4  03C0E825   OR SP, FP, ZERO
9D00DEB8  8FBF001C   LW RA, 28(SP)
9D00DEBC  8FBE0018   LW FP, 24(SP)
9D00DEC0  27BD0020   ADDIU SP, SP, 32
9D00DEC4  03E00008   JR RA
9D00DEC8  00000000   NOP
9D00E3B4  27BDFFE0   ADDIU SP, SP, -32
9D00E3B8  AFBF001C   SW RA, 28(SP)
9D00E3BC  AFBE0018   SW FP, 24(SP)
9D00E3C0  03A0F025   OR FP, SP, ZERO
9D00E3C4  00801025   OR V0, A0, ZERO
9D00E3C8  00A02025   OR A0, A1, ZERO
9D00E3CC  00C01825   OR V1, A2, ZERO
9D00E3D0  A3C20020   SB V0, 32(FP)
9D00E3D4  00801025   OR V0, A0, ZERO
9D00E3D8  A3C20024   SB V0, 36(FP)
9D00E3DC  00601025   OR V0, V1, ZERO
9D00E3E0  A3C20028   SB V0, 40(FP)
9D00E3E4  A3C00010   SB ZERO, 16(FP)
9D00E3E8  A3C00011   SB ZERO, 17(FP)
9D00E3EC  93C20020   LBU V0, 32(FP)
9D00E3F0  000210C2   SRL V0, V0, 3
9D00E3F4  304200FF   ANDI V0, V0, 255
9D00E3F8  3042001F   ANDI V0, V0, 31
9D00E3FC  304300FF   ANDI V1, V0, 255
9D00E400  93C20012   LBU V0, 18(FP)
9D00E404  7C622004   INS V0, V1, 0, 5
9D00E408  A3C20012   SB V0, 18(FP)
9D00E40C  93C20024   LBU V0, 36(FP)
9D00E410  00021082   SRL V0, V0, 2
9D00E414  304200FF   ANDI V0, V0, 255
9D00E418  3042003F   ANDI V0, V0, 63
9D00E41C  304300FF   ANDI V1, V0, 255
9D00E420  97C20010   LHU V0, 16(FP)
9D00E424  7C626A04   INS V0, V1, 8, 6
9D00E428  A7C20010   SH V0, 16(FP)
9D00E42C  93C20028   LBU V0, 40(FP)
9D00E430  000210C2   SRL V0, V0, 3
9D00E434  304200FF   ANDI V0, V0, 255
9D00E438  3042001F   ANDI V0, V0, 31
9D00E43C  304300FF   ANDI V1, V0, 255
9D00E440  93C20012   LBU V0, 18(FP)
9D00E444  7C622004   INS V0, V1, 0, 5
9D00E448  A3C20012   SB V0, 18(FP)
9D00E44C  2404005C   ADDIU A0, ZERO, 92
9D00E450  0F404318   JAL ComWrite
9D00E454  00000000   NOP
9D00E458  93C20011   LBU V0, 17(FP)
9D00E45C  00402025   OR A0, V0, ZERO
9D00E460  0F404479   JAL DataWrite
9D00E464  00000000   NOP
9D00E468  93C20010   LBU V0, 16(FP)
9D00E46C  00402025   OR A0, V0, ZERO
9D00E470  0F404479   JAL DataWrite
9D00E474  00000000   NOP
9D00E478  0F404519   JAL DisplayCSN
9D00E47C  00000000   NOP
9D00E480  00000000   NOP
9D00E484  03C0E825   OR SP, FP, ZERO
9D00E488  8FBF001C   LW RA, 28(SP)
9D00E48C  8FBE0018   LW FP, 24(SP)
9D00E490  27BD0020   ADDIU SP, SP, 32
9D00E494  03E00008   JR RA
9D00E498  00000000   NOP
9D00EEB8  27BDFFE0   ADDIU SP, SP, -32
9D00EEBC  AFBF001C   SW RA, 28(SP)
9D00EEC0  AFBE0018   SW FP, 24(SP)
9D00EEC4  03A0F025   OR FP, SP, ZERO
9D00EEC8  00801025   OR V0, A0, ZERO
9D00EECC  00A02025   OR A0, A1, ZERO
9D00EED0  00C01825   OR V1, A2, ZERO
9D00EED4  A3C20020   SB V0, 32(FP)
9D00EED8  00801025   OR V0, A0, ZERO
9D00EEDC  A3C20024   SB V0, 36(FP)
9D00EEE0  00601025   OR V0, V1, ZERO
9D00EEE4  A3C20028   SB V0, 40(FP)
9D00EEE8  93C20020   LBU V0, 32(FP)
9D00EEEC  3042007F   ANDI V0, V0, 127
9D00EEF0  304300FF   ANDI V1, V0, 255
9D00EEF4  93C20011   LBU V0, 17(FP)
9D00EEF8  7C623004   INS V0, V1, 0, 7
9D00EEFC  A3C20011   SB V0, 17(FP)
9D00EF00  93C20024   LBU V0, 36(FP)
9D00EF04  30420001   ANDI V0, V0, 1
9D00EF08  304300FF   ANDI V1, V0, 255
9D00EF0C  93C20011   LBU V0, 17(FP)
9D00EF10  7C6239C4   INS V0, V1, 7, 1
9D00EF14  A3C20011   SB V0, 17(FP)
9D00EF18  93C20028   LBU V0, 40(FP)
9D00EF1C  A3C20010   SB V0, 16(FP)
9D00EF20  10000003   BEQ ZERO, ZERO, 0x9D00EF30
9D00EF24  00000000   NOP
9D00EF28  0F403773   JAL DisplayPoll
9D00EF2C  00000000   NOP
9D00EF30  8F8280E0   LW V0, -32544(GP)
9D00EF34  00402025   OR A0, V0, ZERO
9D00EF38  0F404661   JAL Fifo16Free
9D00EF3C  00000000   NOP
9D00EF40  2C420005   SLTIU V0, V0, 5
9D00EF44  1440FFF8   BNE V0, ZERO, 0x9D00EF28
9D00EF48  00000000   NOP
9D00EF4C  8F8280E0   LW V0, -32544(GP)
9D00EF50  97C30010   LHU V1, 16(FP)
9D00EF54  00602825   OR A1, V1, ZERO
9D00EF58  00402025   OR A0, V0, ZERO
9D00EF5C  0F403B47   JAL Fifo16Put
9D00EF60  00000000   NOP
9D00EF64  00000000   NOP
9D00EF68  03C0E825   OR SP, FP, ZERO
9D00EF6C  8FBF001C   LW RA, 28(SP)
9D00EF70  8FBE0018   LW FP, 24(SP)
9D00EF74  27BD0020   ADDIU SP, SP, 32
9D00EF78  03E00008   JR RA
9D00EF7C  00000000   NOP
9D00FC18  27BDFFE8   ADDIU SP, SP, -24
9D00FC1C  AFBF0014   SW RA, 20(SP)
9D00FC20  AFBE0010   SW FP, 16(SP)
9D00FC24  03A0F025   OR FP, SP, ZERO
9D00FC28  00801025   OR V0, A0, ZERO
9D00FC2C  00A01825   OR V1, A1, ZERO
9D00FC30  A3C20018   SB V0, 24(FP)
9D00FC34  00601025   OR V0, V1, ZERO
9D00FC38  A3C2001C   SB V0, 28(FP)
9D00FC3C  24040015   ADDIU A0, ZERO, 21
9D00FC40  0F404318   JAL ComWrite
9D00FC44  00000000   NOP
9D00FC48  93C20018   LBU V0, 24(FP)
9D00FC4C  00402025   OR A0, V0, ZERO
9D00FC50  0F404479   JAL DataWrite
9D00FC54  00000000   NOP
9D00FC58  2404007F   ADDIU A0, ZERO, 127
9D00FC5C  0F404479   JAL DataWrite
9D00FC60  00000000   NOP
9D00FC64  24040075   ADDIU A0, ZERO, 117
9D00FC68  0F404318   JAL ComWrite
9D00FC6C  00000000   NOP
9D00FC70  93C2001C   LBU V0, 28(FP)
9D00FC74  00402025   OR A0, V0, ZERO
9D00FC78  0F404479   JAL DataWrite
9D00FC7C  00000000   NOP
9D00FC80  2404007F   ADDIU A0, ZERO, 127
9D00FC84  0F404479   JAL DataWrite
9D00FC88  00000000   NOP
9D00FC8C  0F404519   JAL DisplayCSN
9D00FC90  00000000   NOP
9D00FC94  00000000   NOP
9D00FC98  03C0E825   OR SP, FP, ZERO
9D00FC9C  8FBF0014   LW RA, 20(SP)
9D00FCA0  8FBE0010   LW FP, 16(SP)
9D00FCA4  27BD0018   ADDIU SP, SP, 24
9D00FCA8  03E00008   JR RA
9D00FCAC  00000000   NOP
9D00FD48  27BDFFE8   ADDIU SP, SP, -24
9D00FD4C  AFBF0014   SW RA, 20(SP)
9D00FD50  AFBE0010   SW FP, 16(SP)
9D00FD54  03A0F025   OR FP, SP, ZERO
9D00FD58  00801025   OR V0, A0, ZERO
9D00FD5C  00C02025   OR A0, A2, ZERO
9D00FD60  00E01825   OR V1, A3, ZERO
9D00FD64  A3C20018   SB V0, 24(FP)
9D00FD68  00A01025   OR V0, A1, ZERO
9D00FD6C  A3C2001C   SB V0, 28(FP)
9D00FD70  00801025   OR V0, A0, ZERO
9D00FD74  A3C20020   SB V0, 32(FP)
9D00FD78  00601025   OR V0, V1, ZERO
9D00FD7C  A3C20024   SB V0, 36(FP)
9D00FD80  93C3001C   LBU V1, 28(FP)
9D00FD84  93C20018   LBU V0, 24(FP)
9D00FD88  00602825   OR A1, V1, ZERO
9D00FD8C  00402025   OR A0, V0, ZERO
9D00FD90  0F403F06   JAL DisplaySetXY
9D00FD94  00000000   NOP
9D00FD98  93C40028   LBU A0, 40(FP)
9D00FD9C  93C30024   LBU V1, 36(FP)
9D00FDA0  93C20020   LBU V0, 32(FP)
9D00FDA4  00803025   OR A2, A0, ZERO
9D00FDA8  00602825   OR A1, V1, ZERO
9D00FDAC  00402025   OR A0, V0, ZERO
9D00FDB0  0F4038ED   JAL DisplayWriteNextPixel
9D00FDB4  00000000   NOP
9D00FDB8  0F404519   JAL DisplayCSN
9D00FDBC  00000000   NOP
9D00FDC0  00000000   NOP
9D00FDC4  03C0E825   OR SP, FP, ZERO
9D00FDC8  8FBF0014   LW RA, 20(SP)
9D00FDCC  8FBE0010   LW FP, 16(SP)
9D00FDD0  27BD0018   ADDIU SP, SP, 24
9D00FDD4  03E00008   JR RA
9D00FDD8  00000000   NOP
9D01060C  27BDFFE0   ADDIU SP, SP, -32
9D010610  AFBF001C   SW RA, 28(SP)
9D010614  AFBE0018   SW FP, 24(SP)
9D010618  03A0F025   OR FP, SP, ZERO
9D01061C  00002825   OR A1, ZERO, ZERO
9D010620  00002025   OR A0, ZERO, ZERO
9D010624  0F403F06   JAL DisplaySetXY
9D010628  00000000   NOP
9D01062C  AFC00010   SW ZERO, 16(FP)
9D010630  10000009   BEQ ZERO, ZERO, 0x9D010658
9D010634  00000000   NOP
9D010638  00003025   OR A2, ZERO, ZERO
9D01063C  00002825   OR A1, ZERO, ZERO
9D010640  00002025   OR A0, ZERO, ZERO
9D010644  0F4038ED   JAL DisplayWriteNextPixel
9D010648  00000000   NOP
9D01064C  8FC20010   LW V0, 16(FP)
9D010650  24420001   ADDIU V0, V0, 1
9D010654  AFC20010   SW V0, 16(FP)
9D010658  8FC20010   LW V0, 16(FP)
9D01065C  28424000   SLTI V0, V0, 16384
9D010660  1440FFF5   BNE V0, ZERO, 0x9D010638
9D010664  00000000   NOP
9D010668  0F404519   JAL DisplayCSN
9D01066C  00000000   NOP
9D010670  00000000   NOP
9D010674  03C0E825   OR SP, FP, ZERO
9D010678  8FBF001C   LW RA, 28(SP)
9D01067C  8FBE0018   LW FP, 24(SP)
9D010680  27BD0020   ADDIU SP, SP, 32
9D010684  03E00008   JR RA
9D010688  00000000   NOP
9D010C60  27BDFFE8   ADDIU SP, SP, -24
9D010C64  AFBF0014   SW RA, 20(SP)
9D010C68  AFBE0010   SW FP, 16(SP)
9D010C6C  03A0F025   OR FP, SP, ZERO
9D010C70  00801025   OR V0, A0, ZERO
9D010C74  A3C20018   SB V0, 24(FP)
9D010C78  00003025   OR A2, ZERO, ZERO
9D010C7C  00002825   OR A1, ZERO, ZERO
9D010C80  00002025   OR A0, ZERO, ZERO
9D010C84  0F403BAE   JAL DisplayFifoWrite
9D010C88  00000000   NOP
9D010C8C  93C20018   LBU V0, 24(FP)
9D010C90  00403025   OR A2, V0, ZERO
9D010C94  24050001   ADDIU A1, ZERO, 1
9D010C98  24040001   ADDIU A0, ZERO, 1
9D010C9C  0F403BAE   JAL DisplayFifoWrite
9D010CA0  00000000   NOP
9D010CA4  00000000   NOP
9D010CA8  03C0E825   OR SP, FP, ZERO
9D010CAC  8FBF0014   LW RA, 20(SP)
9D010CB0  8FBE0010   LW FP, 16(SP)
9D010CB4  27BD0018   ADDIU SP, SP, 24
9D010CB8  03E00008   JR RA
9D010CBC  00000000   NOP
9D0111E4  27BDFFE8   ADDIU SP, SP, -24
9D0111E8  AFBF0014   SW RA, 20(SP)
9D0111EC  AFBE0010   SW FP, 16(SP)
9D0111F0  03A0F025   OR FP, SP, ZERO
9D0111F4  00801025   OR V0, A0, ZERO
9D0111F8  A3C20018   SB V0, 24(FP)
9D0111FC  93C20018   LBU V0, 24(FP)
9D011200  00403025   OR A2, V0, ZERO
9D011204  00002825   OR A1, ZERO, ZERO
9D011208  24040001   ADDIU A0, ZERO, 1
9D01120C  0F403BAE   JAL DisplayFifoWrite
9D011210  00000000   NOP
9D011214  00000000   NOP
9D011218  03C0E825   OR SP, FP, ZERO
9D01121C  8FBF0014   LW RA, 20(SP)
9D011220  8FBE0010   LW FP, 16(SP)
9D011224  27BD0018   ADDIU SP, SP, 24
9D011228  03E00008   JR RA
9D01122C  00000000   NOP
9D011464  27BDFFE8   ADDIU SP, SP, -24
9D011468  AFBF0014   SW RA, 20(SP)
9D01146C  AFBE0010   SW FP, 16(SP)
9D011470  03A0F025   OR FP, SP, ZERO
9D011474  00003025   OR A2, ZERO, ZERO
9D011478  00002825   OR A1, ZERO, ZERO
9D01147C  00002025   OR A0, ZERO, ZERO
9D011480  0F403BAE   JAL DisplayFifoWrite
9D011484  00000000   NOP
9D011488  00000000   NOP
9D01148C  03C0E825   OR SP, FP, ZERO
9D011490  8FBF0014   LW RA, 20(SP)
9D011494  8FBE0010   LW FP, 16(SP)
9D011498  27BD0018   ADDIU SP, SP, 24
9D01149C  03E00008   JR RA
9D0114A0  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/dds.c  ----------------------
1:                   // DDS.c - Direct Digital Synthesis
2:                   
3:                   #include <math.h>
4:                   #include "main.h"   // typedef smp_type
5:                   
6:                   
7:                   const smp_type pi2=2.0*(smp_type)acos(-1.0);       // Precalculate 2pi
8:                   static smp_type DdsRadiansPerSample=0;
9:                   
10:                  void DdsFreqSet(smp_type freq){
11:                      // Set DdsRadiansPerSample so there is less math in DdsNextSample
12:                      DdsRadiansPerSample=freq*pi2/8000.0;
13:                  }
14:                  
15:                  smp_type DdsNextSample(void){
16:                      static smp_type angle=0;
17:                      angle+=DdsRadiansPerSample;
18:                      while(angle>=pi2) angle-=pi2;
19:                      return (smp_type)sin((double)angle);
20:                  }
21:                  
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D01080C  27BDFFE8   ADDIU SP, SP, -24
9D010810  AFBF0014   SW RA, 20(SP)
9D010814  AFBE0010   SW FP, 16(SP)
9D010818  03A0F025   OR FP, SP, ZERO
9D01081C  D78180D8   LDC1 F1, -32552(GP)
9D010820  D78080D0   LDC1 F0, -32560(GP)
9D010824  46200800   ADD.D F0, F1, F0
9D010828  F78080D8   SDC1 F0, -32552(GP)
9D01082C  10000006   BEQ ZERO, ZERO, 0x9D010848
9D010830  00000000   NOP
9D010834  D78180D8   LDC1 F1, -32552(GP)
9D010838  3C029D01   LUI V0, -25343
9D01083C  D4401CC0   LDC1 F0, 7360(V0)
9D010840  46200801   SUB.D F0, F1, F0
9D010844  F78080D8   SDC1 F0, -32552(GP)
9D010848  D78180D8   LDC1 F1, -32552(GP)
9D01084C  3C029D01   LUI V0, -25343
9D010850  D4401CC0   LDC1 F0, 7360(V0)
9D010854  4621003E   C.LE.D F0, F1
9D010858  4501FFF6   BC1T 0x9D010834
9D01085C  00000000   NOP
9D010860  D78080D8   LDC1 F0, -32552(GP)
9D010864  46200306   MOV.D F12, F0
9D010868  0F40355F   JAL sin
9D01086C  00000000   NOP
9D010870  03C0E825   OR SP, FP, ZERO
9D010874  8FBF0014   LW RA, 20(SP)
9D010878  8FBE0010   LW FP, 16(SP)
9D01087C  27BD0018   ADDIU SP, SP, 24
9D010880  03E00008   JR RA
9D010884  00000000   NOP
9D01130C  27BDFFF8   ADDIU SP, SP, -8
9D011310  AFBE0004   SW FP, 4(SP)
9D011314  03A0F025   OR FP, SP, ZERO
9D011318  F7CC0008   SDC1 F12, 8(FP)
9D01131C  3C029D01   LUI V0, -25343
9D011320  D4411CC0   LDC1 F1, 7360(V0)
9D011324  D7C00008   LDC1 F0, 8(FP)
9D011328  46200842   MUL.D F1, F1, F0
9D01132C  3C029D01   LUI V0, -25343
9D011330  D4401CC8   LDC1 F0, 7368(V0)
9D011334  46200803   DIV.D F0, F1, F0
9D011338  F78080D0   SDC1 F0, -32560(GP)
9D01133C  00000000   NOP
9D011340  03C0E825   OR SP, FP, ZERO
9D011344  8FBE0004   LW FP, 4(SP)
9D011348  27BD0008   ADDIU SP, SP, 8
9D01134C  03E00008   JR RA
9D011350  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/config/dsp_tu2/stdio/xc32_monitor.c
1:                   /*******************************************************************************
2:                    Debug Console Source file
3:                   
4:                     Company:
5:                       Microchip Technology Inc.
6:                   
7:                     File Name:
8:                       xc32_monitor.c
9:                   
10:                    Summary:
11:                      debug console Source File
12:                  
13:                    Description:
14:                      None
15:                  
16:                  *******************************************************************************/
17:                  
18:                  /*******************************************************************************
19:                  * Copyright (C) 2018 Microchip Technology Inc. and its subsidiaries.
20:                  *
21:                  * Subject to your compliance with these terms, you may use Microchip software
22:                  * and any derivatives exclusively with Microchip products. It is your
23:                  * responsibility to comply with third party license terms applicable to your
24:                  * use of third party software (including open source software) that may
25:                  * accompany Microchip software.
26:                  *
27:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
28:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
29:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
30:                  * PARTICULAR PURPOSE.
31:                  *
32:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
33:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
34:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
35:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
36:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
37:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
38:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
39:                  *******************************************************************************/
40:                  #include <stddef.h>
41:                  
42:                  extern int read(int handle, void *buffer, unsigned int len);
43:                  extern int write(int handle, void * buffer, size_t count);
44:                  
45:                  
46:                  int read(int handle, void *buffer, unsigned int len)
47:                  {
48:                     return -1;
49:                  }
50:                  
51:                  int write(int handle, void * buffer, size_t count)
52:                  {
53:                     return -1;
54:                  }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
00000018  00000000   NOP
0000001C  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/config/dsp_tu2/peripheral/uart/plib_uart1.c
1:                   /*******************************************************************************
2:                     UART1 PLIB
3:                   
4:                     Company:
5:                       Microchip Technology Inc.
6:                   
7:                     File Name:
8:                       plib_uart1.c
9:                   
10:                    Summary:
11:                      UART1 PLIB Implementation File
12:                  
13:                    Description:
14:                      None
15:                  
16:                  *******************************************************************************/
17:                  
18:                  /*******************************************************************************
19:                  * Copyright (C) 2019 Microchip Technology Inc. and its subsidiaries.
20:                  *
21:                  * Subject to your compliance with these terms, you may use Microchip software
22:                  * and any derivatives exclusively with Microchip products. It is your
23:                  * responsibility to comply with third party license terms applicable to your
24:                  * use of third party software (including open source software) that may
25:                  * accompany Microchip software.
26:                  *
27:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
28:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
29:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
30:                  * PARTICULAR PURPOSE.
31:                  *
32:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
33:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
34:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
35:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
36:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
37:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
38:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
39:                  *******************************************************************************/
40:                  
41:                  #include "device.h"
42:                  #include "plib_uart1.h"
43:                  
44:                  // *****************************************************************************
45:                  // *****************************************************************************
46:                  // Section: UART1 Implementation
47:                  // *****************************************************************************
48:                  // *****************************************************************************
49:                  
50:                  UART_RING_BUFFER_OBJECT uart1Obj;
51:                  
52:                  #define UART1_READ_BUFFER_SIZE      128
53:                  #define UART1_READ_BUFFER_SIZE_9BIT (128 >> 1)
54:                  #define UART1_RX_INT_DISABLE()      IEC3CLR = _IEC3_U1RXIE_MASK;
55:                  #define UART1_RX_INT_ENABLE()       IEC3SET = _IEC3_U1RXIE_MASK;
56:                  
57:                  static uint8_t UART1_ReadBuffer[UART1_READ_BUFFER_SIZE];
58:                  
59:                  #define UART1_WRITE_BUFFER_SIZE     6000
60:                  #define UART1_WRITE_BUFFER_SIZE_9BIT       (6000 >> 1)
61:                  #define UART1_TX_INT_DISABLE()      IEC3CLR = _IEC3_U1TXIE_MASK;
62:                  #define UART1_TX_INT_ENABLE()       IEC3SET = _IEC3_U1TXIE_MASK;
63:                  
64:                  static uint8_t UART1_WriteBuffer[UART1_WRITE_BUFFER_SIZE];
65:                  
66:                  #define UART1_IS_9BIT_MODE_ENABLED()    ( U1MODE & (_U1MODE_PDSEL0_MASK | _U1MODE_PDSEL1_MASK)) == (_U1MODE_PDSEL0_MASK | _U1MODE_PDSEL1_MASK) ? true:false
67:                  
68:                  void static UART1_ErrorClear( void )
69:                  {
70:                      UART_ERROR errors = UART_ERROR_NONE;
71:                      uint8_t dummyData = 0u;
72:                  
73:                      errors = (UART_ERROR)(U1STA & (_U1STA_OERR_MASK | _U1STA_FERR_MASK | _U1STA_PERR_MASK));
74:                  
75:                      if(errors != UART_ERROR_NONE)
76:                      {
77:                          /* If it's a overrun error then clear it to flush FIFO */
78:                          if(U1STA & _U1STA_OERR_MASK)
79:                          {
80:                              U1STACLR = _U1STA_OERR_MASK;
81:                          }
82:                  
83:                          /* Read existing error bytes from FIFO to clear parity and framing error flags */
84:                          while(U1STA & _U1STA_URXDA_MASK)
85:                          {
86:                              dummyData = U1RXREG;
87:                          }
88:                  
89:                          /* Clear error interrupt flag */
90:                          IFS3CLR = _IFS3_U1EIF_MASK;
91:                  
92:                          /* Clear up the receive interrupt flag so that RX interrupt is not
93:                           * triggered for error bytes */
94:                          IFS3CLR = _IFS3_U1RXIF_MASK;
95:                  
96:                      }
97:                  
98:                      // Ignore the warning
99:                      (void)dummyData;
100:                 }
101:                 
102:                 void UART1_Initialize( void )
103:                 {
104:                     /* Set up UxMODE bits */
105:                     /* STSEL  = 0 */
106:                     /* PDSEL = 0 */
107:                 
108:                     U1MODE = 0x208;
109:                 
110:                     /* Enable UART1 Receiver and Transmitter */
111:                     U1STASET = (_U1STA_UTXEN_MASK | _U1STA_URXEN_MASK | _U1STA_UTXISEL1_MASK );
112:                 
113:                     /* BAUD Rate register Setup */
114:                     U1BRG = 26;
115:                 
116:                     /* Disable Interrupts */
117:                     IEC3CLR = _IEC3_U1EIE_MASK;
118:                 
119:                     IEC3CLR = _IEC3_U1RXIE_MASK;
120:                 
121:                     IEC3CLR = _IEC3_U1TXIE_MASK;
122:                 
123:                     /* Initialize instance object */
124:                     uart1Obj.rdCallback = NULL;
125:                     uart1Obj.rdInIndex = 0;
126:                     uart1Obj.rdOutIndex = 0;
127:                     uart1Obj.isRdNotificationEnabled = false;
128:                     uart1Obj.isRdNotifyPersistently = false;
129:                     uart1Obj.rdThreshold = 0;
130:                 
131:                     uart1Obj.wrCallback = NULL;
132:                     uart1Obj.wrInIndex = 0;
133:                     uart1Obj.wrOutIndex = 0;
134:                     uart1Obj.isWrNotificationEnabled = false;
135:                     uart1Obj.isWrNotifyPersistently = false;
136:                     uart1Obj.wrThreshold = 0;
137:                 
138:                     uart1Obj.errors = UART_ERROR_NONE;
139:                 
140:                     if (UART1_IS_9BIT_MODE_ENABLED())
141:                     {
142:                         uart1Obj.rdBufferSize = UART1_READ_BUFFER_SIZE_9BIT;
143:                         uart1Obj.wrBufferSize = UART1_WRITE_BUFFER_SIZE_9BIT;
144:                     }
145:                     else
146:                     {
147:                         uart1Obj.rdBufferSize = UART1_READ_BUFFER_SIZE;
148:                         uart1Obj.wrBufferSize = UART1_WRITE_BUFFER_SIZE;
149:                     }
150:                 
151:                 
152:                     /* Turn ON UART1 */
153:                     U1MODESET = _U1MODE_ON_MASK;
154:                 
155:                     /* Enable UART1_FAULT Interrupt */
156:                     IEC3SET = _IEC3_U1EIE_MASK;
157:                 
158:                     /* Enable UART1_RX Interrupt */
159:                     IEC3SET = _IEC3_U1RXIE_MASK;
160:                 }
161:                 
162:                 bool UART1_SerialSetup( UART_SERIAL_SETUP *setup, uint32_t srcClkFreq )
163:                 {
164:                     bool status = false;
165:                     uint32_t baud;
166:                     uint32_t status_ctrl;
167:                     uint8_t brgh = 1;
168:                     int32_t uxbrg = 0;
169:                 
170:                     if (setup != NULL)
171:                     {
172:                         baud = setup->baudRate;
173:                 
174:                         if ((baud == 0) || ((setup->dataWidth == UART_DATA_9_BIT) && (setup->parity != UART_PARITY_NONE)))
175:                         {
176:                             return status;
177:                         }
178:                 
179:                         if(srcClkFreq == 0)
180:                         {
181:                             srcClkFreq = UART1_FrequencyGet();
182:                         }
183:                 
184:                          /* Calculate BRG value */
185:                         if (brgh == 0)
186:                         {
187:                             uxbrg = (((srcClkFreq >> 4) + (baud >> 1)) / baud ) - 1;
188:                         }
189:                         else
190:                         {
191:                             uxbrg = (((srcClkFreq >> 2) + (baud >> 1)) / baud ) - 1;
192:                         }
193:                 
194:                         /* Check if the baud value can be set with low baud settings */
195:                         if((uxbrg < 0) || (uxbrg > UINT16_MAX))
196:                         {
197:                             return status;
198:                         }
199:                 
200:                         /* Turn OFF UART1. Save UTXEN, URXEN and UTXBRK bits as these are cleared upon disabling UART */
201:                 
202:                         status_ctrl = U1STA & (_U1STA_UTXEN_MASK | _U1STA_URXEN_MASK | _U1STA_UTXBRK_MASK);
203:                 
204:                         U1MODECLR = _U1MODE_ON_MASK;
205:                 
206:                         if(setup->dataWidth == UART_DATA_9_BIT)
207:                         {
208:                             /* Configure UART1 mode */
209:                             U1MODE = (U1MODE & (~_U1MODE_PDSEL_MASK)) | setup->dataWidth;
210:                         }
211:                         else
212:                         {
213:                             /* Configure UART1 mode */
214:                             U1MODE = (U1MODE & (~_U1MODE_PDSEL_MASK)) | setup->parity;
215:                         }
216:                 
217:                         /* Configure UART1 mode */
218:                         U1MODE = (U1MODE & (~_U1MODE_STSEL_MASK)) | setup->stopBits;
219:                 
220:                         /* Configure UART1 Baud Rate */
221:                         U1BRG = uxbrg;
222:                 
223:                         if (UART1_IS_9BIT_MODE_ENABLED())
224:                         {
225:                             uart1Obj.rdBufferSize = UART1_READ_BUFFER_SIZE_9BIT;
226:                             uart1Obj.wrBufferSize = UART1_WRITE_BUFFER_SIZE_9BIT;
227:                         }
228:                         else
229:                         {
230:                             uart1Obj.rdBufferSize = UART1_READ_BUFFER_SIZE;
231:                             uart1Obj.wrBufferSize = UART1_WRITE_BUFFER_SIZE;
232:                         }
233:                 
234:                         U1MODESET = _U1MODE_ON_MASK;
235:                 
236:                         /* Restore UTXEN, URXEN and UTXBRK bits. */
237:                         U1STASET = status_ctrl;
238:                 
239:                         status = true;
240:                     }
241:                 
242:                     return status;
243:                 }
244:                 
245:                 /* This routine is only called from ISR. Hence do not disable/enable USART interrupts. */
246:                 static inline bool UART1_RxPushByte(uint16_t rdByte)
247:                 {
248:                     uint32_t tempInIndex;
249:                     bool isSuccess = false;
250:                 
251:                     tempInIndex = uart1Obj.rdInIndex + 1;
252:                 
253:                     if (tempInIndex >= uart1Obj.rdBufferSize)
254:                     {
255:                         tempInIndex = 0;
256:                     }
257:                 
258:                     if (tempInIndex == uart1Obj.rdOutIndex)
259:                     {
260:                         /* Queue is full - Report it to the application. Application gets a chance to free up space by reading data out from the RX ring buffer */
261:                         if(uart1Obj.rdCallback != NULL)
262:                         {
263:                             uart1Obj.rdCallback(UART_EVENT_READ_BUFFER_FULL, uart1Obj.rdContext);
264:                 
265:                             /* Read the indices again in case application has freed up space in RX ring buffer */
266:                             tempInIndex = uart1Obj.rdInIndex + 1;
267:                 
268:                             if (tempInIndex >= uart1Obj.rdBufferSize)
269:                             {
270:                                 tempInIndex = 0;
271:                             }
272:                         }
273:                     }
274:                 
275:                     /* Attempt to push the data into the ring buffer */
276:                     if (tempInIndex != uart1Obj.rdOutIndex)
277:                     {
278:                         if (UART1_IS_9BIT_MODE_ENABLED())
279:                         {
280:                             ((uint16_t*)&UART1_ReadBuffer)[uart1Obj.rdInIndex] = rdByte;
281:                         }
282:                         else
283:                         {
284:                             UART1_ReadBuffer[uart1Obj.rdInIndex] = (uint8_t)rdByte;
285:                         }
286:                 
287:                         uart1Obj.rdInIndex = tempInIndex;
288:                 
289:                         isSuccess = true;
290:                     }
291:                     else
292:                     {
293:                         /* Queue is full. Data will be lost. */
294:                     }
295:                 
296:                     return isSuccess;
297:                 }
298:                 
299:                 /* This routine is only called from ISR. Hence do not disable/enable USART interrupts. */
300:                 static void UART1_ReadNotificationSend(void)
301:                 {
302:                     uint32_t nUnreadBytesAvailable;
303:                 
304:                     if (uart1Obj.isRdNotificationEnabled == true)
305:                     {
306:                         nUnreadBytesAvailable = UART1_ReadCountGet();
307:                 
308:                         if(uart1Obj.rdCallback != NULL)
309:                         {
310:                             if (uart1Obj.isRdNotifyPersistently == true)
311:                             {
312:                                 if (nUnreadBytesAvailable >= uart1Obj.rdThreshold)
313:                                 {
314:                                     uart1Obj.rdCallback(UART_EVENT_READ_THRESHOLD_REACHED, uart1Obj.rdContext);
315:                                 }
316:                             }
317:                             else
318:                             {
319:                                 if (nUnreadBytesAvailable == uart1Obj.rdThreshold)
320:                                 {
321:                                     uart1Obj.rdCallback(UART_EVENT_READ_THRESHOLD_REACHED, uart1Obj.rdContext);
322:                                 }
323:                             }
324:                         }
325:                     }
326:                 }
327:                 
328:                 size_t UART1_Read(uint8_t* pRdBuffer, const size_t size)
329:                 {
330:                     size_t nBytesRead = 0;
331:                     uint32_t rdOutIndex = 0;
332:                     uint32_t rdInIndex = 0;
333:                 
334:                     /* Take a snapshot of indices to avoid creation of critical section */
335:                     rdOutIndex = uart1Obj.rdOutIndex;
336:                     rdInIndex = uart1Obj.rdInIndex;
337:                 
338:                     while (nBytesRead < size)
339:                     {
340:                         if (rdOutIndex != rdInIndex)
341:                         {
342:                             if (UART1_IS_9BIT_MODE_ENABLED())
343:                             {
344:                                 ((uint16_t*)pRdBuffer)[nBytesRead++] = ((uint16_t*)&UART1_ReadBuffer)[rdOutIndex++];
345:                             }
346:                             else
347:                             {
348:                                 pRdBuffer[nBytesRead++] = UART1_ReadBuffer[rdOutIndex++];
349:                             }
350:                 
351:                             if (rdOutIndex >= uart1Obj.rdBufferSize)
352:                             {
353:                                 rdOutIndex = 0;
354:                             }
355:                         }
356:                         else
357:                         {
358:                             /* No more data available in the RX buffer */
359:                             break;
360:                         }
361:                     }
362:                 
363:                     uart1Obj.rdOutIndex = rdOutIndex;
364:                 
365:                     return nBytesRead;
366:                 }
367:                 
368:                 size_t UART1_ReadCountGet(void)
369:                 {
370:                     size_t nUnreadBytesAvailable;
371:                     uint32_t rdInIndex;
372:                     uint32_t rdOutIndex;
373:                 
374:                     /* Take a snapshot of indices to avoid processing in critical section */
375:                     rdInIndex = uart1Obj.rdInIndex;
376:                     rdOutIndex = uart1Obj.rdOutIndex;
377:                 
378:                     if ( rdInIndex >=  rdOutIndex)
379:                     {
380:                         nUnreadBytesAvailable =  rdInIndex -  rdOutIndex;
381:                     }
382:                     else
383:                     {
384:                         nUnreadBytesAvailable =  (uart1Obj.rdBufferSize -  rdOutIndex) + rdInIndex;
385:                     }
386:                 
387:                     return nUnreadBytesAvailable;
388:                 }
389:                 
390:                 size_t UART1_ReadFreeBufferCountGet(void)
391:                 {
392:                     return (uart1Obj.rdBufferSize - 1) - UART1_ReadCountGet();
393:                 }
394:                 
395:                 size_t UART1_ReadBufferSizeGet(void)
396:                 {
397:                     return (uart1Obj.rdBufferSize - 1);
398:                 }
399:                 
400:                 bool UART1_ReadNotificationEnable(bool isEnabled, bool isPersistent)
401:                 {
402:                     bool previousStatus = uart1Obj.isRdNotificationEnabled;
403:                 
404:                     uart1Obj.isRdNotificationEnabled = isEnabled;
405:                 
406:                     uart1Obj.isRdNotifyPersistently = isPersistent;
407:                 
408:                     return previousStatus;
409:                 }
410:                 
411:                 void UART1_ReadThresholdSet(uint32_t nBytesThreshold)
412:                 {
413:                     if (nBytesThreshold > 0)
414:                     {
415:                         uart1Obj.rdThreshold = nBytesThreshold;
416:                     }
417:                 }
418:                 
419:                 void UART1_ReadCallbackRegister( UART_RING_BUFFER_CALLBACK callback, uintptr_t context)
420:                 {
421:                     uart1Obj.rdCallback = callback;
422:                 
423:                     uart1Obj.rdContext = context;
424:                 }
425:                 
426:                 /* This routine is only called from ISR. Hence do not disable/enable USART interrupts. */
427:                 static bool UART1_TxPullByte(uint16_t* pWrByte)
428:                 {
429:                     bool isSuccess = false;
430:                     uint32_t wrOutIndex = uart1Obj.wrOutIndex;
431:                     uint32_t wrInIndex = uart1Obj.wrInIndex;
432:                 
433:                     if (wrOutIndex != wrInIndex)
434:                     {
435:                         if (UART1_IS_9BIT_MODE_ENABLED())
436:                         {
437:                             *pWrByte = ((uint16_t*)&UART1_WriteBuffer)[wrOutIndex++];
438:                         }
439:                         else
440:                         {
441:                             *pWrByte = UART1_WriteBuffer[wrOutIndex++];
442:                         }
443:                 
444:                         if (wrOutIndex >= uart1Obj.wrBufferSize)
445:                         {
446:                             wrOutIndex = 0;
447:                         }
448:                 
449:                         uart1Obj.wrOutIndex = wrOutIndex;
450:                 
451:                         isSuccess = true;
452:                     }
453:                 
454:                     return isSuccess;
455:                 }
456:                 
457:                 static inline bool UART1_TxPushByte(uint16_t wrByte)
458:                 {
459:                     uint32_t tempInIndex;
460:                     bool isSuccess = false;
461:                 
462:                     uint32_t wrOutIndex = uart1Obj.wrOutIndex;
463:                     uint32_t wrInIndex = uart1Obj.wrInIndex;
464:                 
465:                     tempInIndex = wrInIndex + 1;
466:                 
467:                     if (tempInIndex >= uart1Obj.wrBufferSize)
468:                     {
469:                         tempInIndex = 0;
470:                     }
471:                     if (tempInIndex != wrOutIndex)
472:                     {
473:                         if (UART1_IS_9BIT_MODE_ENABLED())
474:                         {
475:                             ((uint16_t*)&UART1_WriteBuffer)[wrInIndex] = wrByte;
476:                         }
477:                         else
478:                         {
479:                             UART1_WriteBuffer[wrInIndex] = (uint8_t)wrByte;
480:                         }
481:                 
482:                         uart1Obj.wrInIndex = tempInIndex;
483:                 
484:                         isSuccess = true;
485:                     }
486:                     else
487:                     {
488:                         /* Queue is full. Report Error. */
489:                     }
490:                 
491:                     return isSuccess;
492:                 }
493:                 
494:                 /* This routine is only called from ISR. Hence do not disable/enable USART interrupts. */
495:                 static void UART1_WriteNotificationSend(void)
496:                 {
497:                     uint32_t nFreeWrBufferCount;
498:                 
499:                     if (uart1Obj.isWrNotificationEnabled == true)
500:                     {
501:                         nFreeWrBufferCount = UART1_WriteFreeBufferCountGet();
502:                 
503:                         if(uart1Obj.wrCallback != NULL)
504:                         {
505:                             if (uart1Obj.isWrNotifyPersistently == true)
506:                             {
507:                                 if (nFreeWrBufferCount >= uart1Obj.wrThreshold)
508:                                 {
509:                                     uart1Obj.wrCallback(UART_EVENT_WRITE_THRESHOLD_REACHED, uart1Obj.wrContext);
510:                                 }
511:                             }
512:                             else
513:                             {
514:                                 if (nFreeWrBufferCount == uart1Obj.wrThreshold)
515:                                 {
516:                                     uart1Obj.wrCallback(UART_EVENT_WRITE_THRESHOLD_REACHED, uart1Obj.wrContext);
517:                                 }
518:                             }
519:                         }
520:                     }
521:                 }
522:                 
523:                 static size_t UART1_WritePendingBytesGet(void)
524:                 {
525:                     size_t nPendingTxBytes;
526:                 
527:                     /* Take a snapshot of indices to avoid processing in critical section */
528:                 
529:                     uint32_t wrOutIndex = uart1Obj.wrOutIndex;
530:                     uint32_t wrInIndex = uart1Obj.wrInIndex;
531:                 
532:                     if ( wrInIndex >=  wrOutIndex)
533:                     {
534:                         nPendingTxBytes =  wrInIndex - wrOutIndex;
535:                     }
536:                     else
537:                     {
538:                         nPendingTxBytes =  (uart1Obj.wrBufferSize -  wrOutIndex) + wrInIndex;
539:                     }
540:                 
541:                     return nPendingTxBytes;
542:                 }
543:                 
544:                 size_t UART1_WriteCountGet(void)
545:                 {
546:                     size_t nPendingTxBytes;
547:                 
548:                     nPendingTxBytes = UART1_WritePendingBytesGet();
549:                 
550:                     return nPendingTxBytes;
551:                 }
552:                 
553:                 size_t UART1_Write(uint8_t* pWrBuffer, const size_t size )
554:                 {
555:                     size_t nBytesWritten  = 0;
556:                 
557:                     while (nBytesWritten < size)
558:                     {
559:                         if (UART1_IS_9BIT_MODE_ENABLED())
560:                         {
561:                             if (UART1_TxPushByte(((uint16_t*)pWrBuffer)[nBytesWritten]) == true)
562:                             {
563:                                 nBytesWritten++;
564:                             }
565:                             else
566:                             {
567:                                 /* Queue is full, exit the loop */
568:                                 break;
569:                             }
570:                         }
571:                         else
572:                         {
573:                             if (UART1_TxPushByte(pWrBuffer[nBytesWritten]) == true)
574:                             {
575:                                 nBytesWritten++;
576:                             }
577:                             else
578:                             {
579:                                 /* Queue is full, exit the loop */
580:                                 break;
581:                             }
582:                         }
583:                 
584:                     }
585:                 
586:                     /* Check if any data is pending for transmission */
587:                     if (UART1_WritePendingBytesGet() > 0)
588:                     {
589:                         /* Enable TX interrupt as data is pending for transmission */
590:                         UART1_TX_INT_ENABLE();
591:                     }
592:                 
593:                     return nBytesWritten;
594:                 }
595:                 
596:                 size_t UART1_WriteFreeBufferCountGet(void)
597:                 {
598:                     return (uart1Obj.wrBufferSize - 1) - UART1_WriteCountGet();
599:                 }
600:                 
601:                 size_t UART1_WriteBufferSizeGet(void)
602:                 {
603:                     return (uart1Obj.wrBufferSize - 1);
604:                 }
605:                 
606:                 bool UART1_TransmitComplete( void )
607:                 {
608:                     if((U1STA & _U1STA_TRMT_MASK))
609:                     {
610:                         return true;
611:                     }
612:                     else
613:                     {
614:                         return false;
615:                     }
616:                 }
617:                 
618:                 bool UART1_WriteNotificationEnable(bool isEnabled, bool isPersistent)
619:                 {
620:                     bool previousStatus = uart1Obj.isWrNotificationEnabled;
621:                 
622:                     uart1Obj.isWrNotificationEnabled = isEnabled;
623:                 
624:                     uart1Obj.isWrNotifyPersistently = isPersistent;
625:                 
626:                     return previousStatus;
627:                 }
628:                 
629:                 void UART1_WriteThresholdSet(uint32_t nBytesThreshold)
630:                 {
631:                     if (nBytesThreshold > 0)
632:                     {
633:                         uart1Obj.wrThreshold = nBytesThreshold;
634:                     }
635:                 }
636:                 
637:                 void UART1_WriteCallbackRegister( UART_RING_BUFFER_CALLBACK callback, uintptr_t context)
638:                 {
639:                     uart1Obj.wrCallback = callback;
640:                 
641:                     uart1Obj.wrContext = context;
642:                 }
643:                 
644:                 UART_ERROR UART1_ErrorGet( void )
645:                 {
646:                     UART_ERROR errors = uart1Obj.errors;
647:                 
648:                     uart1Obj.errors = UART_ERROR_NONE;
649:                 
650:                     /* All errors are cleared, but send the previous error state */
651:                     return errors;
652:                 }
653:                 
654:                 bool UART1_AutoBaudQuery( void )
655:                 {
656:                     if(U1MODE & _U1MODE_ABAUD_MASK)
657:                         return true;
658:                     else
659:                         return false;
660:                 }
661:                 
662:                 void UART1_AutoBaudSet( bool enable )
663:                 {
664:                     if( enable == true )
665:                     {
666:                         U1MODESET = _U1MODE_ABAUD_MASK;
667:                     }
668:                 
669:                     /* Turning off ABAUD if it was on can lead to unpredictable behavior, so that
670:                        direction of control is not allowed in this function.                      */
671:                 }
672:                 
673:                 void UART1_FAULT_InterruptHandler (void)
674:                 {
675:                     /* Save the error to be reported later */
676:                     uart1Obj.errors = (UART_ERROR)(U1STA & (_U1STA_OERR_MASK | _U1STA_FERR_MASK | _U1STA_PERR_MASK));
677:                 
678:                     UART1_ErrorClear();
679:                 
680:                     /* Client must call UARTx_ErrorGet() function to clear the errors */
681:                     if( uart1Obj.rdCallback != NULL )
682:                     {
683:                         uart1Obj.rdCallback(UART_EVENT_READ_ERROR, uart1Obj.rdContext);
684:                     }
685:                 }
686:                 
687:                 void UART1_RX_InterruptHandler (void)
688:                 {
689:                     /* Keep reading until there is a character availabe in the RX FIFO */
690:                     while((U1STA & _U1STA_URXDA_MASK) == _U1STA_URXDA_MASK)
691:                     {
692:                         if (UART1_RxPushByte( (uint16_t )(U1RXREG) ) == true)
693:                         {
694:                             UART1_ReadNotificationSend();
695:                         }
696:                         else
697:                         {
698:                             /* UART RX buffer is full */
699:                         }
700:                     }
701:                 
702:                     /* Clear UART1 RX Interrupt flag */
703:                     IFS3CLR = _IFS3_U1RXIF_MASK;
704:                 }
705:                 
706:                 void UART1_TX_InterruptHandler (void)
707:                 {
708:                     uint16_t wrByte;
709:                 
710:                     /* Check if any data is pending for transmission */
711:                     if (UART1_WritePendingBytesGet() > 0)
712:                     {
713:                         /* Keep writing to the TX FIFO as long as there is space */
714:                         while(!(U1STA & _U1STA_UTXBF_MASK))
715:                         {
716:                             if (UART1_TxPullByte(&wrByte) == true)
717:                             {
718:                                 if (UART1_IS_9BIT_MODE_ENABLED())
719:                                 {
720:                                     U1TXREG = wrByte;
721:                                 }
722:                                 else
723:                                 {
724:                                     U1TXREG = (uint8_t)wrByte;
725:                                 }
726:                 
727:                                 /* Send notification */
728:                                 UART1_WriteNotificationSend();
729:                             }
730:                             else
731:                             {
732:                                 /* Nothing to transmit. Disable the data register empty interrupt. */
733:                                 UART1_TX_INT_DISABLE();
734:                                 break;
735:                             }
736:                         }
737:                 
738:                         /* Clear UART1TX Interrupt flag */
739:                         IFS3CLR = _IFS3_U1TXIF_MASK;
740:                     }
741:                     else
742:                     {
743:                         /* Nothing to transmit. Disable the data register empty interrupt. */
744:                         UART1_TX_INT_DISABLE();
745:                 
746:                         /* Clear UART1TX Interrupt flag */
747:                         IFS3CLR = _IFS3_U1TXIF_MASK;
748:                     }
749:                 }
750:                 
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
0000000C  00000000   NOP
00000010  00000000   NOP
00000014  00000000   NOP
00000018  00000000   NOP
0000001C  00000000   NOP
00000020  00000000   NOP
00000024  00000000   NOP
00000028  00000000   NOP
0000002C  00000000   NOP
00000030  00000000   NOP
00000034  00000000   NOP
0000003C  00000000   NOP
00000040  00000000   NOP
00000048  00000000   NOP
00000050  00000000   NOP
00000054  00000000   NOP
0000005C  00000000   NOP
00000064  00000000   NOP
0000006C  00000000   NOP
00000078  00000000   NOP
00000084  00000000   NOP
00000090  00000000   NOP
0000009C  00000000   NOP
000000A4  00000000   NOP
000000AC  00000000   NOP
000000B0  00000000   NOP
000000C4  00000000   NOP
000000C8  00000000   NOP
000000D4  00000000   NOP
000000DC  00000000   NOP
000000E4  00000000   NOP
000000E8  00000000   NOP
000000FC  00000000   NOP
00000100  00000000   NOP
00000104  00000000   NOP
00000110  00000000   NOP
00000124  00000000   NOP
00000130  00000000   NOP
00000138  00000000   NOP
00000140  00000000   NOP
0000014C  00000000   NOP
00000154  00000000   NOP
00000160  00000000   NOP
00000170  00000000   NOP
00000178  00000000   NOP
0000017C  00000000   NOP
0000018C  00000000   NOP
0000019C  00000000   NOP
000001A4  00000000   NOP
000001A8  00000000   NOP
000001B0  00000000   NOP
000001C0  00000000   NOP
000001C8  00000000   NOP
000001CC  00000000   NOP
000001D4  00000000   NOP
000001E0  00000000   NOP
000001EC  00000000   NOP
000001F8  00000000   NOP
00000208  00000000   NOP
00000220  00000000   NOP
00000230  00000000   NOP
00000240  00000000   NOP
0000024C  00000000   NOP
00000258  00000000   NOP
00000260  00000000   NOP
00000264  00000000   NOP
9D00C054  27BDFFE0   ADDIU SP, SP, -32
9D00C058  AFBF001C   SW RA, 28(SP)
9D00C05C  AFBE0018   SW FP, 24(SP)
9D00C060  03A0F025   OR FP, SP, ZERO
9D00C064  00801025   OR V0, A0, ZERO
9D00C068  A7C20020   SH V0, 32(FP)
9D00C06C  A3C00014   SB ZERO, 20(FP)
9D00C070  3C028000   LUI V0, -32768
9D00C074  24420188   ADDIU V0, V0, 392
9D00C078  8C420028   LW V0, 40(V0)
9D00C07C  24420001   ADDIU V0, V0, 1
9D00C080  AFC20010   SW V0, 16(FP)
9D00C084  3C028000   LUI V0, -32768
9D00C088  24420188   ADDIU V0, V0, 392
9D00C08C  8C420030   LW V0, 48(V0)
9D00C090  8FC30010   LW V1, 16(FP)
9D00C094  0062102B   SLTU V0, V1, V0
9D00C098  14400002   BNE V0, ZERO, UART1_RxPushByte
9D00C09C  00000000   NOP
9D00C0A0  AFC00010   SW ZERO, 16(FP)
9D00C0A4  3C028000   LUI V0, -32768
9D00C0A8  24420188   ADDIU V0, V0, 392
9D00C0AC  8C42002C   LW V0, 44(V0)
9D00C0B0  8FC30010   LW V1, 16(FP)
9D00C0B4  1462001D   BNE V1, V0, UART1_RxPushByte
9D00C0B8  00000000   NOP
9D00C0BC  3C028000   LUI V0, -32768
9D00C0C0  24420188   ADDIU V0, V0, 392
9D00C0C4  8C420020   LW V0, 32(V0)
9D00C0C8  10400018   BEQ V0, ZERO, UART1_RxPushByte
9D00C0CC  00000000   NOP
9D00C0D0  3C028000   LUI V0, -32768
9D00C0D4  24420188   ADDIU V0, V0, 392
9D00C0D8  8C420020   LW V0, 32(V0)
9D00C0DC  3C038000   LUI V1, -32768
9D00C0E0  24630188   ADDIU V1, V1, 392
9D00C0E4  8C630024   LW V1, 36(V1)
9D00C0E8  00602825   OR A1, V1, ZERO
9D00C0EC  24040001   ADDIU A0, ZERO, 1
9D00C0F0  0040F809   JALR V0
9D00C0F4  00000000   NOP
9D00C0F8  3C028000   LUI V0, -32768
9D00C0FC  24420188   ADDIU V0, V0, 392
9D00C100  8C420028   LW V0, 40(V0)
9D00C104  24420001   ADDIU V0, V0, 1
9D00C108  AFC20010   SW V0, 16(FP)
9D00C10C  3C028000   LUI V0, -32768
9D00C110  24420188   ADDIU V0, V0, 392
9D00C114  8C420030   LW V0, 48(V0)
9D00C118  8FC30010   LW V1, 16(FP)
9D00C11C  0062102B   SLTU V0, V1, V0
9D00C120  14400002   BNE V0, ZERO, UART1_RxPushByte
9D00C124  00000000   NOP
9D00C128  AFC00010   SW ZERO, 16(FP)
9D00C12C  3C028000   LUI V0, -32768
9D00C130  24420188   ADDIU V0, V0, 392
9D00C134  8C42002C   LW V0, 44(V0)
9D00C138  8FC30010   LW V1, 16(FP)
9D00C13C  10620021   BEQ V1, V0, UART1_RxPushByte
9D00C140  00000000   NOP
9D00C144  3C02BF82   LUI V0, -16510
9D00C148  8C422000   LW V0, 8192(V0)
9D00C14C  30430006   ANDI V1, V0, 6
9D00C150  24020006   ADDIU V0, ZERO, 6
9D00C154  1462000C   BNE V1, V0, UART1_RxPushByte
9D00C158  00000000   NOP
9D00C15C  3C028000   LUI V0, -32768
9D00C160  24420188   ADDIU V0, V0, 392
9D00C164  8C420028   LW V0, 40(V0)
9D00C168  00021840   SLL V1, V0, 1
9D00C16C  3C028000   LUI V0, -32768
9D00C170  244202A0   ADDIU V0, V0, 672
9D00C174  00621021   ADDU V0, V1, V0
9D00C178  97C30020   LHU V1, 32(FP)
9D00C17C  A4430000   SH V1, 0(V0)
9D00C180  1000000A   BEQ ZERO, ZERO, UART1_RxPushByte
9D00C184  00000000   NOP
9D00C188  3C028000   LUI V0, -32768
9D00C18C  24420188   ADDIU V0, V0, 392
9D00C190  8C440028   LW A0, 40(V0)
9D00C194  97C20020   LHU V0, 32(FP)
9D00C198  304300FF   ANDI V1, V0, 255
9D00C19C  3C028000   LUI V0, -32768
9D00C1A0  244202A0   ADDIU V0, V0, 672
9D00C1A4  00821021   ADDU V0, A0, V0
9D00C1A8  A0430000   SB V1, 0(V0)
9D00C1AC  3C028000   LUI V0, -32768
9D00C1B0  24420188   ADDIU V0, V0, 392
9D00C1B4  8FC30010   LW V1, 16(FP)
9D00C1B8  AC430028   SW V1, 40(V0)
9D00C1BC  24020001   ADDIU V0, ZERO, 1
9D00C1C0  A3C20014   SB V0, 20(FP)
9D00C1C4  93C20014   LBU V0, 20(FP)
9D00C1C8  03C0E825   OR SP, FP, ZERO
9D00C1CC  8FBF001C   LW RA, 28(SP)
9D00C1D0  8FBE0018   LW FP, 24(SP)
9D00C1D4  27BD0020   ADDIU SP, SP, 32
9D00C1D8  03E00008   JR RA
9D00C1DC  00000000   NOP
9D00C1E0  27BDFFF8   ADDIU SP, SP, -8
9D00C1E4  AFBE0004   SW FP, 4(SP)
9D00C1E8  03A0F025   OR FP, SP, ZERO
9D00C1EC  3C02BF82   LUI V0, -16510
9D00C1F0  24030208   ADDIU V1, ZERO, 520
9D00C1F4  AC432000   SW V1, 8192(V0)
9D00C1F8  3C02BF82   LUI V0, -16510
9D00C1FC  34039400   ORI V1, ZERO, -27648
9D00C200  AC432018   SW V1, 8216(V0)
9D00C204  3C02BF82   LUI V0, -16510
9D00C208  2403001A   ADDIU V1, ZERO, 26
9D00C20C  AC432040   SW V1, 8256(V0)
9D00C210  3C02BF81   LUI V0, -16511
9D00C214  3C030001   LUI V1, 1
9D00C218  AC4300F4   SW V1, 244(V0)
9D00C21C  3C02BF81   LUI V0, -16511
9D00C220  3C030002   LUI V1, 2
9D00C224  AC4300F4   SW V1, 244(V0)
9D00C228  3C02BF81   LUI V0, -16511
9D00C22C  3C030004   LUI V1, 4
9D00C230  AC4300F4   SW V1, 244(V0)
9D00C234  3C028000   LUI V0, -32768
9D00C238  24420188   ADDIU V0, V0, 392
9D00C23C  AC400020   SW ZERO, 32(V0)
9D00C240  3C028000   LUI V0, -32768
9D00C244  24420188   ADDIU V0, V0, 392
9D00C248  AC400028   SW ZERO, 40(V0)
9D00C24C  3C028000   LUI V0, -32768
9D00C250  24420188   ADDIU V0, V0, 392
9D00C254  AC40002C   SW ZERO, 44(V0)
9D00C258  3C028000   LUI V0, -32768
9D00C25C  24420188   ADDIU V0, V0, 392
9D00C260  A0400034   SB ZERO, 52(V0)
9D00C264  3C028000   LUI V0, -32768
9D00C268  24420188   ADDIU V0, V0, 392
9D00C26C  A040003C   SB ZERO, 60(V0)
9D00C270  3C028000   LUI V0, -32768
9D00C274  24420188   ADDIU V0, V0, 392
9D00C278  AC400038   SW ZERO, 56(V0)
9D00C27C  3C028000   LUI V0, -32768
9D00C280  AC400188   SW ZERO, 392(V0)
9D00C284  3C028000   LUI V0, -32768
9D00C288  24420188   ADDIU V0, V0, 392
9D00C28C  AC400008   SW ZERO, 8(V0)
9D00C290  3C028000   LUI V0, -32768
9D00C294  24420188   ADDIU V0, V0, 392
9D00C298  AC40000C   SW ZERO, 12(V0)
9D00C29C  3C028000   LUI V0, -32768
9D00C2A0  24420188   ADDIU V0, V0, 392
9D00C2A4  A0400010   SB ZERO, 16(V0)
9D00C2A8  3C028000   LUI V0, -32768
9D00C2AC  24420188   ADDIU V0, V0, 392
9D00C2B0  A040001C   SB ZERO, 28(V0)
9D00C2B4  3C028000   LUI V0, -32768
9D00C2B8  24420188   ADDIU V0, V0, 392
9D00C2BC  AC400014   SW ZERO, 20(V0)
9D00C2C0  3C028000   LUI V0, -32768
9D00C2C4  24420188   ADDIU V0, V0, 392
9D00C2C8  AC400040   SW ZERO, 64(V0)
9D00C2CC  3C02BF82   LUI V0, -16510
9D00C2D0  8C422000   LW V0, 8192(V0)
9D00C2D4  30430006   ANDI V1, V0, 6
9D00C2D8  24020006   ADDIU V0, ZERO, 6
9D00C2DC  1462000B   BNE V1, V0, 0x9D00C30C
9D00C2E0  00000000   NOP
9D00C2E4  3C028000   LUI V0, -32768
9D00C2E8  24420188   ADDIU V0, V0, 392
9D00C2EC  24030040   ADDIU V1, ZERO, 64
9D00C2F0  AC430030   SW V1, 48(V0)
9D00C2F4  3C028000   LUI V0, -32768
9D00C2F8  24420188   ADDIU V0, V0, 392
9D00C2FC  24030BB8   ADDIU V1, ZERO, 3000
9D00C300  AC430018   SW V1, 24(V0)
9D00C304  10000009   BEQ ZERO, ZERO, 0x9D00C32C
9D00C308  00000000   NOP
9D00C30C  3C028000   LUI V0, -32768
9D00C310  24420188   ADDIU V0, V0, 392
9D00C314  24030080   ADDIU V1, ZERO, 128
9D00C318  AC430030   SW V1, 48(V0)
9D00C31C  3C028000   LUI V0, -32768
9D00C320  24420188   ADDIU V0, V0, 392
9D00C324  24031770   ADDIU V1, ZERO, 6000
9D00C328  AC430018   SW V1, 24(V0)
9D00C32C  3C02BF82   LUI V0, -16510
9D00C330  34038000   ORI V1, ZERO, -32768
9D00C334  AC432008   SW V1, 8200(V0)
9D00C338  3C02BF81   LUI V0, -16511
9D00C33C  3C030001   LUI V1, 1
9D00C340  AC4300F8   SW V1, 248(V0)
9D00C344  3C02BF81   LUI V0, -16511
9D00C348  3C030002   LUI V1, 2
9D00C34C  AC4300F8   SW V1, 248(V0)
9D00C350  00000000   NOP
9D00C354  03C0E825   OR SP, FP, ZERO
9D00C358  8FBE0004   LW FP, 4(SP)
9D00C35C  27BD0008   ADDIU SP, SP, 8
9D00C360  03E00008   JR RA
9D00C364  00000000   NOP
9D00CD18  27BDFFE8   ADDIU SP, SP, -24
9D00CD1C  AFBE0014   SW FP, 20(SP)
9D00CD20  03A0F025   OR FP, SP, ZERO
9D00CD24  AFC40018   SW A0, 24(FP)
9D00CD28  AFC5001C   SW A1, 28(FP)
9D00CD2C  AFC00000   SW ZERO, 0(FP)
9D00CD30  AFC00004   SW ZERO, 4(FP)
9D00CD34  AFC00008   SW ZERO, 8(FP)
9D00CD38  3C028000   LUI V0, -32768
9D00CD3C  24420188   ADDIU V0, V0, 392
9D00CD40  8C42002C   LW V0, 44(V0)
9D00CD44  AFC20004   SW V0, 4(FP)
9D00CD48  3C028000   LUI V0, -32768
9D00CD4C  24420188   ADDIU V0, V0, 392
9D00CD50  8C420028   LW V0, 40(V0)
9D00CD54  AFC20008   SW V0, 8(FP)
9D00CD58  10000031   BEQ ZERO, ZERO, 0x9D00CE20
9D00CD5C  00000000   NOP
9D00CD60  8FC30004   LW V1, 4(FP)
9D00CD64  8FC20008   LW V0, 8(FP)
9D00CD68  10620034   BEQ V1, V0, 0x9D00CE3C
9D00CD6C  00000000   NOP
9D00CD70  3C02BF82   LUI V0, -16510
9D00CD74  8C422000   LW V0, 8192(V0)
9D00CD78  30430006   ANDI V1, V0, 6
9D00CD7C  24020006   ADDIU V0, ZERO, 6
9D00CD80  14620012   BNE V1, V0, 0x9D00CDCC
9D00CD84  00000000   NOP
9D00CD88  8FC20004   LW V0, 4(FP)
9D00CD8C  24430001   ADDIU V1, V0, 1
9D00CD90  AFC30004   SW V1, 4(FP)
9D00CD94  00021840   SLL V1, V0, 1
9D00CD98  3C028000   LUI V0, -32768
9D00CD9C  244202A0   ADDIU V0, V0, 672
9D00CDA0  00621821   ADDU V1, V1, V0
9D00CDA4  8FC20000   LW V0, 0(FP)
9D00CDA8  24440001   ADDIU A0, V0, 1
9D00CDAC  AFC40000   SW A0, 0(FP)
9D00CDB0  00021040   SLL V0, V0, 1
9D00CDB4  8FC40018   LW A0, 24(FP)
9D00CDB8  00821021   ADDU V0, A0, V0
9D00CDBC  94630000   LHU V1, 0(V1)
9D00CDC0  A4430000   SH V1, 0(V0)
9D00CDC4  1000000E   BEQ ZERO, ZERO, 0x9D00CE00
9D00CDC8  00000000   NOP
9D00CDCC  8FC20004   LW V0, 4(FP)
9D00CDD0  24430001   ADDIU V1, V0, 1
9D00CDD4  AFC30004   SW V1, 4(FP)
9D00CDD8  8FC30000   LW V1, 0(FP)
9D00CDDC  24640001   ADDIU A0, V1, 1
9D00CDE0  AFC40000   SW A0, 0(FP)
9D00CDE4  8FC40018   LW A0, 24(FP)
9D00CDE8  00831821   ADDU V1, A0, V1
9D00CDEC  3C048000   LUI A0, -32768
9D00CDF0  248402A0   ADDIU A0, A0, 672
9D00CDF4  00441021   ADDU V0, V0, A0
9D00CDF8  90420000   LBU V0, 0(V0)
9D00CDFC  A0620000   SB V0, 0(V1)
9D00CE00  3C028000   LUI V0, -32768
9D00CE04  24420188   ADDIU V0, V0, 392
9D00CE08  8C420030   LW V0, 48(V0)
9D00CE0C  8FC30004   LW V1, 4(FP)
9D00CE10  0062102B   SLTU V0, V1, V0
9D00CE14  14400002   BNE V0, ZERO, 0x9D00CE20
9D00CE18  00000000   NOP
9D00CE1C  AFC00004   SW ZERO, 4(FP)
9D00CE20  8FC30000   LW V1, 0(FP)
9D00CE24  8FC2001C   LW V0, 28(FP)
9D00CE28  0062102B   SLTU V0, V1, V0
9D00CE2C  1440FFCC   BNE V0, ZERO, 0x9D00CD60
9D00CE30  00000000   NOP
9D00CE34  10000002   BEQ ZERO, ZERO, 0x9D00CE40
9D00CE38  00000000   NOP
9D00CE3C  00000000   NOP
9D00CE40  3C028000   LUI V0, -32768
9D00CE44  24420188   ADDIU V0, V0, 392
9D00CE48  8FC30004   LW V1, 4(FP)
9D00CE4C  AC43002C   SW V1, 44(V0)
9D00CE50  8FC20000   LW V0, 0(FP)
9D00CE54  03C0E825   OR SP, FP, ZERO
9D00CE58  8FBE0014   LW FP, 20(SP)
9D00CE5C  27BD0018   ADDIU SP, SP, 24
9D00CE60  03E00008   JR RA
9D00CE64  00000000   NOP
9D00D69C  27BDFFE0   ADDIU SP, SP, -32
9D00D6A0  AFBF001C   SW RA, 28(SP)
9D00D6A4  AFBE0018   SW FP, 24(SP)
9D00D6A8  03A0F025   OR FP, SP, ZERO
9D00D6AC  AFC40020   SW A0, 32(FP)
9D00D6B0  AFC50024   SW A1, 36(FP)
9D00D6B4  AFC00010   SW ZERO, 16(FP)
9D00D6B8  10000023   BEQ ZERO, ZERO, 0x9D00D748
9D00D6BC  00000000   NOP
9D00D6C0  3C02BF82   LUI V0, -16510
9D00D6C4  8C422000   LW V0, 8192(V0)
9D00D6C8  30430006   ANDI V1, V0, 6
9D00D6CC  24020006   ADDIU V0, ZERO, 6
9D00D6D0  14620010   BNE V1, V0, 0x9D00D714
9D00D6D4  00000000   NOP
9D00D6D8  8FC20010   LW V0, 16(FP)
9D00D6DC  00021040   SLL V0, V0, 1
9D00D6E0  8FC30020   LW V1, 32(FP)
9D00D6E4  00621021   ADDU V0, V1, V0
9D00D6E8  94420000   LHU V0, 0(V0)
9D00D6EC  00402025   OR A0, V0, ZERO
9D00D6F0  0F4037F3   JAL UART1_TxPushByte
9D00D6F4  00000000   NOP
9D00D6F8  1040001A   BEQ V0, ZERO, 0x9D00D764
9D00D6FC  00000000   NOP
9D00D700  8FC20010   LW V0, 16(FP)
9D00D704  24420001   ADDIU V0, V0, 1
9D00D708  AFC20010   SW V0, 16(FP)
9D00D70C  1000000E   BEQ ZERO, ZERO, 0x9D00D748
9D00D710  00000000   NOP
9D00D714  8FC30020   LW V1, 32(FP)
9D00D718  8FC20010   LW V0, 16(FP)
9D00D71C  00621021   ADDU V0, V1, V0
9D00D720  90420000   LBU V0, 0(V0)
9D00D724  3042FFFF   ANDI V0, V0, -1
9D00D728  00402025   OR A0, V0, ZERO
9D00D72C  0F4037F3   JAL UART1_TxPushByte
9D00D730  00000000   NOP
9D00D734  1040000E   BEQ V0, ZERO, 0x9D00D770
9D00D738  00000000   NOP
9D00D73C  8FC20010   LW V0, 16(FP)
9D00D740  24420001   ADDIU V0, V0, 1
9D00D744  AFC20010   SW V0, 16(FP)
9D00D748  8FC30010   LW V1, 16(FP)
9D00D74C  8FC20024   LW V0, 36(FP)
9D00D750  0062102B   SLTU V0, V1, V0
9D00D754  1440FFDA   BNE V0, ZERO, 0x9D00D6C0
9D00D758  00000000   NOP
9D00D75C  10000005   BEQ ZERO, ZERO, 0x9D00D774
9D00D760  00000000   NOP
9D00D764  00000000   NOP
9D00D768  10000002   BEQ ZERO, ZERO, 0x9D00D774
9D00D76C  00000000   NOP
9D00D770  00000000   NOP
9D00D774  0F403FE5   JAL UART1_WritePendingBytesGet
9D00D778  00000000   NOP
9D00D77C  10400004   BEQ V0, ZERO, 0x9D00D790
9D00D780  00000000   NOP
9D00D784  3C02BF81   LUI V0, -16511
9D00D788  3C030004   LUI V1, 4
9D00D78C  AC4300F8   SW V1, 248(V0)
9D00D790  8FC20010   LW V0, 16(FP)
9D00D794  03C0E825   OR SP, FP, ZERO
9D00D798  8FBF001C   LW RA, 28(SP)
9D00D79C  8FBE0018   LW FP, 24(SP)
9D00D7A0  27BD0020   ADDIU SP, SP, 32
9D00D7A4  03E00008   JR RA
9D00D7A8  00000000   NOP
9D00D9C0  27BDFFE8   ADDIU SP, SP, -24
9D00D9C4  AFBE0014   SW FP, 20(SP)
9D00D9C8  03A0F025   OR FP, SP, ZERO
9D00D9CC  AFC40018   SW A0, 24(FP)
9D00D9D0  A3C00000   SB ZERO, 0(FP)
9D00D9D4  3C028000   LUI V0, -32768
9D00D9D8  24420188   ADDIU V0, V0, 392
9D00D9DC  8C42000C   LW V0, 12(V0)
9D00D9E0  AFC20004   SW V0, 4(FP)
9D00D9E4  3C028000   LUI V0, -32768
9D00D9E8  24420188   ADDIU V0, V0, 392
9D00D9EC  8C420008   LW V0, 8(V0)
9D00D9F0  AFC20008   SW V0, 8(FP)
9D00D9F4  8FC30004   LW V1, 4(FP)
9D00D9F8  8FC20008   LW V0, 8(FP)
9D00D9FC  1062002B   BEQ V1, V0, UART1_TxPullByte
9D00DA00  00000000   NOP
9D00DA04  3C02BF82   LUI V0, -16510
9D00DA08  8C422000   LW V0, 8192(V0)
9D00DA0C  30430006   ANDI V1, V0, 6
9D00DA10  24020006   ADDIU V0, ZERO, 6
9D00DA14  1462000D   BNE V1, V0, UART1_TxPullByte
9D00DA18  00000000   NOP
9D00DA1C  8FC20004   LW V0, 4(FP)
9D00DA20  24430001   ADDIU V1, V0, 1
9D00DA24  AFC30004   SW V1, 4(FP)
9D00DA28  00021840   SLL V1, V0, 1
9D00DA2C  3C028000   LUI V0, -32768
9D00DA30  24420320   ADDIU V0, V0, 800
9D00DA34  00621021   ADDU V0, V1, V0
9D00DA38  94430000   LHU V1, 0(V0)
9D00DA3C  8FC20018   LW V0, 24(FP)
9D00DA40  A4430000   SH V1, 0(V0)
9D00DA44  1000000B   BEQ ZERO, ZERO, UART1_TxPullByte
9D00DA48  00000000   NOP
9D00DA4C  8FC20004   LW V0, 4(FP)
9D00DA50  24430001   ADDIU V1, V0, 1
9D00DA54  AFC30004   SW V1, 4(FP)
9D00DA58  3C038000   LUI V1, -32768
9D00DA5C  24630320   ADDIU V1, V1, 800
9D00DA60  00431021   ADDU V0, V0, V1
9D00DA64  90420000   LBU V0, 0(V0)
9D00DA68  3043FFFF   ANDI V1, V0, -1
9D00DA6C  8FC20018   LW V0, 24(FP)
9D00DA70  A4430000   SH V1, 0(V0)
9D00DA74  3C028000   LUI V0, -32768
9D00DA78  24420188   ADDIU V0, V0, 392
9D00DA7C  8C420018   LW V0, 24(V0)
9D00DA80  8FC30004   LW V1, 4(FP)
9D00DA84  0062102B   SLTU V0, V1, V0
9D00DA88  14400002   BNE V0, ZERO, UART1_TxPullByte
9D00DA8C  00000000   NOP
9D00DA90  AFC00004   SW ZERO, 4(FP)
9D00DA94  3C028000   LUI V0, -32768
9D00DA98  24420188   ADDIU V0, V0, 392
9D00DA9C  8FC30004   LW V1, 4(FP)
9D00DAA0  AC43000C   SW V1, 12(V0)
9D00DAA4  24020001   ADDIU V0, ZERO, 1
9D00DAA8  A3C20000   SB V0, 0(FP)
9D00DAAC  93C20000   LBU V0, 0(FP)
9D00DAB0  03C0E825   OR SP, FP, ZERO
9D00DAB4  8FBE0014   LW FP, 20(SP)
9D00DAB8  27BD0018   ADDIU SP, SP, 24
9D00DABC  03E00008   JR RA
9D00DAC0  00000000   NOP
9D00DAC4  27BDFFE0   ADDIU SP, SP, -32
9D00DAC8  AFBF001C   SW RA, 28(SP)
9D00DACC  AFBE0018   SW FP, 24(SP)
9D00DAD0  03A0F025   OR FP, SP, ZERO
9D00DAD4  0F403FE5   JAL UART1_WritePendingBytesGet
9D00DAD8  00000000   NOP
9D00DADC  1040002D   BEQ V0, ZERO, 0x9D00DB94
9D00DAE0  00000000   NOP
9D00DAE4  10000021   BEQ ZERO, ZERO, 0x9D00DB6C
9D00DAE8  00000000   NOP
9D00DAEC  27C20010   ADDIU V0, FP, 16
9D00DAF0  00402025   OR A0, V0, ZERO
9D00DAF4  0F403670   JAL UART1_TxPullByte
9D00DAF8  00000000   NOP
9D00DAFC  10400016   BEQ V0, ZERO, 0x9D00DB58
9D00DB00  00000000   NOP
9D00DB04  3C02BF82   LUI V0, -16510
9D00DB08  8C422000   LW V0, 8192(V0)
9D00DB0C  30430006   ANDI V1, V0, 6
9D00DB10  24020006   ADDIU V0, ZERO, 6
9D00DB14  14620007   BNE V1, V0, 0x9D00DB34
9D00DB18  00000000   NOP
9D00DB1C  97C20010   LHU V0, 16(FP)
9D00DB20  00401825   OR V1, V0, ZERO
9D00DB24  3C02BF82   LUI V0, -16510
9D00DB28  AC432020   SW V1, 8224(V0)
9D00DB2C  10000006   BEQ ZERO, ZERO, 0x9D00DB48
9D00DB30  00000000   NOP
9D00DB34  97C20010   LHU V0, 16(FP)
9D00DB38  304200FF   ANDI V0, V0, 255
9D00DB3C  00401825   OR V1, V0, ZERO
9D00DB40  3C02BF82   LUI V0, -16510
9D00DB44  AC432020   SW V1, 8224(V0)
9D00DB48  0F4038B0   JAL UART1_WriteNotificationSend
9D00DB4C  00000000   NOP
9D00DB50  10000006   BEQ ZERO, ZERO, 0x9D00DB6C
9D00DB54  00000000   NOP
9D00DB58  3C02BF81   LUI V0, -16511
9D00DB5C  3C030004   LUI V1, 4
9D00DB60  AC4300F4   SW V1, 244(V0)
9D00DB64  10000006   BEQ ZERO, ZERO, 0x9D00DB80
9D00DB68  00000000   NOP
9D00DB6C  3C02BF82   LUI V0, -16510
9D00DB70  8C422010   LW V0, 8208(V0)
9D00DB74  30420200   ANDI V0, V0, 512
9D00DB78  1040FFDC   BEQ V0, ZERO, 0x9D00DAEC
9D00DB7C  00000000   NOP
9D00DB80  3C02BF81   LUI V0, -16511
9D00DB84  3C030004   LUI V1, 4
9D00DB88  AC430074   SW V1, 116(V0)
9D00DB8C  10000007   BEQ ZERO, ZERO, 0x9D00DBAC
9D00DB90  00000000   NOP
9D00DB94  3C02BF81   LUI V0, -16511
9D00DB98  3C030004   LUI V1, 4
9D00DB9C  AC4300F4   SW V1, 244(V0)
9D00DBA0  3C02BF81   LUI V0, -16511
9D00DBA4  3C030004   LUI V1, 4
9D00DBA8  AC430074   SW V1, 116(V0)
9D00DBAC  00000000   NOP
9D00DBB0  03C0E825   OR SP, FP, ZERO
9D00DBB4  8FBF001C   LW RA, 28(SP)
9D00DBB8  8FBE0018   LW FP, 24(SP)
9D00DBBC  27BD0020   ADDIU SP, SP, 32
9D00DBC0  03E00008   JR RA
9D00DBC4  00000000   NOP
9D00DCCC  27BDFFE0   ADDIU SP, SP, -32
9D00DCD0  AFBF001C   SW RA, 28(SP)
9D00DCD4  AFBE0018   SW FP, 24(SP)
9D00DCD8  03A0F025   OR FP, SP, ZERO
9D00DCDC  3C028000   LUI V0, -32768
9D00DCE0  24420188   ADDIU V0, V0, 392
9D00DCE4  90420034   LBU V0, 52(V0)
9D00DCE8  10400031   BEQ V0, ZERO, UART1_ReadNotificationSend
9D00DCEC  00000000   NOP
9D00DCF0  0F403FC1   JAL UART1_ReadCountGet
9D00DCF4  00000000   NOP
9D00DCF8  AFC20010   SW V0, 16(FP)
9D00DCFC  3C028000   LUI V0, -32768
9D00DD00  24420188   ADDIU V0, V0, 392
9D00DD04  8C420020   LW V0, 32(V0)
9D00DD08  10400029   BEQ V0, ZERO, UART1_ReadNotificationSend
9D00DD0C  00000000   NOP
9D00DD10  3C028000   LUI V0, -32768
9D00DD14  24420188   ADDIU V0, V0, 392
9D00DD18  9042003C   LBU V0, 60(V0)
9D00DD1C  10400014   BEQ V0, ZERO, UART1_ReadNotificationSend
9D00DD20  00000000   NOP
9D00DD24  3C028000   LUI V0, -32768
9D00DD28  24420188   ADDIU V0, V0, 392
9D00DD2C  8C420038   LW V0, 56(V0)
9D00DD30  8FC30010   LW V1, 16(FP)
9D00DD34  0062102B   SLTU V0, V1, V0
9D00DD38  1440001D   BNE V0, ZERO, UART1_ReadNotificationSend
9D00DD3C  00000000   NOP
9D00DD40  3C028000   LUI V0, -32768
9D00DD44  24420188   ADDIU V0, V0, 392
9D00DD48  8C420020   LW V0, 32(V0)
9D00DD4C  3C038000   LUI V1, -32768
9D00DD50  24630188   ADDIU V1, V1, 392
9D00DD54  8C630024   LW V1, 36(V1)
9D00DD58  00602825   OR A1, V1, ZERO
9D00DD5C  00002025   OR A0, ZERO, ZERO
9D00DD60  0040F809   JALR V0
9D00DD64  00000000   NOP
9D00DD68  10000011   BEQ ZERO, ZERO, UART1_ReadNotificationSend
9D00DD6C  00000000   NOP
9D00DD70  3C028000   LUI V0, -32768
9D00DD74  24420188   ADDIU V0, V0, 392
9D00DD78  8C420038   LW V0, 56(V0)
9D00DD7C  8FC30010   LW V1, 16(FP)
9D00DD80  1462000B   BNE V1, V0, UART1_ReadNotificationSend
9D00DD84  00000000   NOP
9D00DD88  3C028000   LUI V0, -32768
9D00DD8C  24420188   ADDIU V0, V0, 392
9D00DD90  8C420020   LW V0, 32(V0)
9D00DD94  3C038000   LUI V1, -32768
9D00DD98  24630188   ADDIU V1, V1, 392
9D00DD9C  8C630024   LW V1, 36(V1)
9D00DDA0  00602825   OR A1, V1, ZERO
9D00DDA4  00002025   OR A0, ZERO, ZERO
9D00DDA8  0040F809   JALR V0
9D00DDAC  00000000   NOP
9D00DDB0  00000000   NOP
9D00DDB4  03C0E825   OR SP, FP, ZERO
9D00DDB8  8FBF001C   LW RA, 28(SP)
9D00DDBC  8FBE0018   LW FP, 24(SP)
9D00DDC0  27BD0020   ADDIU SP, SP, 32
9D00DDC4  03E00008   JR RA
9D00DDC8  00000000   NOP
9D00DFCC  27BDFFE8   ADDIU SP, SP, -24
9D00DFD0  AFBE0014   SW FP, 20(SP)
9D00DFD4  03A0F025   OR FP, SP, ZERO
9D00DFD8  00801025   OR V0, A0, ZERO
9D00DFDC  A7C20018   SH V0, 24(FP)
9D00DFE0  A3C00004   SB ZERO, 4(FP)
9D00DFE4  3C028000   LUI V0, -32768
9D00DFE8  24420188   ADDIU V0, V0, 392
9D00DFEC  8C42000C   LW V0, 12(V0)
9D00DFF0  AFC20008   SW V0, 8(FP)
9D00DFF4  3C028000   LUI V0, -32768
9D00DFF8  24420188   ADDIU V0, V0, 392
9D00DFFC  8C420008   LW V0, 8(V0)
9D00E000  AFC2000C   SW V0, 12(FP)
9D00E004  8FC2000C   LW V0, 12(FP)
9D00E008  24420001   ADDIU V0, V0, 1
9D00E00C  AFC20000   SW V0, 0(FP)
9D00E010  3C028000   LUI V0, -32768
9D00E014  24420188   ADDIU V0, V0, 392
9D00E018  8C420018   LW V0, 24(V0)
9D00E01C  8FC30000   LW V1, 0(FP)
9D00E020  0062102B   SLTU V0, V1, V0
9D00E024  14400002   BNE V0, ZERO, UART1_TxPushByte
9D00E028  00000000   NOP
9D00E02C  AFC00000   SW ZERO, 0(FP)
9D00E030  8FC30000   LW V1, 0(FP)
9D00E034  8FC20008   LW V0, 8(FP)
9D00E038  1062001D   BEQ V1, V0, UART1_TxPushByte
9D00E03C  00000000   NOP
9D00E040  3C02BF82   LUI V0, -16510
9D00E044  8C422000   LW V0, 8192(V0)
9D00E048  30430006   ANDI V1, V0, 6
9D00E04C  24020006   ADDIU V0, ZERO, 6
9D00E050  1462000A   BNE V1, V0, UART1_TxPushByte
9D00E054  00000000   NOP
9D00E058  8FC2000C   LW V0, 12(FP)
9D00E05C  00021840   SLL V1, V0, 1
9D00E060  3C028000   LUI V0, -32768
9D00E064  24420320   ADDIU V0, V0, 800
9D00E068  00621021   ADDU V0, V1, V0
9D00E06C  97C30018   LHU V1, 24(FP)
9D00E070  A4430000   SH V1, 0(V0)
9D00E074  10000008   BEQ ZERO, ZERO, UART1_TxPushByte
9D00E078  00000000   NOP
9D00E07C  97C20018   LHU V0, 24(FP)
9D00E080  304300FF   ANDI V1, V0, 255
9D00E084  3C028000   LUI V0, -32768
9D00E088  24440320   ADDIU A0, V0, 800
9D00E08C  8FC2000C   LW V0, 12(FP)
9D00E090  00821021   ADDU V0, A0, V0
9D00E094  A0430000   SB V1, 0(V0)
9D00E098  3C028000   LUI V0, -32768
9D00E09C  24420188   ADDIU V0, V0, 392
9D00E0A0  8FC30000   LW V1, 0(FP)
9D00E0A4  AC430008   SW V1, 8(V0)
9D00E0A8  24020001   ADDIU V0, ZERO, 1
9D00E0AC  A3C20004   SB V0, 4(FP)
9D00E0B0  93C20004   LBU V0, 4(FP)
9D00E0B4  03C0E825   OR SP, FP, ZERO
9D00E0B8  8FBE0014   LW FP, 20(SP)
9D00E0BC  27BD0018   ADDIU SP, SP, 24
9D00E0C0  03E00008   JR RA
9D00E0C4  00000000   NOP
9D00E2C0  27BDFFE0   ADDIU SP, SP, -32
9D00E2C4  AFBF001C   SW RA, 28(SP)
9D00E2C8  AFBE0018   SW FP, 24(SP)
9D00E2CC  03A0F025   OR FP, SP, ZERO
9D00E2D0  3C028000   LUI V0, -32768
9D00E2D4  24420188   ADDIU V0, V0, 392
9D00E2D8  90420010   LBU V0, 16(V0)
9D00E2DC  1040002E   BEQ V0, ZERO, UART1_WriteNotificationSend
9D00E2E0  00000000   NOP
9D00E2E4  0F404453   JAL UART1_WriteFreeBufferCountGet
9D00E2E8  00000000   NOP
9D00E2EC  AFC20010   SW V0, 16(FP)
9D00E2F0  3C028000   LUI V0, -32768
9D00E2F4  8C420188   LW V0, 392(V0)
9D00E2F8  10400027   BEQ V0, ZERO, UART1_WriteNotificationSend
9D00E2FC  00000000   NOP
9D00E300  3C028000   LUI V0, -32768
9D00E304  24420188   ADDIU V0, V0, 392
9D00E308  9042001C   LBU V0, 28(V0)
9D00E30C  10400013   BEQ V0, ZERO, UART1_WriteNotificationSend
9D00E310  00000000   NOP
9D00E314  3C028000   LUI V0, -32768
9D00E318  24420188   ADDIU V0, V0, 392
9D00E31C  8C420014   LW V0, 20(V0)
9D00E320  8FC30010   LW V1, 16(FP)
9D00E324  0062102B   SLTU V0, V1, V0
9D00E328  1440001B   BNE V0, ZERO, UART1_WriteNotificationSend
9D00E32C  00000000   NOP
9D00E330  3C028000   LUI V0, -32768
9D00E334  8C420188   LW V0, 392(V0)
9D00E338  3C038000   LUI V1, -32768
9D00E33C  24630188   ADDIU V1, V1, 392
9D00E340  8C630004   LW V1, 4(V1)
9D00E344  00602825   OR A1, V1, ZERO
9D00E348  24040003   ADDIU A0, ZERO, 3
9D00E34C  0040F809   JALR V0
9D00E350  00000000   NOP
9D00E354  10000010   BEQ ZERO, ZERO, UART1_WriteNotificationSend
9D00E358  00000000   NOP
9D00E35C  3C028000   LUI V0, -32768
9D00E360  24420188   ADDIU V0, V0, 392
9D00E364  8C420014   LW V0, 20(V0)
9D00E368  8FC30010   LW V1, 16(FP)
9D00E36C  1462000A   BNE V1, V0, UART1_WriteNotificationSend
9D00E370  00000000   NOP
9D00E374  3C028000   LUI V0, -32768
9D00E378  8C420188   LW V0, 392(V0)
9D00E37C  3C038000   LUI V1, -32768
9D00E380  24630188   ADDIU V1, V1, 392
9D00E384  8C630004   LW V1, 4(V1)
9D00E388  00602825   OR A1, V1, ZERO
9D00E38C  24040003   ADDIU A0, ZERO, 3
9D00E390  0040F809   JALR V0
9D00E394  00000000   NOP
9D00E398  00000000   NOP
9D00E39C  03C0E825   OR SP, FP, ZERO
9D00E3A0  8FBF001C   LW RA, 28(SP)
9D00E3A4  8FBE0018   LW FP, 24(SP)
9D00E3A8  27BD0020   ADDIU SP, SP, 32
9D00E3AC  03E00008   JR RA
9D00E3B0  00000000   NOP
9D00F844  27BDFFF0   ADDIU SP, SP, -16
9D00F848  AFBE000C   SW FP, 12(SP)
9D00F84C  03A0F025   OR FP, SP, ZERO
9D00F850  AFC00000   SW ZERO, 0(FP)
9D00F854  A3C00004   SB ZERO, 4(FP)
9D00F858  3C02BF82   LUI V0, -16510
9D00F85C  8C422010   LW V0, 8208(V0)
9D00F860  3042000E   ANDI V0, V0, 14
9D00F864  AFC20000   SW V0, 0(FP)
9D00F868  8FC20000   LW V0, 0(FP)
9D00F86C  10400019   BEQ V0, ZERO, UART1_ErrorClear
9D00F870  00000000   NOP
9D00F874  3C02BF82   LUI V0, -16510
9D00F878  8C422010   LW V0, 8208(V0)
9D00F87C  30420002   ANDI V0, V0, 2
9D00F880  10400009   BEQ V0, ZERO, UART1_ErrorClear
9D00F884  00000000   NOP
9D00F888  3C02BF82   LUI V0, -16510
9D00F88C  24030002   ADDIU V1, ZERO, 2
9D00F890  AC432014   SW V1, 8212(V0)
9D00F894  10000004   BEQ ZERO, ZERO, UART1_ErrorClear
9D00F898  00000000   NOP
9D00F89C  3C02BF82   LUI V0, -16510
9D00F8A0  8C422030   LW V0, 8240(V0)
9D00F8A4  A3C20004   SB V0, 4(FP)
9D00F8A8  3C02BF82   LUI V0, -16510
9D00F8AC  8C422010   LW V0, 8208(V0)
9D00F8B0  30420001   ANDI V0, V0, 1
9D00F8B4  1440FFF9   BNE V0, ZERO, UART1_ErrorClear
9D00F8B8  00000000   NOP
9D00F8BC  3C02BF81   LUI V0, -16511
9D00F8C0  3C030001   LUI V1, 1
9D00F8C4  AC430074   SW V1, 116(V0)
9D00F8C8  3C02BF81   LUI V0, -16511
9D00F8CC  3C030002   LUI V1, 2
9D00F8D0  AC430074   SW V1, 116(V0)
9D00F8D4  00000000   NOP
9D00F8D8  03C0E825   OR SP, FP, ZERO
9D00F8DC  8FBE000C   LW FP, 12(SP)
9D00F8E0  27BD0010   ADDIU SP, SP, 16
9D00F8E4  03E00008   JR RA
9D00F8E8  00000000   NOP
9D00FF04  27BDFFE8   ADDIU SP, SP, -24
9D00FF08  AFBE0014   SW FP, 20(SP)
9D00FF0C  03A0F025   OR FP, SP, ZERO
9D00FF10  3C028000   LUI V0, -32768
9D00FF14  24420188   ADDIU V0, V0, 392
9D00FF18  8C420028   LW V0, 40(V0)
9D00FF1C  AFC20004   SW V0, 4(FP)
9D00FF20  3C028000   LUI V0, -32768
9D00FF24  24420188   ADDIU V0, V0, 392
9D00FF28  8C42002C   LW V0, 44(V0)
9D00FF2C  AFC20008   SW V0, 8(FP)
9D00FF30  8FC30004   LW V1, 4(FP)
9D00FF34  8FC20008   LW V0, 8(FP)
9D00FF38  0062102B   SLTU V0, V1, V0
9D00FF3C  14400007   BNE V0, ZERO, 0x9D00FF5C
9D00FF40  00000000   NOP
9D00FF44  8FC30004   LW V1, 4(FP)
9D00FF48  8FC20008   LW V0, 8(FP)
9D00FF4C  00621023   SUBU V0, V1, V0
9D00FF50  AFC20000   SW V0, 0(FP)
9D00FF54  10000009   BEQ ZERO, ZERO, 0x9D00FF7C
9D00FF58  00000000   NOP
9D00FF5C  3C028000   LUI V0, -32768
9D00FF60  24420188   ADDIU V0, V0, 392
9D00FF64  8C430030   LW V1, 48(V0)
9D00FF68  8FC20008   LW V0, 8(FP)
9D00FF6C  00621023   SUBU V0, V1, V0
9D00FF70  8FC30004   LW V1, 4(FP)
9D00FF74  00621021   ADDU V0, V1, V0
9D00FF78  AFC20000   SW V0, 0(FP)
9D00FF7C  8FC20000   LW V0, 0(FP)
9D00FF80  03C0E825   OR SP, FP, ZERO
9D00FF84  8FBE0014   LW FP, 20(SP)
9D00FF88  27BD0018   ADDIU SP, SP, 24
9D00FF8C  03E00008   JR RA
9D00FF90  00000000   NOP
9D00FF94  27BDFFE8   ADDIU SP, SP, -24
9D00FF98  AFBE0014   SW FP, 20(SP)
9D00FF9C  03A0F025   OR FP, SP, ZERO
9D00FFA0  3C028000   LUI V0, -32768
9D00FFA4  24420188   ADDIU V0, V0, 392
9D00FFA8  8C42000C   LW V0, 12(V0)
9D00FFAC  AFC20004   SW V0, 4(FP)
9D00FFB0  3C028000   LUI V0, -32768
9D00FFB4  24420188   ADDIU V0, V0, 392
9D00FFB8  8C420008   LW V0, 8(V0)
9D00FFBC  AFC20008   SW V0, 8(FP)
9D00FFC0  8FC30008   LW V1, 8(FP)
9D00FFC4  8FC20004   LW V0, 4(FP)
9D00FFC8  0062102B   SLTU V0, V1, V0
9D00FFCC  14400007   BNE V0, ZERO, UART1_WritePendingBytesGet
9D00FFD0  00000000   NOP
9D00FFD4  8FC30008   LW V1, 8(FP)
9D00FFD8  8FC20004   LW V0, 4(FP)
9D00FFDC  00621023   SUBU V0, V1, V0
9D00FFE0  AFC20000   SW V0, 0(FP)
9D00FFE4  10000009   BEQ ZERO, ZERO, UART1_WritePendingBytesGet
9D00FFE8  00000000   NOP
9D00FFEC  3C028000   LUI V0, -32768
9D00FFF0  24420188   ADDIU V0, V0, 392
9D00FFF4  8C430018   LW V1, 24(V0)
9D00FFF8  8FC20004   LW V0, 4(FP)
9D00FFFC  00621023   SUBU V0, V1, V0
9D010000  8FC30008   LW V1, 8(FP)
9D010004  00621021   ADDU V0, V1, V0
9D010008  AFC20000   SW V0, 0(FP)
9D01000C  8FC20000   LW V0, 0(FP)
9D010010  03C0E825   OR SP, FP, ZERO
9D010014  8FBE0014   LW FP, 20(SP)
9D010018  27BD0018   ADDIU SP, SP, 24
9D01001C  03E00008   JR RA
9D010020  00000000   NOP
9D0102E4  27BDFFE8   ADDIU SP, SP, -24
9D0102E8  AFBF0014   SW RA, 20(SP)
9D0102EC  AFBE0010   SW FP, 16(SP)
9D0102F0  03A0F025   OR FP, SP, ZERO
9D0102F4  3C02BF82   LUI V0, -16510
9D0102F8  8C422010   LW V0, 8208(V0)
9D0102FC  3043000E   ANDI V1, V0, 14
9D010300  3C028000   LUI V0, -32768
9D010304  24420188   ADDIU V0, V0, 392
9D010308  AC430040   SW V1, 64(V0)
9D01030C  0F403E11   JAL UART1_ErrorClear
9D010310  00000000   NOP
9D010314  3C028000   LUI V0, -32768
9D010318  24420188   ADDIU V0, V0, 392
9D01031C  8C420020   LW V0, 32(V0)
9D010320  1040000B   BEQ V0, ZERO, 0x9D010350
9D010324  00000000   NOP
9D010328  3C028000   LUI V0, -32768
9D01032C  24420188   ADDIU V0, V0, 392
9D010330  8C420020   LW V0, 32(V0)
9D010334  3C038000   LUI V1, -32768
9D010338  24630188   ADDIU V1, V1, 392
9D01033C  8C630024   LW V1, 36(V1)
9D010340  00602825   OR A1, V1, ZERO
9D010344  24040002   ADDIU A0, ZERO, 2
9D010348  0040F809   JALR V0
9D01034C  00000000   NOP
9D010350  00000000   NOP
9D010354  03C0E825   OR SP, FP, ZERO
9D010358  8FBF0014   LW RA, 20(SP)
9D01035C  8FBE0010   LW FP, 16(SP)
9D010360  27BD0018   ADDIU SP, SP, 24
9D010364  03E00008   JR RA
9D010368  00000000   NOP
9D01058C  27BDFFE8   ADDIU SP, SP, -24
9D010590  AFBF0014   SW RA, 20(SP)
9D010594  AFBE0010   SW FP, 16(SP)
9D010598  03A0F025   OR FP, SP, ZERO
9D01059C  1000000B   BEQ ZERO, ZERO, 0x9D0105CC
9D0105A0  00000000   NOP
9D0105A4  3C02BF82   LUI V0, -16510
9D0105A8  8C422030   LW V0, 8240(V0)
9D0105AC  3042FFFF   ANDI V0, V0, -1
9D0105B0  00402025   OR A0, V0, ZERO
9D0105B4  0F403015   JAL UART1_RxPushByte
9D0105B8  00000000   NOP
9D0105BC  10400003   BEQ V0, ZERO, 0x9D0105CC
9D0105C0  00000000   NOP
9D0105C4  0F403733   JAL UART1_ReadNotificationSend
9D0105C8  00000000   NOP
9D0105CC  3C02BF82   LUI V0, -16510
9D0105D0  8C422010   LW V0, 8208(V0)
9D0105D4  30430001   ANDI V1, V0, 1
9D0105D8  24020001   ADDIU V0, ZERO, 1
9D0105DC  1062FFF1   BEQ V1, V0, 0x9D0105A4
9D0105E0  00000000   NOP
9D0105E4  3C02BF81   LUI V0, -16511
9D0105E8  3C030002   LUI V1, 2
9D0105EC  AC430074   SW V1, 116(V0)
9D0105F0  00000000   NOP
9D0105F4  03C0E825   OR SP, FP, ZERO
9D0105F8  8FBF0014   LW RA, 20(SP)
9D0105FC  8FBE0010   LW FP, 16(SP)
9D010600  27BD0018   ADDIU SP, SP, 24
9D010604  03E00008   JR RA
9D010608  00000000   NOP
9D01114C  27BDFFE0   ADDIU SP, SP, -32
9D011150  AFBF001C   SW RA, 28(SP)
9D011154  AFBE0018   SW FP, 24(SP)
9D011158  AFB00014   SW S0, 20(SP)
9D01115C  03A0F025   OR FP, SP, ZERO
9D011160  3C028000   LUI V0, -32768
9D011164  24420188   ADDIU V0, V0, 392
9D011168  8C500018   LW S0, 24(V0)
9D01116C  0F4045B2   JAL UART1_WriteCountGet
9D011170  00000000   NOP
9D011174  02021023   SUBU V0, S0, V0
9D011178  2442FFFF   ADDIU V0, V0, -1
9D01117C  03C0E825   OR SP, FP, ZERO
9D011180  8FBF001C   LW RA, 28(SP)
9D011184  8FBE0018   LW FP, 24(SP)
9D011188  8FB00014   LW S0, 20(SP)
9D01118C  27BD0020   ADDIU SP, SP, 32
9D011190  03E00008   JR RA
9D011194  00000000   NOP
9D0116C8  27BDFFE0   ADDIU SP, SP, -32
9D0116CC  AFBF001C   SW RA, 28(SP)
9D0116D0  AFBE0018   SW FP, 24(SP)
9D0116D4  03A0F025   OR FP, SP, ZERO
9D0116D8  0F403FE5   JAL UART1_WritePendingBytesGet
9D0116DC  00000000   NOP
9D0116E0  AFC20010   SW V0, 16(FP)
9D0116E4  8FC20010   LW V0, 16(FP)
9D0116E8  03C0E825   OR SP, FP, ZERO
9D0116EC  8FBF001C   LW RA, 28(SP)
9D0116F0  8FBE0018   LW FP, 24(SP)
9D0116F4  27BD0020   ADDIU SP, SP, 32
9D0116F8  03E00008   JR RA
9D0116FC  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/config/dsp_tu2/peripheral/tmr/plib_tmr2.c
1:                   /*******************************************************************************
2:                     TMR Peripheral Library Interface Source File
3:                   
4:                     Company
5:                       Microchip Technology Inc.
6:                   
7:                     File Name
8:                       plib_tmr2.c
9:                   
10:                    Summary
11:                      TMR2 peripheral library source file.
12:                  
13:                    Description
14:                      This file implements the interface to the TMR peripheral library.  This
15:                      library provides access to and control of the associated peripheral
16:                      instance.
17:                  
18:                  *******************************************************************************/
19:                  
20:                  // DOM-IGNORE-BEGIN
21:                  /*******************************************************************************
22:                  * Copyright (C) 2019 Microchip Technology Inc. and its subsidiaries.
23:                  *
24:                  * Subject to your compliance with these terms, you may use Microchip software
25:                  * and any derivatives exclusively with Microchip products. It is your
26:                  * responsibility to comply with third party license terms applicable to your
27:                  * use of third party software (including open source software) that may
28:                  * accompany Microchip software.
29:                  *
30:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
31:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
32:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
33:                  * PARTICULAR PURPOSE.
34:                  *
35:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
36:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
37:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
38:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
39:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
40:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
41:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
42:                  *******************************************************************************/
43:                  // DOM-IGNORE-END
44:                  
45:                  
46:                  // *****************************************************************************
47:                  // *****************************************************************************
48:                  // Section: Included Files
49:                  // *****************************************************************************
50:                  // *****************************************************************************
51:                  
52:                  #include "device.h"
53:                  #include "plib_tmr2.h"
54:                  
55:                  
56:                  static TMR_TIMER_OBJECT tmr2Obj;
57:                  
58:                  
59:                  void TMR2_Initialize(void)
60:                  {
61:                      /* Disable Timer */
62:                      T2CONCLR = _T2CON_ON_MASK;
63:                  
64:                      /*
65:                      SIDL = 0
66:                      TCKPS =0
67:                      T32   = 0
68:                      TCS = 0
69:                      */
70:                      T2CONSET = 0x0;
71:                  
72:                      /* Clear counter */
73:                      TMR2 = 0x0;
74:                  
75:                      /*Set period */
76:                      PR2 = 1249U;
77:                  
78:                      /* Enable TMR Interrupt */
79:                      IEC0SET = _IEC0_T2IE_MASK;
80:                  
81:                  }
82:                  
83:                  
84:                  void TMR2_Start(void)
85:                  {
86:                      T2CONSET = _T2CON_ON_MASK;
87:                  }
88:                  
89:                  
90:                  void TMR2_Stop (void)
91:                  {
92:                      T2CONCLR = _T2CON_ON_MASK;
93:                  }
94:                  
95:                  void TMR2_PeriodSet(uint16_t period)
96:                  {
97:                      PR2  = period;
98:                  }
99:                  
100:                 uint16_t TMR2_PeriodGet(void)
101:                 {
102:                     return (uint16_t)PR2;
103:                 }
104:                 
105:                 uint16_t TMR2_CounterGet(void)
106:                 {
107:                     return (uint16_t)(TMR2);
108:                 }
109:                 
110:                 
111:                 uint32_t TMR2_FrequencyGet(void)
112:                 {
113:                     return (100000000);
114:                 }
115:                 
116:                 
117:                 void TIMER_2_InterruptHandler (void)
118:                 {
119:                     uint32_t status  = 0U;
120:                     status = IFS0bits.T2IF;
121:                     IFS0CLR = _IFS0_T2IF_MASK;
122:                     if((tmr2Obj.callback_fn != NULL))
123:                     {
124:                         tmr2Obj.callback_fn(status, tmr2Obj.context);
125:                     }
126:                 }
127:                 
128:                 
129:                 void TMR2_InterruptEnable(void)
130:                 {
131:                     IEC0SET = _IEC0_T2IE_MASK;
132:                 }
133:                 
134:                 
135:                 void TMR2_InterruptDisable(void)
136:                 {
137:                     IEC0CLR = _IEC0_T2IE_MASK;
138:                 }
139:                 
140:                 
141:                 void TMR2_CallbackRegister( TMR_CALLBACK callback_fn, uintptr_t context )
142:                 {
143:                     /* Save callback_fn and context in local memory */
144:                     tmr2Obj.callback_fn = callback_fn;
145:                     tmr2Obj.context = context;
146:                 }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
0000000C  00000000   NOP
00000014  00000000   NOP
00000018  00000000   NOP
00000020  00000000   NOP
9D010900  27BDFFE0   ADDIU SP, SP, -32
9D010904  AFBF001C   SW RA, 28(SP)
9D010908  AFBE0018   SW FP, 24(SP)
9D01090C  03A0F025   OR FP, SP, ZERO
9D010910  AFC00010   SW ZERO, 16(FP)
9D010914  3C02BF81   LUI V0, -16511
9D010918  8C420040   LW V0, 64(V0)
9D01091C  7C420240   EXT V0, V0, 9, 1
9D010920  304200FF   ANDI V0, V0, 255
9D010924  AFC20010   SW V0, 16(FP)
9D010928  3C02BF81   LUI V0, -16511
9D01092C  24030200   ADDIU V1, ZERO, 512
9D010930  AC430044   SW V1, 68(V0)
9D010934  8F828064   LW V0, -32668(GP)
9D010938  10400007   BEQ V0, ZERO, 0x9D010958
9D01093C  00000000   NOP
9D010940  8F828064   LW V0, -32668(GP)
9D010944  8F838068   LW V1, -32664(GP)
9D010948  00602825   OR A1, V1, ZERO
9D01094C  8FC40010   LW A0, 16(FP)
9D010950  0040F809   JALR V0
9D010954  00000000   NOP
9D010958  00000000   NOP
9D01095C  03C0E825   OR SP, FP, ZERO
9D010960  8FBF001C   LW RA, 28(SP)
9D010964  8FBE0018   LW FP, 24(SP)
9D010968  27BD0020   ADDIU SP, SP, 32
9D01096C  03E00008   JR RA
9D010970  00000000   NOP
9D010EEC  27BDFFF8   ADDIU SP, SP, -8
9D010EF0  AFBE0004   SW FP, 4(SP)
9D010EF4  03A0F025   OR FP, SP, ZERO
9D010EF8  3C02BF84   LUI V0, -16508
9D010EFC  34038000   ORI V1, ZERO, -32768
9D010F00  AC430204   SW V1, 516(V0)
9D010F04  3C02BF84   LUI V0, -16508
9D010F08  AC400208   SW ZERO, 520(V0)
9D010F0C  3C02BF84   LUI V0, -16508
9D010F10  AC400210   SW ZERO, 528(V0)
9D010F14  3C02BF84   LUI V0, -16508
9D010F18  240304E1   ADDIU V1, ZERO, 1249
9D010F1C  AC430220   SW V1, 544(V0)
9D010F20  3C02BF81   LUI V0, -16511
9D010F24  24030200   ADDIU V1, ZERO, 512
9D010F28  AC4300C8   SW V1, 200(V0)
9D010F2C  00000000   NOP
9D010F30  03C0E825   OR SP, FP, ZERO
9D010F34  8FBE0004   LW FP, 4(SP)
9D010F38  27BD0008   ADDIU SP, SP, 8
9D010F3C  03E00008   JR RA
9D010F40  00000000   NOP
9D011528  27BDFFF8   ADDIU SP, SP, -8
9D01152C  AFBE0004   SW FP, 4(SP)
9D011530  03A0F025   OR FP, SP, ZERO
9D011534  AFC40008   SW A0, 8(FP)
9D011538  AFC5000C   SW A1, 12(FP)
9D01153C  8FC20008   LW V0, 8(FP)
9D011540  AF828064   SW V0, -32668(GP)
9D011544  8FC2000C   LW V0, 12(FP)
9D011548  AF828068   SW V0, -32664(GP)
9D01154C  00000000   NOP
9D011550  03C0E825   OR SP, FP, ZERO
9D011554  8FBE0004   LW FP, 4(SP)
9D011558  27BD0008   ADDIU SP, SP, 8
9D01155C  03E00008   JR RA
9D011560  00000000   NOP
9D011804  27BDFFF8   ADDIU SP, SP, -8
9D011808  AFBE0004   SW FP, 4(SP)
9D01180C  03A0F025   OR FP, SP, ZERO
9D011810  3C02BF84   LUI V0, -16508
9D011814  34038000   ORI V1, ZERO, -32768
9D011818  AC430208   SW V1, 520(V0)
9D01181C  00000000   NOP
9D011820  03C0E825   OR SP, FP, ZERO
9D011824  8FBE0004   LW FP, 4(SP)
9D011828  27BD0008   ADDIU SP, SP, 8
9D01182C  03E00008   JR RA
9D011830  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/config/dsp_tu2/peripheral/spi/spi_master/plib_spi3_master.c
1:                   /*******************************************************************************
2:                     SPI PLIB
3:                   
4:                     Company:
5:                       Microchip Technology Inc.
6:                   
7:                     File Name:
8:                       plib_spi3_master.c
9:                   
10:                    Summary:
11:                      SPI3 Master Source File
12:                  
13:                    Description:
14:                      This file has implementation of all the interfaces provided for particular
15:                      SPI peripheral.
16:                  
17:                  *******************************************************************************/
18:                  
19:                  /*******************************************************************************
20:                  * Copyright (C) 2018-2019 Microchip Technology Inc. and its subsidiaries.
21:                  *
22:                  * Subject to your compliance with these terms, you may use Microchip software
23:                  * and any derivatives exclusively with Microchip products. It is your
24:                  * responsibility to comply with third party license terms applicable to your
25:                  * use of third party software (including open source software) that may
26:                  * accompany Microchip software.
27:                  *
28:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
29:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
30:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
31:                  * PARTICULAR PURPOSE.
32:                  *
33:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
34:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
35:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
36:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
37:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
38:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
39:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
40:                  *******************************************************************************/
41:                  
42:                  #include "plib_spi3_master.h"
43:                  
44:                  // *****************************************************************************
45:                  // *****************************************************************************
46:                  // Section: SPI3 Implementation
47:                  // *****************************************************************************
48:                  // *****************************************************************************
49:                  
50:                  
51:                  #define SPI3_CON_MSTEN                      (1 << _SPI3CON_MSTEN_POSITION)
52:                  #define SPI3_CON_CKP                        (0 << _SPI3CON_CKP_POSITION)
53:                  #define SPI3_CON_CKE                        (1 << _SPI3CON_CKE_POSITION)
54:                  #define SPI3_CON_MODE_32_MODE_16            (0 << _SPI3CON_MODE16_POSITION)
55:                  #define SPI3_CON_ENHBUF                     (1 << _SPI3CON_ENHBUF_POSITION)
56:                  #define SPI3_CON_MCLKSEL                    (0 << _SPI3CON_MCLKSEL_POSITION)
57:                  #define SPI3_CON_MSSEN                      (0 << _SPI3CON_MSSEN_POSITION)
58:                  #define SPI3_CON_SMP                        (0 << _SPI3CON_SMP_POSITION)
59:                  
60:                  void SPI3_Initialize ( void )
61:                  {
62:                      uint32_t rdata = 0U;
63:                  
64:                      /* Disable SPI3 Interrupts */
65:                      IEC4CLR = 0x4000000;
66:                      IEC4CLR = 0x8000000;
67:                      IEC4CLR = 0x10000000;
68:                  
69:                      /* STOP and Reset the SPI */
70:                      SPI3CON = 0;
71:                  
72:                      /* Clear the Receiver buffer */
73:                      rdata = SPI3BUF;
74:                      rdata = rdata;
75:                  
76:                      /* Clear SPI3 Interrupt flags */
77:                      IFS4CLR = 0x4000000;
78:                      IFS4CLR = 0x8000000;
79:                      IFS4CLR = 0x10000000;
80:                  
81:                      /* BAUD Rate register Setup */
82:                      SPI3BRG = 1;
83:                  
84:                      /* CLear the Overflow */
85:                      SPI3STATCLR = _SPI3STAT_SPIROV_MASK;
86:                  
87:                      /*
88:                      MSTEN = 1
89:                      CKP = 0
90:                      CKE = 1
91:                      MODE<32,16> = 0
92:                      ENHBUF = 1
93:                      MSSEN = 0
94:                      MCLKSEL = 0
95:                      */
96:                      SPI3CONSET = (SPI3_CON_MSSEN | SPI3_CON_MCLKSEL | SPI3_CON_ENHBUF | SPI3_CON_MODE_32_MODE_16 | SPI3_CON_CKE | SPI3_CON_CKP | SPI3_CON_MSTEN | SPI3_CON_SMP);
97:                  
98:                      /* Enable transmit interrupt when transmit buffer is completely empty (STXISEL = '01') */
99:                      /* Enable receive interrupt when the receive buffer is not empty (SRXISEL = '01') */
100:                     SPI3CONSET = 0x00000005;
101:                 
102:                 
103:                     /* Enable SPI3 */
104:                     SPI3CONSET = _SPI3CON_ON_MASK;
105:                 }
106:                 
107:                 bool SPI3_TransferSetup (SPI_TRANSFER_SETUP* setup, uint32_t spiSourceClock )
108:                 {
109:                     uint32_t t_brg;
110:                     uint32_t baudHigh;
111:                     uint32_t baudLow;
112:                     uint32_t errorHigh;
113:                     uint32_t errorLow;
114:                 
115:                     if ((setup == NULL) || (setup->clockFrequency == 0))
116:                     {
117:                         return false;
118:                     }
119:                 
120:                     if(spiSourceClock == 0)
121:                     {
122:                         // Use Master Clock Frequency set in GUI
123:                         spiSourceClock = 100000000;
124:                     }
125:                 
126:                     t_brg = (((spiSourceClock / (setup->clockFrequency)) / 2u) - 1u);
127:                     baudHigh = spiSourceClock / (2u * (t_brg + 1u));
128:                     baudLow = spiSourceClock / (2u * (t_brg + 2u));
129:                     errorHigh = baudHigh - setup->clockFrequency;
130:                     errorLow = setup->clockFrequency - baudLow;
131:                 
132:                     if (errorHigh > errorLow)
133:                     {
134:                         t_brg++;
135:                     }
136:                 
137:                     if(t_brg > 511)
138:                     {
139:                         return false;
140:                     }
141:                 
142:                     SPI3BRG = t_brg;
143:                     SPI3CON = (SPI3CON & (~(_SPI3CON_MODE16_MASK | _SPI3CON_MODE32_MASK | _SPI3CON_CKP_MASK | _SPI3CON_CKE_MASK))) |
144:                                             (setup->clockPolarity | setup->clockPhase | setup->dataBits);
145:                 
146:                     return true;
147:                 }
148:                 
149:                 bool SPI3_Write(void* pTransmitData, size_t txSize)
150:                 {
151:                     return(SPI3_WriteRead(pTransmitData, txSize, NULL, 0));
152:                 }
153:                 
154:                 bool SPI3_Read(void* pReceiveData, size_t rxSize)
155:                 {
156:                     return(SPI3_WriteRead(NULL, 0, pReceiveData, rxSize));
157:                 }
158:                 
159:                 bool SPI3_IsTransmitterBusy (void)
160:                 {
161:                     return ((SPI3STAT & _SPI3STAT_SRMT_MASK) == 0)? true : false;
162:                 }
163:                 
164:                 bool SPI3_WriteRead(void* pTransmitData, size_t txSize, void* pReceiveData, size_t rxSize)
165:                 {
166:                     size_t txCount = 0;
167:                     size_t rxCount = 0;
168:                     size_t dummySize = 0;
169:                     size_t dummyRxCntr = 0;
170:                     size_t receivedData;
171:                     bool isSuccess = false;
172:                 
173:                     /* Verify the request */
174:                     if (((txSize > 0) && (pTransmitData != NULL)) || ((rxSize > 0) && (pReceiveData != NULL)))
175:                     {
176:                         if (pTransmitData == NULL)
177:                         {
178:                             txSize = 0;
179:                         }
180:                         if (pReceiveData == NULL)
181:                         {
182:                             rxSize = 0;
183:                         }
184:                 
185:                         /* Clear the receive overflow error if any */
186:                         SPI3STATCLR = _SPI3STAT_SPIROV_MASK;
187:                 
188:                         /* Flush out any unread data in SPI read buffer from the previous transfer */
189:                         while ((bool)(SPI3STAT & _SPI3STAT_SPIRBE_MASK) == false)
190:                         {
191:                             receivedData = SPI3BUF;
192:                         }
193:                 
194:                         if (rxSize > txSize)
195:                         {
196:                             dummySize = rxSize - txSize;
197:                         }
198:                 
199:                         /* If dataBit size is 32 bits */
200:                         if (_SPI3CON_MODE32_MASK == (SPI3CON & _SPI3CON_MODE32_MASK))
201:                         {
202:                             rxSize >>= 2;
203:                             txSize >>= 2;
204:                             dummySize >>= 2;
205:                         }
206:                         /* If dataBit size is 16 bits */
207:                         else if (_SPI3CON_MODE16_MASK == (SPI3CON & _SPI3CON_MODE16_MASK))
208:                         {
209:                             rxSize >>= 1;
210:                             txSize >>= 1;
211:                             dummySize >>= 1;
212:                         }
213:                 
214:                         /* Make sure transmit buffer is empty */
215:                         while((bool)(SPI3STAT & _SPI3STAT_SPITBE_MASK) == false);
216:                 
217:                         while ((txCount != txSize) || (dummySize != 0))
218:                         {
219:                             if (txCount != txSize)
220:                             {
221:                                 if((_SPI3CON_MODE32_MASK) == (SPI3CON & (_SPI3CON_MODE32_MASK)))
222:                                 {
223:                                     SPI3BUF = ((uint32_t*)pTransmitData)[txCount++];
224:                                 }
225:                                 else if((_SPI3CON_MODE16_MASK) == (SPI3CON & (_SPI3CON_MODE16_MASK)))
226:                                 {
227:                                     SPI3BUF = ((uint16_t*)pTransmitData)[txCount++];
228:                                 }
229:                                 else
230:                                 {
231:                                     SPI3BUF = ((uint8_t*)pTransmitData)[txCount++];
232:                                 }
233:                             }
234:                             else if (dummySize > 0)
235:                             {
236:                                 SPI3BUF = 0xff;
237:                                 dummySize--;
238:                             }
239:                 
240:                             if (rxCount == rxSize)
241:                             {
242:                                 /* If inside this if condition, then it means that txSize > rxSize and all RX bytes are received */
243:                 
244:                                 /* For transmit only request, wait for buffer to become empty */
245:                                 while((bool)(SPI3STAT & _SPI3STAT_SPITBE_MASK) == false);
246:                 
247:                                 /* Read until the receive buffer is not empty */
248:                                 while ((bool)(SPI3STAT & _SPI3STAT_SPIRBE_MASK) == false)
249:                                 {
250:                                     receivedData = SPI3BUF;
251:                                     dummyRxCntr++;
252:                                 }
253:                             }
254:                             else
255:                             {
256:                                 /* If data is read, wait for the Receiver Data the data to become available */
257:                                 while((SPI3STAT & _SPI3STAT_SPIRBE_MASK) == _SPI3STAT_SPIRBE_MASK);
258:                 
259:                                 /* We have data waiting in the SPI buffer */
260:                                 receivedData = SPI3BUF;
261:                 
262:                                 if (rxCount < rxSize)
263:                                 {
264:                                     if((_SPI3CON_MODE32_MASK) == (SPI3CON & (_SPI3CON_MODE32_MASK)))
265:                                     {
266:                                         ((uint32_t*)pReceiveData)[rxCount++]  = receivedData;
267:                                     }
268:                                     else if((_SPI3CON_MODE16_MASK) == (SPI3CON & (_SPI3CON_MODE16_MASK)))
269:                                     {
270:                                         ((uint16_t*)pReceiveData)[rxCount++]  = receivedData;
271:                                     }
272:                                     else
273:                                     {
274:                                         ((uint8_t*)pReceiveData)[rxCount++]  = receivedData;
275:                                     }
276:                                 }
277:                             }
278:                         }
279:                 
280:                         /* Make sure no data is pending in the shift register */
281:                         while ((bool)((SPI3STAT & _SPI3STAT_SRMT_MASK) == false));
282:                 
283:                         /* Make sure for every character transmitted a character is also received back.
284:                          * If this is not done, we may prematurely exit this routine with the last bit still being
285:                          * transmitted out. As a result, the application may prematurely deselect the CS line and also
286:                          * the next request can receive last character of previous request as its first character.
287:                          */
288:                         if (txSize > rxSize)
289:                         {
290:                             while (dummyRxCntr != (txSize - rxSize))
291:                             {
292:                                 /* Wait for all the RX bytes to be received. */
293:                                 while ((bool)(SPI3STAT & _SPI3STAT_SPIRBE_MASK) == false)
294:                                 {
295:                                     receivedData = SPI3BUF;
296:                                     dummyRxCntr++;
297:                                 }
298:                             }
299:                         }
300:                 
301:                         isSuccess = true;
302:                     }
303:                 
304:                     return isSuccess;
305:                 }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
00000014  00000000   NOP
00000018  00000000   NOP
0000001C  00000000   NOP
00000020  00000000   NOP
00000024  00000000   NOP
00000028  00000000   NOP
0000002C  00000000   NOP
00000030  00000000   NOP
0000003C  00000000   NOP
00000048  00000000   NOP
00000054  00000000   NOP
0000005C  00000000   NOP
00000060  00000000   NOP
0000006C  00000000   NOP
00000070  00000000   NOP
00000074  00000000   NOP
0000007C  00000000   NOP
00000080  00000000   NOP
00000088  00000000   NOP
0000008C  00000000   NOP
00000094  00000000   NOP
000000A0  00000000   NOP
000000AC  00000000   NOP
000000B4  00000000   NOP
000000C4  00000000   NOP
000000C8  00000000   NOP
000000CC  00000000   NOP
000000D8  00000000   NOP
000000E0  00000000   NOP
000000E4  00000000   NOP
000000EC  00000000   NOP
000000F0  00000000   NOP
000000FC  00000000   NOP
00000100  00000000   NOP
00000108  00000000   NOP
0000010C  00000000   NOP
0000011C  00000000   NOP
00000128  00000000   NOP
00000134  00000000   NOP
00000140  00000000   NOP
00000144  00000000   NOP
0000014C  00000000   NOP
00000154  00000000   NOP
00000158  00000000   NOP
0000015C  00000000   NOP
00000160  00000000   NOP
00000164  00000000   NOP
00000168  00000000   NOP
00000170  00000000   NOP
00000174  00000000   NOP
00000178  00000000   NOP
00000188  00000000   NOP
00000194  00000000   NOP
000001A0  00000000   NOP
000001AC  00000000   NOP
000001BC  00000000   NOP
000001CC  00000000   NOP
000001D8  00000000   NOP
000001E4  00000000   NOP
000001F0  00000000   NOP
00000204  00000000   NOP
00000214  00000000   NOP
00000220  00000000   NOP
00000230  00000000   NOP
00000240  00000000   NOP
0000024C  00000000   NOP
00000258  00000000   NOP
00000264  00000000   NOP
00000274  00000000   NOP
00000278  00000000   NOP
00000284  00000000   NOP
0000028C  00000000   NOP
00000294  00000000   NOP
000002A0  00000000   NOP
000002AC  00000000   NOP
000002B8  00000000   NOP
000002C8  00000000   NOP
000002CC  00000000   NOP
000002D8  00000000   NOP
000002E4  00000000   NOP
000002F0  00000000   NOP
00000304  00000000   NOP
00000310  00000000   NOP
0000031C  00000000   NOP
00000328  00000000   NOP
00000334  00000000   NOP
00000344  00000000   NOP
00000350  00000000   NOP
0000035C  00000000   NOP
00000368  00000000   NOP
00000374  00000000   NOP
00000388  00000000   NOP
00000394  00000000   NOP
0000039C  00000000   NOP
000003A8  00000000   NOP
000003B8  00000000   NOP
000003C4  00000000   NOP
000003C8  00000000   NOP
000003D4  00000000   NOP
000003DC  00000000   NOP
000003F0  00000000   NOP
000003F8  00000000   NOP
00000404  00000000   NOP
00000410  00000000   NOP
0000041C  00000000   NOP
00000424  00000000   NOP
00000430  00000000   NOP
0000043C  00000000   NOP
00000444  00000000   NOP
00000448  00000000   NOP
9D00F044  27BDFFF0   ADDIU SP, SP, -16
9D00F048  AFBE000C   SW FP, 12(SP)
9D00F04C  03A0F025   OR FP, SP, ZERO
9D00F050  AFC00000   SW ZERO, 0(FP)
9D00F054  3C02BF81   LUI V0, -16511
9D00F058  3C030400   LUI V1, 1024
9D00F05C  AC430104   SW V1, 260(V0)
9D00F060  3C02BF81   LUI V0, -16511
9D00F064  3C030800   LUI V1, 2048
9D00F068  AC430104   SW V1, 260(V0)
9D00F06C  3C02BF81   LUI V0, -16511
9D00F070  3C031000   LUI V1, 4096
9D00F074  AC430104   SW V1, 260(V0)
9D00F078  3C02BF82   LUI V0, -16510
9D00F07C  AC401400   SW ZERO, 5120(V0)
9D00F080  3C02BF82   LUI V0, -16510
9D00F084  8C421420   LW V0, 5152(V0)
9D00F088  AFC20000   SW V0, 0(FP)
9D00F08C  3C02BF81   LUI V0, -16511
9D00F090  3C030400   LUI V1, 1024
9D00F094  AC430084   SW V1, 132(V0)
9D00F098  3C02BF81   LUI V0, -16511
9D00F09C  3C030800   LUI V1, 2048
9D00F0A0  AC430084   SW V1, 132(V0)
9D00F0A4  3C02BF81   LUI V0, -16511
9D00F0A8  3C031000   LUI V1, 4096
9D00F0AC  AC430084   SW V1, 132(V0)
9D00F0B0  3C02BF82   LUI V0, -16510
9D00F0B4  24030001   ADDIU V1, ZERO, 1
9D00F0B8  AC431430   SW V1, 5168(V0)
9D00F0BC  3C02BF82   LUI V0, -16510
9D00F0C0  24030040   ADDIU V1, ZERO, 64
9D00F0C4  AC431414   SW V1, 5140(V0)
9D00F0C8  3C02BF82   LUI V0, -16510
9D00F0CC  3C030001   LUI V1, 1
9D00F0D0  34630120   ORI V1, V1, 288
9D00F0D4  AC431408   SW V1, 5128(V0)
9D00F0D8  3C02BF82   LUI V0, -16510
9D00F0DC  24030005   ADDIU V1, ZERO, 5
9D00F0E0  AC431408   SW V1, 5128(V0)
9D00F0E4  3C02BF82   LUI V0, -16510
9D00F0E8  34038000   ORI V1, ZERO, -32768
9D00F0EC  AC431408   SW V1, 5128(V0)
9D00F0F0  00000000   NOP
9D00F0F4  03C0E825   OR SP, FP, ZERO
9D00F0F8  8FBE000C   LW FP, 12(SP)
9D00F0FC  27BD0010   ADDIU SP, SP, 16
9D00F100  03E00008   JR RA
9D00F104  00000000   NOP
9D01176C  27BDFFF8   ADDIU SP, SP, -8
9D011770  AFBE0004   SW FP, 4(SP)
9D011774  03A0F025   OR FP, SP, ZERO
9D011778  3C02BF82   LUI V0, -16510
9D01177C  8C421410   LW V0, 5136(V0)
9D011780  30420080   ANDI V0, V0, 128
9D011784  2C420001   SLTIU V0, V0, 1
9D011788  304200FF   ANDI V0, V0, 255
9D01178C  03C0E825   OR SP, FP, ZERO
9D011790  8FBE0004   LW FP, 4(SP)
9D011794  27BD0008   ADDIU SP, SP, 8
9D011798  03E00008   JR RA
9D01179C  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/config/dsp_tu2/peripheral/spi/spi_master/plib_spi2_master.c
1:                   /*******************************************************************************
2:                     SPI PLIB
3:                   
4:                     Company:
5:                       Microchip Technology Inc.
6:                   
7:                     File Name:
8:                       plib_spi2_master.c
9:                   
10:                    Summary:
11:                      SPI2 Master Source File
12:                  
13:                    Description:
14:                      This file has implementation of all the interfaces provided for particular
15:                      SPI peripheral.
16:                  
17:                  *******************************************************************************/
18:                  
19:                  /*******************************************************************************
20:                  * Copyright (C) 2018-2019 Microchip Technology Inc. and its subsidiaries.
21:                  *
22:                  * Subject to your compliance with these terms, you may use Microchip software
23:                  * and any derivatives exclusively with Microchip products. It is your
24:                  * responsibility to comply with third party license terms applicable to your
25:                  * use of third party software (including open source software) that may
26:                  * accompany Microchip software.
27:                  *
28:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
29:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
30:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
31:                  * PARTICULAR PURPOSE.
32:                  *
33:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
34:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
35:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
36:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
37:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
38:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
39:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
40:                  *******************************************************************************/
41:                  
42:                  #include "plib_spi2_master.h"
43:                  
44:                  // *****************************************************************************
45:                  // *****************************************************************************
46:                  // Section: SPI2 Implementation
47:                  // *****************************************************************************
48:                  // *****************************************************************************
49:                  
50:                  
51:                  #define SPI2_CON_MSTEN                      (1 << _SPI2CON_MSTEN_POSITION)
52:                  #define SPI2_CON_CKP                        (0 << _SPI2CON_CKP_POSITION)
53:                  #define SPI2_CON_CKE                        (1 << _SPI2CON_CKE_POSITION)
54:                  #define SPI2_CON_MODE_32_MODE_16            (0 << _SPI2CON_MODE16_POSITION)
55:                  #define SPI2_CON_ENHBUF                     (1 << _SPI2CON_ENHBUF_POSITION)
56:                  #define SPI2_CON_MCLKSEL                    (0 << _SPI2CON_MCLKSEL_POSITION)
57:                  #define SPI2_CON_MSSEN                      (0 << _SPI2CON_MSSEN_POSITION)
58:                  #define SPI2_CON_SMP                        (0 << _SPI2CON_SMP_POSITION)
59:                  
60:                  void SPI2_Initialize ( void )
61:                  {
62:                      uint32_t rdata = 0U;
63:                  
64:                      /* Disable SPI2 Interrupts */
65:                      IEC4CLR = 0x4000;
66:                      IEC4CLR = 0x8000;
67:                      IEC4CLR = 0x10000;
68:                  
69:                      /* STOP and Reset the SPI */
70:                      SPI2CON = 0;
71:                  
72:                      /* Clear the Receiver buffer */
73:                      rdata = SPI2BUF;
74:                      rdata = rdata;
75:                  
76:                      /* Clear SPI2 Interrupt flags */
77:                      IFS4CLR = 0x4000;
78:                      IFS4CLR = 0x8000;
79:                      IFS4CLR = 0x10000;
80:                  
81:                      /* BAUD Rate register Setup */
82:                      SPI2BRG = 49;
83:                  
84:                      /* CLear the Overflow */
85:                      SPI2STATCLR = _SPI2STAT_SPIROV_MASK;
86:                  
87:                      /*
88:                      MSTEN = 1
89:                      CKP = 0
90:                      CKE = 1
91:                      MODE<32,16> = 0
92:                      ENHBUF = 1
93:                      MSSEN = 0
94:                      MCLKSEL = 0
95:                      */
96:                      SPI2CONSET = (SPI2_CON_MSSEN | SPI2_CON_MCLKSEL | SPI2_CON_ENHBUF | SPI2_CON_MODE_32_MODE_16 | SPI2_CON_CKE | SPI2_CON_CKP | SPI2_CON_MSTEN | SPI2_CON_SMP);
97:                  
98:                      /* Enable transmit interrupt when transmit buffer is completely empty (STXISEL = '01') */
99:                      /* Enable receive interrupt when the receive buffer is not empty (SRXISEL = '01') */
100:                     SPI2CONSET = 0x00000005;
101:                 
102:                 
103:                     /* Enable SPI2 */
104:                     SPI2CONSET = _SPI2CON_ON_MASK;
105:                 }
106:                 
107:                 bool SPI2_TransferSetup (SPI_TRANSFER_SETUP* setup, uint32_t spiSourceClock )
108:                 {
109:                     uint32_t t_brg;
110:                     uint32_t baudHigh;
111:                     uint32_t baudLow;
112:                     uint32_t errorHigh;
113:                     uint32_t errorLow;
114:                 
115:                     if ((setup == NULL) || (setup->clockFrequency == 0))
116:                     {
117:                         return false;
118:                     }
119:                 
120:                     if(spiSourceClock == 0)
121:                     {
122:                         // Use Master Clock Frequency set in GUI
123:                         spiSourceClock = 100000000;
124:                     }
125:                 
126:                     t_brg = (((spiSourceClock / (setup->clockFrequency)) / 2u) - 1u);
127:                     baudHigh = spiSourceClock / (2u * (t_brg + 1u));
128:                     baudLow = spiSourceClock / (2u * (t_brg + 2u));
129:                     errorHigh = baudHigh - setup->clockFrequency;
130:                     errorLow = setup->clockFrequency - baudLow;
131:                 
132:                     if (errorHigh > errorLow)
133:                     {
134:                         t_brg++;
135:                     }
136:                 
137:                     if(t_brg > 511)
138:                     {
139:                         return false;
140:                     }
141:                 
142:                     SPI2BRG = t_brg;
143:                     SPI2CON = (SPI2CON & (~(_SPI2CON_MODE16_MASK | _SPI2CON_MODE32_MASK | _SPI2CON_CKP_MASK | _SPI2CON_CKE_MASK))) |
144:                                             (setup->clockPolarity | setup->clockPhase | setup->dataBits);
145:                 
146:                     return true;
147:                 }
148:                 
149:                 bool SPI2_Write(void* pTransmitData, size_t txSize)
150:                 {
151:                     return(SPI2_WriteRead(pTransmitData, txSize, NULL, 0));
152:                 }
153:                 
154:                 bool SPI2_Read(void* pReceiveData, size_t rxSize)
155:                 {
156:                     return(SPI2_WriteRead(NULL, 0, pReceiveData, rxSize));
157:                 }
158:                 
159:                 bool SPI2_IsTransmitterBusy (void)
160:                 {
161:                     return ((SPI2STAT & _SPI2STAT_SRMT_MASK) == 0)? true : false;
162:                 }
163:                 
164:                 bool SPI2_WriteRead(void* pTransmitData, size_t txSize, void* pReceiveData, size_t rxSize)
165:                 {
166:                     size_t txCount = 0;
167:                     size_t rxCount = 0;
168:                     size_t dummySize = 0;
169:                     size_t dummyRxCntr = 0;
170:                     size_t receivedData;
171:                     bool isSuccess = false;
172:                 
173:                     /* Verify the request */
174:                     if (((txSize > 0) && (pTransmitData != NULL)) || ((rxSize > 0) && (pReceiveData != NULL)))
175:                     {
176:                         if (pTransmitData == NULL)
177:                         {
178:                             txSize = 0;
179:                         }
180:                         if (pReceiveData == NULL)
181:                         {
182:                             rxSize = 0;
183:                         }
184:                 
185:                         /* Clear the receive overflow error if any */
186:                         SPI2STATCLR = _SPI2STAT_SPIROV_MASK;
187:                 
188:                         /* Flush out any unread data in SPI read buffer from the previous transfer */
189:                         while ((bool)(SPI2STAT & _SPI2STAT_SPIRBE_MASK) == false)
190:                         {
191:                             receivedData = SPI2BUF;
192:                         }
193:                 
194:                         if (rxSize > txSize)
195:                         {
196:                             dummySize = rxSize - txSize;
197:                         }
198:                 
199:                         /* If dataBit size is 32 bits */
200:                         if (_SPI2CON_MODE32_MASK == (SPI2CON & _SPI2CON_MODE32_MASK))
201:                         {
202:                             rxSize >>= 2;
203:                             txSize >>= 2;
204:                             dummySize >>= 2;
205:                         }
206:                         /* If dataBit size is 16 bits */
207:                         else if (_SPI2CON_MODE16_MASK == (SPI2CON & _SPI2CON_MODE16_MASK))
208:                         {
209:                             rxSize >>= 1;
210:                             txSize >>= 1;
211:                             dummySize >>= 1;
212:                         }
213:                 
214:                         /* Make sure transmit buffer is empty */
215:                         while((bool)(SPI2STAT & _SPI2STAT_SPITBE_MASK) == false);
216:                 
217:                         while ((txCount != txSize) || (dummySize != 0))
218:                         {
219:                             if (txCount != txSize)
220:                             {
221:                                 if((_SPI2CON_MODE32_MASK) == (SPI2CON & (_SPI2CON_MODE32_MASK)))
222:                                 {
223:                                     SPI2BUF = ((uint32_t*)pTransmitData)[txCount++];
224:                                 }
225:                                 else if((_SPI2CON_MODE16_MASK) == (SPI2CON & (_SPI2CON_MODE16_MASK)))
226:                                 {
227:                                     SPI2BUF = ((uint16_t*)pTransmitData)[txCount++];
228:                                 }
229:                                 else
230:                                 {
231:                                     SPI2BUF = ((uint8_t*)pTransmitData)[txCount++];
232:                                 }
233:                             }
234:                             else if (dummySize > 0)
235:                             {
236:                                 SPI2BUF = 0xff;
237:                                 dummySize--;
238:                             }
239:                 
240:                             if (rxCount == rxSize)
241:                             {
242:                                 /* If inside this if condition, then it means that txSize > rxSize and all RX bytes are received */
243:                 
244:                                 /* For transmit only request, wait for buffer to become empty */
245:                                 while((bool)(SPI2STAT & _SPI2STAT_SPITBE_MASK) == false);
246:                 
247:                                 /* Read until the receive buffer is not empty */
248:                                 while ((bool)(SPI2STAT & _SPI2STAT_SPIRBE_MASK) == false)
249:                                 {
250:                                     receivedData = SPI2BUF;
251:                                     dummyRxCntr++;
252:                                 }
253:                             }
254:                             else
255:                             {
256:                                 /* If data is read, wait for the Receiver Data the data to become available */
257:                                 while((SPI2STAT & _SPI2STAT_SPIRBE_MASK) == _SPI2STAT_SPIRBE_MASK);
258:                 
259:                                 /* We have data waiting in the SPI buffer */
260:                                 receivedData = SPI2BUF;
261:                 
262:                                 if (rxCount < rxSize)
263:                                 {
264:                                     if((_SPI2CON_MODE32_MASK) == (SPI2CON & (_SPI2CON_MODE32_MASK)))
265:                                     {
266:                                         ((uint32_t*)pReceiveData)[rxCount++]  = receivedData;
267:                                     }
268:                                     else if((_SPI2CON_MODE16_MASK) == (SPI2CON & (_SPI2CON_MODE16_MASK)))
269:                                     {
270:                                         ((uint16_t*)pReceiveData)[rxCount++]  = receivedData;
271:                                     }
272:                                     else
273:                                     {
274:                                         ((uint8_t*)pReceiveData)[rxCount++]  = receivedData;
275:                                     }
276:                                 }
277:                             }
278:                         }
279:                 
280:                         /* Make sure no data is pending in the shift register */
281:                         while ((bool)((SPI2STAT & _SPI2STAT_SRMT_MASK) == false));
282:                 
283:                         /* Make sure for every character transmitted a character is also received back.
284:                          * If this is not done, we may prematurely exit this routine with the last bit still being
285:                          * transmitted out. As a result, the application may prematurely deselect the CS line and also
286:                          * the next request can receive last character of previous request as its first character.
287:                          */
288:                         if (txSize > rxSize)
289:                         {
290:                             while (dummyRxCntr != (txSize - rxSize))
291:                             {
292:                                 /* Wait for all the RX bytes to be received. */
293:                                 while ((bool)(SPI2STAT & _SPI2STAT_SPIRBE_MASK) == false)
294:                                 {
295:                                     receivedData = SPI2BUF;
296:                                     dummyRxCntr++;
297:                                 }
298:                             }
299:                         }
300:                 
301:                         isSuccess = true;
302:                     }
303:                 
304:                     return isSuccess;
305:                 }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
0000000C  00000000   NOP
00000014  00000000   NOP
00000018  00000000   NOP
0000001C  00000000   NOP
00000020  00000000   NOP
00000024  00000000   NOP
00000028  00000000   NOP
0000002C  00000000   NOP
00000030  00000000   NOP
0000003C  00000000   NOP
00000048  00000000   NOP
00000054  00000000   NOP
0000005C  00000000   NOP
00000060  00000000   NOP
0000006C  00000000   NOP
00000070  00000000   NOP
00000074  00000000   NOP
0000007C  00000000   NOP
00000080  00000000   NOP
00000088  00000000   NOP
0000008C  00000000   NOP
00000094  00000000   NOP
000000A0  00000000   NOP
000000AC  00000000   NOP
000000B4  00000000   NOP
000000C4  00000000   NOP
000000C8  00000000   NOP
000000CC  00000000   NOP
000000D8  00000000   NOP
000000E0  00000000   NOP
000000E4  00000000   NOP
000000EC  00000000   NOP
000000F0  00000000   NOP
000000FC  00000000   NOP
00000100  00000000   NOP
00000108  00000000   NOP
0000010C  00000000   NOP
0000011C  00000000   NOP
00000128  00000000   NOP
00000134  00000000   NOP
00000140  00000000   NOP
00000144  00000000   NOP
0000014C  00000000   NOP
00000154  00000000   NOP
00000158  00000000   NOP
0000015C  00000000   NOP
00000160  00000000   NOP
00000164  00000000   NOP
00000168  00000000   NOP
00000170  00000000   NOP
00000174  00000000   NOP
00000178  00000000   NOP
00000188  00000000   NOP
00000194  00000000   NOP
000001A0  00000000   NOP
000001AC  00000000   NOP
000001BC  00000000   NOP
000001CC  00000000   NOP
000001D8  00000000   NOP
000001E4  00000000   NOP
000001F0  00000000   NOP
00000204  00000000   NOP
00000214  00000000   NOP
00000220  00000000   NOP
00000230  00000000   NOP
00000240  00000000   NOP
0000024C  00000000   NOP
00000258  00000000   NOP
00000264  00000000   NOP
00000274  00000000   NOP
00000278  00000000   NOP
00000284  00000000   NOP
0000028C  00000000   NOP
00000294  00000000   NOP
000002A0  00000000   NOP
000002AC  00000000   NOP
000002B8  00000000   NOP
000002C8  00000000   NOP
000002CC  00000000   NOP
000002D8  00000000   NOP
000002E4  00000000   NOP
000002F0  00000000   NOP
00000304  00000000   NOP
00000310  00000000   NOP
0000031C  00000000   NOP
00000328  00000000   NOP
00000334  00000000   NOP
00000344  00000000   NOP
00000350  00000000   NOP
0000035C  00000000   NOP
00000368  00000000   NOP
00000374  00000000   NOP
00000388  00000000   NOP
00000394  00000000   NOP
0000039C  00000000   NOP
000003A8  00000000   NOP
000003B8  00000000   NOP
000003C4  00000000   NOP
000003C8  00000000   NOP
000003D4  00000000   NOP
000003DC  00000000   NOP
000003F0  00000000   NOP
000003F8  00000000   NOP
00000404  00000000   NOP
00000410  00000000   NOP
0000041C  00000000   NOP
00000424  00000000   NOP
00000430  00000000   NOP
0000043C  00000000   NOP
00000444  00000000   NOP
00000448  00000000   NOP
9D00F108  27BDFFF0   ADDIU SP, SP, -16
9D00F10C  AFBE000C   SW FP, 12(SP)
9D00F110  03A0F025   OR FP, SP, ZERO
9D00F114  AFC00000   SW ZERO, 0(FP)
9D00F118  3C02BF81   LUI V0, -16511
9D00F11C  24034000   ADDIU V1, ZERO, 16384
9D00F120  AC430104   SW V1, 260(V0)
9D00F124  3C02BF81   LUI V0, -16511
9D00F128  34038000   ORI V1, ZERO, -32768
9D00F12C  AC430104   SW V1, 260(V0)
9D00F130  3C02BF81   LUI V0, -16511
9D00F134  3C030001   LUI V1, 1
9D00F138  AC430104   SW V1, 260(V0)
9D00F13C  3C02BF82   LUI V0, -16510
9D00F140  AC401200   SW ZERO, 4608(V0)
9D00F144  3C02BF82   LUI V0, -16510
9D00F148  8C421220   LW V0, 4640(V0)
9D00F14C  AFC20000   SW V0, 0(FP)
9D00F150  3C02BF81   LUI V0, -16511
9D00F154  24034000   ADDIU V1, ZERO, 16384
9D00F158  AC430084   SW V1, 132(V0)
9D00F15C  3C02BF81   LUI V0, -16511
9D00F160  34038000   ORI V1, ZERO, -32768
9D00F164  AC430084   SW V1, 132(V0)
9D00F168  3C02BF81   LUI V0, -16511
9D00F16C  3C030001   LUI V1, 1
9D00F170  AC430084   SW V1, 132(V0)
9D00F174  3C02BF82   LUI V0, -16510
9D00F178  24030031   ADDIU V1, ZERO, 49
9D00F17C  AC431230   SW V1, 4656(V0)
9D00F180  3C02BF82   LUI V0, -16510
9D00F184  24030040   ADDIU V1, ZERO, 64
9D00F188  AC431214   SW V1, 4628(V0)
9D00F18C  3C02BF82   LUI V0, -16510
9D00F190  3C030001   LUI V1, 1
9D00F194  34630120   ORI V1, V1, 288
9D00F198  AC431208   SW V1, 4616(V0)
9D00F19C  3C02BF82   LUI V0, -16510
9D00F1A0  24030005   ADDIU V1, ZERO, 5
9D00F1A4  AC431208   SW V1, 4616(V0)
9D00F1A8  3C02BF82   LUI V0, -16510
9D00F1AC  34038000   ORI V1, ZERO, -32768
9D00F1B0  AC431208   SW V1, 4616(V0)
9D00F1B4  00000000   NOP
9D00F1B8  03C0E825   OR SP, FP, ZERO
9D00F1BC  8FBE000C   LW FP, 12(SP)
9D00F1C0  27BD0010   ADDIU SP, SP, 16
9D00F1C4  03E00008   JR RA
9D00F1C8  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/config/dsp_tu2/peripheral/spi/spi_master/plib_spi1_master.c
1:                   /*******************************************************************************
2:                     SPI PLIB
3:                   
4:                     Company:
5:                       Microchip Technology Inc.
6:                   
7:                     File Name:
8:                       plib_spi1_master.c
9:                   
10:                    Summary:
11:                      SPI1 Master Source File
12:                  
13:                    Description:
14:                      This file has implementation of all the interfaces provided for particular
15:                      SPI peripheral.
16:                  
17:                  *******************************************************************************/
18:                  
19:                  /*******************************************************************************
20:                  * Copyright (C) 2018-2019 Microchip Technology Inc. and its subsidiaries.
21:                  *
22:                  * Subject to your compliance with these terms, you may use Microchip software
23:                  * and any derivatives exclusively with Microchip products. It is your
24:                  * responsibility to comply with third party license terms applicable to your
25:                  * use of third party software (including open source software) that may
26:                  * accompany Microchip software.
27:                  *
28:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
29:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
30:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
31:                  * PARTICULAR PURPOSE.
32:                  *
33:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
34:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
35:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
36:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
37:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
38:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
39:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
40:                  *******************************************************************************/
41:                  
42:                  #include "plib_spi1_master.h"
43:                  
44:                  // *****************************************************************************
45:                  // *****************************************************************************
46:                  // Section: SPI1 Implementation
47:                  // *****************************************************************************
48:                  // *****************************************************************************
49:                  
50:                  
51:                  #define SPI1_CON_MSTEN                      (1 << _SPI1CON_MSTEN_POSITION)
52:                  #define SPI1_CON_CKP                        (0 << _SPI1CON_CKP_POSITION)
53:                  #define SPI1_CON_CKE                        (1 << _SPI1CON_CKE_POSITION)
54:                  #define SPI1_CON_MODE_32_MODE_16            (0 << _SPI1CON_MODE16_POSITION)
55:                  #define SPI1_CON_ENHBUF                     (1 << _SPI1CON_ENHBUF_POSITION)
56:                  #define SPI1_CON_MCLKSEL                    (0 << _SPI1CON_MCLKSEL_POSITION)
57:                  #define SPI1_CON_MSSEN                      (0 << _SPI1CON_MSSEN_POSITION)
58:                  #define SPI1_CON_SMP                        (0 << _SPI1CON_SMP_POSITION)
59:                  
60:                  void SPI1_Initialize ( void )
61:                  {
62:                      uint32_t rdata = 0U;
63:                  
64:                      /* Disable SPI1 Interrupts */
65:                      IEC3CLR = 0x2000;
66:                      IEC3CLR = 0x4000;
67:                      IEC3CLR = 0x8000;
68:                  
69:                      /* STOP and Reset the SPI */
70:                      SPI1CON = 0;
71:                  
72:                      /* Clear the Receiver buffer */
73:                      rdata = SPI1BUF;
74:                      rdata = rdata;
75:                  
76:                      /* Clear SPI1 Interrupt flags */
77:                      IFS3CLR = 0x2000;
78:                      IFS3CLR = 0x4000;
79:                      IFS3CLR = 0x8000;
80:                  
81:                      /* BAUD Rate register Setup */
82:                      SPI1BRG = 1;
83:                  
84:                      /* CLear the Overflow */
85:                      SPI1STATCLR = _SPI1STAT_SPIROV_MASK;
86:                  
87:                      /*
88:                      MSTEN = 1
89:                      CKP = 0
90:                      CKE = 1
91:                      MODE<32,16> = 0
92:                      ENHBUF = 1
93:                      MSSEN = 0
94:                      MCLKSEL = 0
95:                      */
96:                      SPI1CONSET = (SPI1_CON_MSSEN | SPI1_CON_MCLKSEL | SPI1_CON_ENHBUF | SPI1_CON_MODE_32_MODE_16 | SPI1_CON_CKE | SPI1_CON_CKP | SPI1_CON_MSTEN | SPI1_CON_SMP);
97:                  
98:                      /* Enable transmit interrupt when transmit buffer is completely empty (STXISEL = '01') */
99:                      /* Enable receive interrupt when the receive buffer is not empty (SRXISEL = '01') */
100:                     SPI1CONSET = 0x00000005;
101:                 
102:                 
103:                     /* Enable SPI1 */
104:                     SPI1CONSET = _SPI1CON_ON_MASK;
105:                 }
106:                 
107:                 bool SPI1_TransferSetup (SPI_TRANSFER_SETUP* setup, uint32_t spiSourceClock )
108:                 {
109:                     uint32_t t_brg;
110:                     uint32_t baudHigh;
111:                     uint32_t baudLow;
112:                     uint32_t errorHigh;
113:                     uint32_t errorLow;
114:                 
115:                     if ((setup == NULL) || (setup->clockFrequency == 0))
116:                     {
117:                         return false;
118:                     }
119:                 
120:                     if(spiSourceClock == 0)
121:                     {
122:                         // Use Master Clock Frequency set in GUI
123:                         spiSourceClock = 100000000;
124:                     }
125:                 
126:                     t_brg = (((spiSourceClock / (setup->clockFrequency)) / 2u) - 1u);
127:                     baudHigh = spiSourceClock / (2u * (t_brg + 1u));
128:                     baudLow = spiSourceClock / (2u * (t_brg + 2u));
129:                     errorHigh = baudHigh - setup->clockFrequency;
130:                     errorLow = setup->clockFrequency - baudLow;
131:                 
132:                     if (errorHigh > errorLow)
133:                     {
134:                         t_brg++;
135:                     }
136:                 
137:                     if(t_brg > 8191)
138:                     {
139:                         return false;
140:                     }
141:                 
142:                     SPI1BRG = t_brg;
143:                     SPI1CON = (SPI1CON & (~(_SPI1CON_MODE16_MASK | _SPI1CON_MODE32_MASK | _SPI1CON_CKP_MASK | _SPI1CON_CKE_MASK))) |
144:                                             (setup->clockPolarity | setup->clockPhase | setup->dataBits);
145:                 
146:                     return true;
147:                 }
148:                 
149:                 bool SPI1_Write(void* pTransmitData, size_t txSize)
150:                 {
151:                     return(SPI1_WriteRead(pTransmitData, txSize, NULL, 0));
152:                 }
153:                 
154:                 bool SPI1_Read(void* pReceiveData, size_t rxSize)
155:                 {
156:                     return(SPI1_WriteRead(NULL, 0, pReceiveData, rxSize));
157:                 }
158:                 
159:                 bool SPI1_IsTransmitterBusy (void)
160:                 {
161:                     return ((SPI1STAT & _SPI1STAT_SRMT_MASK) == 0)? true : false;
162:                 }
163:                 
164:                 bool SPI1_WriteRead(void* pTransmitData, size_t txSize, void* pReceiveData, size_t rxSize)
165:                 {
166:                     size_t txCount = 0;
167:                     size_t rxCount = 0;
168:                     size_t dummySize = 0;
169:                     size_t dummyRxCntr = 0;
170:                     size_t receivedData;
171:                     bool isSuccess = false;
172:                 
173:                     /* Verify the request */
174:                     if (((txSize > 0) && (pTransmitData != NULL)) || ((rxSize > 0) && (pReceiveData != NULL)))
175:                     {
176:                         if (pTransmitData == NULL)
177:                         {
178:                             txSize = 0;
179:                         }
180:                         if (pReceiveData == NULL)
181:                         {
182:                             rxSize = 0;
183:                         }
184:                 
185:                         /* Clear the receive overflow error if any */
186:                         SPI1STATCLR = _SPI1STAT_SPIROV_MASK;
187:                 
188:                         /* Flush out any unread data in SPI read buffer from the previous transfer */
189:                         while ((bool)(SPI1STAT & _SPI1STAT_SPIRBE_MASK) == false)
190:                         {
191:                             receivedData = SPI1BUF;
192:                         }
193:                 
194:                         if (rxSize > txSize)
195:                         {
196:                             dummySize = rxSize - txSize;
197:                         }
198:                 
199:                         /* If dataBit size is 32 bits */
200:                         if (_SPI1CON_MODE32_MASK == (SPI1CON & _SPI1CON_MODE32_MASK))
201:                         {
202:                             rxSize >>= 2;
203:                             txSize >>= 2;
204:                             dummySize >>= 2;
205:                         }
206:                         /* If dataBit size is 16 bits */
207:                         else if (_SPI1CON_MODE16_MASK == (SPI1CON & _SPI1CON_MODE16_MASK))
208:                         {
209:                             rxSize >>= 1;
210:                             txSize >>= 1;
211:                             dummySize >>= 1;
212:                         }
213:                 
214:                         /* Make sure transmit buffer is empty */
215:                         while((bool)(SPI1STAT & _SPI1STAT_SPITBE_MASK) == false);
216:                 
217:                         while ((txCount != txSize) || (dummySize != 0))
218:                         {
219:                             if (txCount != txSize)
220:                             {
221:                                 if((_SPI1CON_MODE32_MASK) == (SPI1CON & (_SPI1CON_MODE32_MASK)))
222:                                 {
223:                                     SPI1BUF = ((uint32_t*)pTransmitData)[txCount++];
224:                                 }
225:                                 else if((_SPI1CON_MODE16_MASK) == (SPI1CON & (_SPI1CON_MODE16_MASK)))
226:                                 {
227:                                     SPI1BUF = ((uint16_t*)pTransmitData)[txCount++];
228:                                 }
229:                                 else
230:                                 {
231:                                     SPI1BUF = ((uint8_t*)pTransmitData)[txCount++];
232:                                 }
233:                             }
234:                             else if (dummySize > 0)
235:                             {
236:                                 SPI1BUF = 0xff;
237:                                 dummySize--;
238:                             }
239:                 
240:                             if (rxCount == rxSize)
241:                             {
242:                                 /* If inside this if condition, then it means that txSize > rxSize and all RX bytes are received */
243:                 
244:                                 /* For transmit only request, wait for buffer to become empty */
245:                                 while((bool)(SPI1STAT & _SPI1STAT_SPITBE_MASK) == false);
246:                 
247:                                 /* Read until the receive buffer is not empty */
248:                                 while ((bool)(SPI1STAT & _SPI1STAT_SPIRBE_MASK) == false)
249:                                 {
250:                                     receivedData = SPI1BUF;
251:                                     dummyRxCntr++;
252:                                 }
253:                             }
254:                             else
255:                             {
256:                                 /* If data is read, wait for the Receiver Data the data to become available */
257:                                 while((SPI1STAT & _SPI1STAT_SPIRBE_MASK) == _SPI1STAT_SPIRBE_MASK);
258:                 
259:                                 /* We have data waiting in the SPI buffer */
260:                                 receivedData = SPI1BUF;
261:                 
262:                                 if (rxCount < rxSize)
263:                                 {
264:                                     if((_SPI1CON_MODE32_MASK) == (SPI1CON & (_SPI1CON_MODE32_MASK)))
265:                                     {
266:                                         ((uint32_t*)pReceiveData)[rxCount++]  = receivedData;
267:                                     }
268:                                     else if((_SPI1CON_MODE16_MASK) == (SPI1CON & (_SPI1CON_MODE16_MASK)))
269:                                     {
270:                                         ((uint16_t*)pReceiveData)[rxCount++]  = receivedData;
271:                                     }
272:                                     else
273:                                     {
274:                                         ((uint8_t*)pReceiveData)[rxCount++]  = receivedData;
275:                                     }
276:                                 }
277:                             }
278:                         }
279:                 
280:                         /* Make sure no data is pending in the shift register */
281:                         while ((bool)((SPI1STAT & _SPI1STAT_SRMT_MASK) == false));
282:                 
283:                         /* Make sure for every character transmitted a character is also received back.
284:                          * If this is not done, we may prematurely exit this routine with the last bit still being
285:                          * transmitted out. As a result, the application may prematurely deselect the CS line and also
286:                          * the next request can receive last character of previous request as its first character.
287:                          */
288:                         if (txSize > rxSize)
289:                         {
290:                             while (dummyRxCntr != (txSize - rxSize))
291:                             {
292:                                 /* Wait for all the RX bytes to be received. */
293:                                 while ((bool)(SPI1STAT & _SPI1STAT_SPIRBE_MASK) == false)
294:                                 {
295:                                     receivedData = SPI1BUF;
296:                                     dummyRxCntr++;
297:                                 }
298:                             }
299:                         }
300:                 
301:                         isSuccess = true;
302:                     }
303:                 
304:                     return isSuccess;
305:                 }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
00000014  00000000   NOP
00000018  00000000   NOP
0000001C  00000000   NOP
00000020  00000000   NOP
00000024  00000000   NOP
00000028  00000000   NOP
0000002C  00000000   NOP
00000030  00000000   NOP
0000003C  00000000   NOP
00000048  00000000   NOP
00000054  00000000   NOP
0000005C  00000000   NOP
00000060  00000000   NOP
0000006C  00000000   NOP
00000070  00000000   NOP
00000074  00000000   NOP
0000007C  00000000   NOP
00000080  00000000   NOP
00000088  00000000   NOP
0000008C  00000000   NOP
00000094  00000000   NOP
000000A0  00000000   NOP
000000AC  00000000   NOP
000000B4  00000000   NOP
000000C4  00000000   NOP
000000C8  00000000   NOP
000000CC  00000000   NOP
000000D8  00000000   NOP
000000E0  00000000   NOP
000000E4  00000000   NOP
000000EC  00000000   NOP
000000F0  00000000   NOP
000000FC  00000000   NOP
00000100  00000000   NOP
00000108  00000000   NOP
0000010C  00000000   NOP
0000011C  00000000   NOP
00000128  00000000   NOP
00000134  00000000   NOP
00000140  00000000   NOP
00000144  00000000   NOP
0000014C  00000000   NOP
00000154  00000000   NOP
00000158  00000000   NOP
0000015C  00000000   NOP
00000160  00000000   NOP
00000164  00000000   NOP
00000168  00000000   NOP
00000170  00000000   NOP
00000174  00000000   NOP
00000178  00000000   NOP
00000188  00000000   NOP
00000194  00000000   NOP
000001A0  00000000   NOP
000001AC  00000000   NOP
000001BC  00000000   NOP
000001CC  00000000   NOP
000001D8  00000000   NOP
000001E4  00000000   NOP
000001F0  00000000   NOP
00000204  00000000   NOP
00000214  00000000   NOP
00000220  00000000   NOP
00000230  00000000   NOP
00000240  00000000   NOP
0000024C  00000000   NOP
00000258  00000000   NOP
00000264  00000000   NOP
00000274  00000000   NOP
00000278  00000000   NOP
00000284  00000000   NOP
0000028C  00000000   NOP
00000294  00000000   NOP
000002A0  00000000   NOP
000002AC  00000000   NOP
000002B8  00000000   NOP
000002C8  00000000   NOP
000002CC  00000000   NOP
000002D8  00000000   NOP
000002E4  00000000   NOP
000002F0  00000000   NOP
00000304  00000000   NOP
00000310  00000000   NOP
0000031C  00000000   NOP
00000328  00000000   NOP
00000334  00000000   NOP
00000344  00000000   NOP
00000350  00000000   NOP
0000035C  00000000   NOP
00000368  00000000   NOP
00000374  00000000   NOP
00000388  00000000   NOP
00000394  00000000   NOP
0000039C  00000000   NOP
000003A8  00000000   NOP
000003B8  00000000   NOP
000003C4  00000000   NOP
000003C8  00000000   NOP
000003D4  00000000   NOP
000003DC  00000000   NOP
000003F0  00000000   NOP
000003F8  00000000   NOP
00000404  00000000   NOP
00000410  00000000   NOP
0000041C  00000000   NOP
00000424  00000000   NOP
00000430  00000000   NOP
0000043C  00000000   NOP
00000444  00000000   NOP
00000448  00000000   NOP
9D00EF80  27BDFFF0   ADDIU SP, SP, -16
9D00EF84  AFBE000C   SW FP, 12(SP)
9D00EF88  03A0F025   OR FP, SP, ZERO
9D00EF8C  AFC00000   SW ZERO, 0(FP)
9D00EF90  3C02BF81   LUI V0, -16511
9D00EF94  24032000   ADDIU V1, ZERO, 8192
9D00EF98  AC4300F4   SW V1, 244(V0)
9D00EF9C  3C02BF81   LUI V0, -16511
9D00EFA0  24034000   ADDIU V1, ZERO, 16384
9D00EFA4  AC4300F4   SW V1, 244(V0)
9D00EFA8  3C02BF81   LUI V0, -16511
9D00EFAC  34038000   ORI V1, ZERO, -32768
9D00EFB0  AC4300F4   SW V1, 244(V0)
9D00EFB4  3C02BF82   LUI V0, -16510
9D00EFB8  AC401000   SW ZERO, 4096(V0)
9D00EFBC  3C02BF82   LUI V0, -16510
9D00EFC0  8C421020   LW V0, 4128(V0)
9D00EFC4  AFC20000   SW V0, 0(FP)
9D00EFC8  3C02BF81   LUI V0, -16511
9D00EFCC  24032000   ADDIU V1, ZERO, 8192
9D00EFD0  AC430074   SW V1, 116(V0)
9D00EFD4  3C02BF81   LUI V0, -16511
9D00EFD8  24034000   ADDIU V1, ZERO, 16384
9D00EFDC  AC430074   SW V1, 116(V0)
9D00EFE0  3C02BF81   LUI V0, -16511
9D00EFE4  34038000   ORI V1, ZERO, -32768
9D00EFE8  AC430074   SW V1, 116(V0)
9D00EFEC  3C02BF82   LUI V0, -16510
9D00EFF0  24030001   ADDIU V1, ZERO, 1
9D00EFF4  AC431030   SW V1, 4144(V0)
9D00EFF8  3C02BF82   LUI V0, -16510
9D00EFFC  24030040   ADDIU V1, ZERO, 64
9D00F000  AC431014   SW V1, 4116(V0)
9D00F004  3C02BF82   LUI V0, -16510
9D00F008  3C030001   LUI V1, 1
9D00F00C  34630120   ORI V1, V1, 288
9D00F010  AC431008   SW V1, 4104(V0)
9D00F014  3C02BF82   LUI V0, -16510
9D00F018  24030005   ADDIU V1, ZERO, 5
9D00F01C  AC431008   SW V1, 4104(V0)
9D00F020  3C02BF82   LUI V0, -16510
9D00F024  34038000   ORI V1, ZERO, -32768
9D00F028  AC431008   SW V1, 4104(V0)
9D00F02C  00000000   NOP
9D00F030  03C0E825   OR SP, FP, ZERO
9D00F034  8FBE000C   LW FP, 12(SP)
9D00F038  27BD0010   ADDIU SP, SP, 16
9D00F03C  03E00008   JR RA
9D00F040  00000000   NOP
9D011738  27BDFFF8   ADDIU SP, SP, -8
9D01173C  AFBE0004   SW FP, 4(SP)
9D011740  03A0F025   OR FP, SP, ZERO
9D011744  3C02BF82   LUI V0, -16510
9D011748  8C421010   LW V0, 4112(V0)
9D01174C  30420080   ANDI V0, V0, 128
9D011750  2C420001   SLTIU V0, V0, 1
9D011754  304200FF   ANDI V0, V0, 255
9D011758  03C0E825   OR SP, FP, ZERO
9D01175C  8FBE0004   LW FP, 4(SP)
9D011760  27BD0008   ADDIU SP, SP, 8
9D011764  03E00008   JR RA
9D011768  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/config/dsp_tu2/peripheral/ocmp/plib_ocmp1.c
1:                   /*******************************************************************************
2:                     Output Compare OCMP1 Peripheral Library (PLIB)
3:                   
4:                     Company:
5:                       Microchip Technology Inc.
6:                   
7:                     File Name:
8:                       plib_ocmp1.c
9:                   
10:                    Summary:
11:                      OCMP1 Source File
12:                  
13:                    Description:
14:                      None
15:                  
16:                  *******************************************************************************/
17:                  
18:                  /*******************************************************************************
19:                  * Copyright (C) 2019 Microchip Technology Inc. and its subsidiaries.
20:                  *
21:                  * Subject to your compliance with these terms, you may use Microchip software
22:                  * and any derivatives exclusively with Microchip products. It is your
23:                  * responsibility to comply with third party license terms applicable to your
24:                  * use of third party software (including open source software) that may
25:                  * accompany Microchip software.
26:                  *
27:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
28:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
29:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
30:                  * PARTICULAR PURPOSE.
31:                  *
32:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
33:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
34:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
35:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
36:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
37:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
38:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
39:                  *******************************************************************************/
40:                  #include "plib_ocmp1.h"
41:                  
42:                  // *****************************************************************************
43:                  
44:                  // *****************************************************************************
45:                  // Section: OCMP1 Implementation
46:                  // *****************************************************************************
47:                  // *****************************************************************************
48:                  
49:                  // *****************************************************************************
50:                  
51:                  
52:                  void OCMP1_Initialize (void)
53:                  {
54:                      /*Setup OC1CON        */
55:                      /*OCM         = 6        */
56:                      /*OCTSEL       = 0        */
57:                      /*OC32         = 0        */
58:                      /*SIDL         = false    */
59:                  
60:                      OC1CON = 0x6;
61:                  
62:                      OC1R = 2000;
63:                      OC1RS = 2000;
64:                  
65:                  }
66:                  
67:                  void OCMP1_Enable (void)
68:                  {
69:                      OC1CONSET = _OC1CON_ON_MASK;
70:                  }
71:                  
72:                  void OCMP1_Disable (void)
73:                  {
74:                      OC1CONCLR = _OC1CON_ON_MASK;
75:                  }
76:                  
77:                  
78:                  
79:                  uint16_t OCMP1_CompareValueGet (void)
80:                  {
81:                      return (uint16_t)OC1R;
82:                  }
83:                  
84:                  void OCMP1_CompareSecondaryValueSet (uint16_t value)
85:                  {
86:                      OC1RS = value;
87:                  }
88:                  
89:                  uint16_t OCMP1_CompareSecondaryValueGet (void)
90:                  {
91:                      return (uint16_t)OC1RS;
92:                  }
93:                  
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
0000000C  00000000   NOP
00000018  00000000   NOP
9D01127C  27BDFFF8   ADDIU SP, SP, -8
9D011280  AFBE0004   SW FP, 4(SP)
9D011284  03A0F025   OR FP, SP, ZERO
9D011288  3C02BF84   LUI V0, -16508
9D01128C  24030006   ADDIU V1, ZERO, 6
9D011290  AC434000   SW V1, 16384(V0)
9D011294  3C02BF84   LUI V0, -16508
9D011298  240307D0   ADDIU V1, ZERO, 2000
9D01129C  AC434010   SW V1, 16400(V0)
9D0112A0  3C02BF84   LUI V0, -16508
9D0112A4  240307D0   ADDIU V1, ZERO, 2000
9D0112A8  AC434020   SW V1, 16416(V0)
9D0112AC  00000000   NOP
9D0112B0  03C0E825   OR SP, FP, ZERO
9D0112B4  8FBE0004   LW FP, 4(SP)
9D0112B8  27BD0008   ADDIU SP, SP, 8
9D0112BC  03E00008   JR RA
9D0112C0  00000000   NOP
9D011690  27BDFFF8   ADDIU SP, SP, -8
9D011694  AFBE0004   SW FP, 4(SP)
9D011698  03A0F025   OR FP, SP, ZERO
9D01169C  00801025   OR V0, A0, ZERO
9D0116A0  A7C20008   SH V0, 8(FP)
9D0116A4  97C30008   LHU V1, 8(FP)
9D0116A8  3C02BF84   LUI V0, -16508
9D0116AC  AC434020   SW V1, 16416(V0)
9D0116B0  00000000   NOP
9D0116B4  03C0E825   OR SP, FP, ZERO
9D0116B8  8FBE0004   LW FP, 4(SP)
9D0116BC  27BD0008   ADDIU SP, SP, 8
9D0116C0  03E00008   JR RA
9D0116C4  00000000   NOP
9D0117D4  27BDFFF8   ADDIU SP, SP, -8
9D0117D8  AFBE0004   SW FP, 4(SP)
9D0117DC  03A0F025   OR FP, SP, ZERO
9D0117E0  3C02BF84   LUI V0, -16508
9D0117E4  34038000   ORI V1, ZERO, -32768
9D0117E8  AC434008   SW V1, 16392(V0)
9D0117EC  00000000   NOP
9D0117F0  03C0E825   OR SP, FP, ZERO
9D0117F4  8FBE0004   LW FP, 4(SP)
9D0117F8  27BD0008   ADDIU SP, SP, 8
9D0117FC  03E00008   JR RA
9D011800  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/config/dsp_tu2/peripheral/gpio/plib_gpio.c
1:                   /*******************************************************************************
2:                     SYS PORTS Static Functions for PORTS System Service
3:                   
4:                     Company:
5:                       Microchip Technology Inc.
6:                   
7:                     File Name:
8:                       plib_gpio.c
9:                   
10:                    Summary:
11:                      GPIO function implementations for the GPIO PLIB.
12:                  
13:                    Description:
14:                      The GPIO PLIB provides a simple interface to manage peripheral
15:                      input-output controller.
16:                  
17:                  *******************************************************************************/
18:                  
19:                  //DOM-IGNORE-BEGIN
20:                  /*******************************************************************************
21:                  * Copyright (C) 2019 Microchip Technology Inc. and its subsidiaries.
22:                  *
23:                  * Subject to your compliance with these terms, you may use Microchip software
24:                  * and any derivatives exclusively with Microchip products. It is your
25:                  * responsibility to comply with third party license terms applicable to your
26:                  * use of third party software (including open source software) that may
27:                  * accompany Microchip software.
28:                  *
29:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
30:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
31:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
32:                  * PARTICULAR PURPOSE.
33:                  *
34:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
35:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
36:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
37:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
38:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
39:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
40:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
41:                  *******************************************************************************/
42:                  //DOM-IGNORE-END
43:                  
44:                  #include "plib_gpio.h"
45:                  
46:                  
47:                  
48:                  /******************************************************************************
49:                    Function:
50:                      GPIO_Initialize ( void )
51:                  
52:                    Summary:
53:                      Initialize the GPIO library.
54:                  
55:                    Remarks:
56:                      See plib_gpio.h for more details.
57:                  */
58:                  void GPIO_Initialize ( void )
59:                  {
60:                  
61:                      /* PORTB Initialization */
62:                      LATB = 0x820U; /* Initial Latch Value */
63:                      TRISBCLR = 0x29b8U; /* Direction Control */
64:                      ANSELBCLR = 0xfff8U; /* Digital Mode Enable */
65:                      CNPUBSET = 0x9040U; /* Pull-Up Enable */
66:                      SRCON0BSET = 0x2000U; /* Slew Rate Control */
67:                      SRCON1BSET = 0x2000U; /* Slew Rate Control */
68:                      /* PORTC Initialization */
69:                      LATC = 0x4000U; /* Initial Latch Value */
70:                      TRISCCLR = 0xe000U; /* Direction Control */
71:                      CNPUCSET = 0x1000U; /* Pull-Up Enable */
72:                      /* PORTD Initialization */
73:                      LATD = 0x400U; /* Initial Latch Value */
74:                      TRISDCLR = 0x429U; /* Direction Control */
75:                      CNPUDSET = 0x810U; /* Pull-Up Enable */
76:                      /* PORTE Initialization */
77:                      LATE = 0x80U; /* Initial Latch Value */
78:                      TRISECLR = 0xb9U; /* Direction Control */
79:                      ANSELECLR = 0xf0U; /* Digital Mode Enable */
80:                      CNPUESET = 0x46U; /* Pull-Up Enable */
81:                      /* PORTF Initialization */
82:                      CNPUFSET = 0x3U; /* Pull-Up Enable */
83:                      /* PORTG Initialization */
84:                      LATG = 0x40U; /* Initial Latch Value */
85:                      TRISGCLR = 0x40U; /* Direction Control */
86:                      ANSELGCLR = 0x3c0U; /* Digital Mode Enable */
87:                  
88:                      /* Unlock system for PPS configuration */
89:                      SYSKEY = 0x00000000U;
90:                      SYSKEY = 0xAA996655U;
91:                      SYSKEY = 0x556699AAU;
92:                  
93:                      CFGCONbits.IOLOCK = 0U;
94:                  
95:                      /* PPS Input Remapping */
96:                      U1RXR = 2;
97:                      U1CTSR = 0;
98:                      SDI2R = 1;
99:                      SDI3R = 5;
100:                     INT3R = 4;
101:                 
102:                     /* PPS Output Remapping */
103:                     RPG9R = 12;
104:                     RPF5R = 1;
105:                     RPD2R = 5;
106:                     RPB10R = 7;
107:                     RPG8R = 6;
108:                     RPF3R = 1;
109:                 
110:                         /* Lock back the system after PPS configuration */
111:                     CFGCONbits.IOLOCK = 1U;
112:                 
113:                     SYSKEY = 0x00000000U;
114:                 
115:                 }
116:                 
117:                 // *****************************************************************************
118:                 // *****************************************************************************
119:                 // Section: GPIO APIs which operates on multiple pins of a port
120:                 // *****************************************************************************
121:                 // *****************************************************************************
122:                 
123:                 // *****************************************************************************
124:                 /* Function:
125:                     uint32_t GPIO_PortRead ( GPIO_PORT port )
126:                 
127:                   Summary:
128:                     Read all the I/O lines of the selected port.
129:                 
130:                   Description:
131:                     This function reads the live data values on all the I/O lines of the
132:                     selected port.  Bit values returned in each position indicate corresponding
133:                     pin levels.
134:                     1 = Pin is high.
135:                     0 = Pin is low.
136:                 
137:                     This function reads the value regardless of pin configuration, whether it is
138:                     set as as an input, driven by the GPIO Controller, or driven by a peripheral.
139:                 
140:                   Remarks:
141:                     If the port has less than 32-bits, unimplemented pins will read as
142:                     low (0).
143:                     Implemented pins are Right aligned in the 32-bit return value.
144:                 */
145:                 uint32_t GPIO_PortRead(GPIO_PORT port)
146:                 {
147:                     return (*(volatile uint32_t *)(&PORTB + (port * 0x40U)));
148:                 }
149:                 
150:                 // *****************************************************************************
151:                 /* Function:
152:                     void GPIO_PortWrite (GPIO_PORT port, uint32_t mask, uint32_t value);
153:                 
154:                   Summary:
155:                     Write the value on the masked I/O lines of the selected port.
156:                 
157:                   Remarks:
158:                     See plib_gpio.h for more details.
159:                 */
160:                 void GPIO_PortWrite(GPIO_PORT port, uint32_t mask, uint32_t value)
161:                 {
162:                     *(volatile uint32_t *)(&LATB + (port * 0x40U)) = (*(volatile uint32_t *)(&LATB + (port * 0x40U)) & (~mask)) | (mask & value);
163:                 }
164:                 
165:                 // *****************************************************************************
166:                 /* Function:
167:                     uint32_t GPIO_PortLatchRead ( GPIO_PORT port )
168:                 
169:                   Summary:
170:                     Read the latched value on all the I/O lines of the selected port.
171:                 
172:                   Remarks:
173:                     See plib_gpio.h for more details.
174:                 */
175:                 uint32_t GPIO_PortLatchRead(GPIO_PORT port)
176:                 {
177:                     return (*(volatile uint32_t *)(&LATB + (port * 0x40U)));
178:                 }
179:                 
180:                 // *****************************************************************************
181:                 /* Function:
182:                     void GPIO_PortSet ( GPIO_PORT port, uint32_t mask )
183:                 
184:                   Summary:
185:                     Set the selected IO pins of a port.
186:                 
187:                   Remarks:
188:                     See plib_gpio.h for more details.
189:                 */
190:                 void GPIO_PortSet(GPIO_PORT port, uint32_t mask)
191:                 {
192:                     *(volatile uint32_t *)(&LATBSET + (port * 0x40U)) = mask;
193:                 }
194:                 
195:                 // *****************************************************************************
196:                 /* Function:
197:                     void GPIO_PortClear ( GPIO_PORT port, uint32_t mask )
198:                 
199:                   Summary:
200:                     Clear the selected IO pins of a port.
201:                 
202:                   Remarks:
203:                     See plib_gpio.h for more details.
204:                 */
205:                 void GPIO_PortClear(GPIO_PORT port, uint32_t mask)
206:                 {
207:                     *(volatile uint32_t *)(&LATBCLR + (port * 0x40U)) = mask;
208:                 }
209:                 
210:                 // *****************************************************************************
211:                 /* Function:
212:                     void GPIO_PortToggle ( GPIO_PORT port, uint32_t mask )
213:                 
214:                   Summary:
215:                     Toggles the selected IO pins of a port.
216:                 
217:                   Remarks:
218:                     See plib_gpio.h for more details.
219:                 */
220:                 void GPIO_PortToggle(GPIO_PORT port, uint32_t mask)
221:                 {
222:                     *(volatile uint32_t *)(&LATBINV + (port * 0x40U))= mask;
223:                 }
224:                 
225:                 // *****************************************************************************
226:                 /* Function:
227:                     void GPIO_PortInputEnable ( GPIO_PORT port, uint32_t mask )
228:                 
229:                   Summary:
230:                     Enables selected IO pins of a port as input.
231:                 
232:                   Remarks:
233:                     See plib_gpio.h for more details.
234:                 */
235:                 void GPIO_PortInputEnable(GPIO_PORT port, uint32_t mask)
236:                 {
237:                     *(volatile uint32_t *)(&TRISBSET + (port * 0x40U)) = mask;
238:                 }
239:                 
240:                 // *****************************************************************************
241:                 /* Function:
242:                     void GPIO_PortOutputEnable ( GPIO_PORT port, uint32_t mask )
243:                 
244:                   Summary:
245:                     Enables selected IO pins of a port as output(s).
246:                 
247:                   Remarks:
248:                     See plib_gpio.h for more details.
249:                 */
250:                 void GPIO_PortOutputEnable(GPIO_PORT port, uint32_t mask)
251:                 {
252:                     *(volatile uint32_t *)(&TRISBCLR + (port * 0x40U)) = mask;
253:                 }
254:                 
255:                 
256:                 
257:                 
258:                 /*******************************************************************************
259:                  End of File
260:                 */
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
00000010  00000000   NOP
00000014  00000000   NOP
00000018  00000000   NOP
0000001C  00000000   NOP
00000020  00000000   NOP
00000024  00000000   NOP
00000028  00000000   NOP
0000002C  00000000   NOP
00000030  00000000   NOP
00000038  00000000   NOP
0000003C  00000000   NOP
00000048  00000000   NOP
00000050  00000000   NOP
0000005C  00000000   NOP
00000060  00000000   NOP
00000064  00000000   NOP
9D00B560  27BDFFF8   ADDIU SP, SP, -8
9D00B564  AFBE0004   SW FP, 4(SP)
9D00B568  03A0F025   OR FP, SP, ZERO
9D00B56C  3C02BF86   LUI V0, -16506
9D00B570  24030820   ADDIU V1, ZERO, 2080
9D00B574  AC430130   SW V1, 304(V0)
9D00B578  3C02BF86   LUI V0, -16506
9D00B57C  240329B8   ADDIU V1, ZERO, 10680
9D00B580  AC430114   SW V1, 276(V0)
9D00B584  3C02BF86   LUI V0, -16506
9D00B588  3403FFF8   ORI V1, ZERO, -8
9D00B58C  AC430104   SW V1, 260(V0)
9D00B590  3C02BF86   LUI V0, -16506
9D00B594  34039040   ORI V1, ZERO, -28608
9D00B598  AC430158   SW V1, 344(V0)
9D00B59C  3C02BF86   LUI V0, -16506
9D00B5A0  24032000   ADDIU V1, ZERO, 8192
9D00B5A4  AC4301C8   SW V1, 456(V0)
9D00B5A8  3C02BF86   LUI V0, -16506
9D00B5AC  24032000   ADDIU V1, ZERO, 8192
9D00B5B0  AC4301D8   SW V1, 472(V0)
9D00B5B4  3C02BF86   LUI V0, -16506
9D00B5B8  24034000   ADDIU V1, ZERO, 16384
9D00B5BC  AC430230   SW V1, 560(V0)
9D00B5C0  3C02BF86   LUI V0, -16506
9D00B5C4  3403E000   ORI V1, ZERO, -8192
9D00B5C8  AC430214   SW V1, 532(V0)
9D00B5CC  3C02BF86   LUI V0, -16506
9D00B5D0  24031000   ADDIU V1, ZERO, 4096
9D00B5D4  AC430258   SW V1, 600(V0)
9D00B5D8  3C02BF86   LUI V0, -16506
9D00B5DC  24030400   ADDIU V1, ZERO, 1024
9D00B5E0  AC430330   SW V1, 816(V0)
9D00B5E4  3C02BF86   LUI V0, -16506
9D00B5E8  24030429   ADDIU V1, ZERO, 1065
9D00B5EC  AC430314   SW V1, 788(V0)
9D00B5F0  3C02BF86   LUI V0, -16506
9D00B5F4  24030810   ADDIU V1, ZERO, 2064
9D00B5F8  AC430358   SW V1, 856(V0)
9D00B5FC  3C02BF86   LUI V0, -16506
9D00B600  24030080   ADDIU V1, ZERO, 128
9D00B604  AC430430   SW V1, 1072(V0)
9D00B608  3C02BF86   LUI V0, -16506
9D00B60C  240300B9   ADDIU V1, ZERO, 185
9D00B610  AC430414   SW V1, 1044(V0)
9D00B614  3C02BF86   LUI V0, -16506
9D00B618  240300F0   ADDIU V1, ZERO, 240
9D00B61C  AC430404   SW V1, 1028(V0)
9D00B620  3C02BF86   LUI V0, -16506
9D00B624  24030046   ADDIU V1, ZERO, 70
9D00B628  AC430458   SW V1, 1112(V0)
9D00B62C  3C02BF86   LUI V0, -16506
9D00B630  24030003   ADDIU V1, ZERO, 3
9D00B634  AC430558   SW V1, 1368(V0)
9D00B638  3C02BF86   LUI V0, -16506
9D00B63C  24030040   ADDIU V1, ZERO, 64
9D00B640  AC430630   SW V1, 1584(V0)
9D00B644  3C02BF86   LUI V0, -16506
9D00B648  24030040   ADDIU V1, ZERO, 64
9D00B64C  AC430614   SW V1, 1556(V0)
9D00B650  3C02BF86   LUI V0, -16506
9D00B654  240303C0   ADDIU V1, ZERO, 960
9D00B658  AC430604   SW V1, 1540(V0)
9D00B65C  3C02BF80   LUI V0, -16512
9D00B660  AC400030   SW ZERO, 48(V0)
9D00B664  3C02BF80   LUI V0, -16512
9D00B668  3C03AA99   LUI V1, -21863
9D00B66C  34636655   ORI V1, V1, 26197
9D00B670  AC430030   SW V1, 48(V0)
9D00B674  3C02BF80   LUI V0, -16512
9D00B678  3C035566   LUI V1, 21862
9D00B67C  346399AA   ORI V1, V1, -26198
9D00B680  AC430030   SW V1, 48(V0)
9D00B684  3C03BF80   LUI V1, -16512
9D00B688  8C620000   LW V0, 0(V1)
9D00B68C  7C026B44   INS V0, ZERO, 13, 1
9D00B690  AC620000   SW V0, 0(V1)
9D00B694  3C02BF80   LUI V0, -16512
9D00B698  24030002   ADDIU V1, ZERO, 2
9D00B69C  AC431468   SW V1, 5224(V0)
9D00B6A0  3C02BF80   LUI V0, -16512
9D00B6A4  AC40146C   SW ZERO, 5228(V0)
9D00B6A8  3C02BF80   LUI V0, -16512
9D00B6AC  24030001   ADDIU V1, ZERO, 1
9D00B6B0  AC4314A8   SW V1, 5288(V0)
9D00B6B4  3C02BF80   LUI V0, -16512
9D00B6B8  24030005   ADDIU V1, ZERO, 5
9D00B6BC  AC4314B4   SW V1, 5300(V0)
9D00B6C0  3C02BF80   LUI V0, -16512
9D00B6C4  24030004   ADDIU V1, ZERO, 4
9D00B6C8  AC43140C   SW V1, 5132(V0)
9D00B6CC  3C02BF80   LUI V0, -16512
9D00B6D0  2403000C   ADDIU V1, ZERO, 12
9D00B6D4  AC4316A4   SW V1, 5796(V0)
9D00B6D8  3C02BF80   LUI V0, -16512
9D00B6DC  24030001   ADDIU V1, ZERO, 1
9D00B6E0  AC431654   SW V1, 5716(V0)
9D00B6E4  3C02BF80   LUI V0, -16512
9D00B6E8  24030005   ADDIU V1, ZERO, 5
9D00B6EC  AC4315C8   SW V1, 5576(V0)
9D00B6F0  3C02BF80   LUI V0, -16512
9D00B6F4  24030007   ADDIU V1, ZERO, 7
9D00B6F8  AC431568   SW V1, 5480(V0)
9D00B6FC  3C02BF80   LUI V0, -16512
9D00B700  24030006   ADDIU V1, ZERO, 6
9D00B704  AC4316A0   SW V1, 5792(V0)
9D00B708  3C02BF80   LUI V0, -16512
9D00B70C  24030001   ADDIU V1, ZERO, 1
9D00B710  AC43164C   SW V1, 5708(V0)
9D00B714  3C03BF80   LUI V1, -16512
9D00B718  8C620000   LW V0, 0(V1)
9D00B71C  24040001   ADDIU A0, ZERO, 1
9D00B720  7C826B44   INS V0, A0, 13, 1
9D00B724  AC620000   SW V0, 0(V1)
9D00B728  3C02BF80   LUI V0, -16512
9D00B72C  AC400030   SW ZERO, 48(V0)
9D00B730  00000000   NOP
9D00B734  03C0E825   OR SP, FP, ZERO
9D00B738  8FBE0004   LW FP, 4(SP)
9D00B73C  27BD0008   ADDIU SP, SP, 8
9D00B740  03E00008   JR RA
9D00B744  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/config/dsp_tu2/peripheral/evic/plib_evic.c
1:                   /*******************************************************************************
2:                     EVIC PLIB Implementation
3:                   
4:                     Company:
5:                       Microchip Technology Inc.
6:                   
7:                     File Name:
8:                       plib_evic.c
9:                   
10:                    Summary:
11:                      EVIC PLIB Source File
12:                  
13:                    Description:
14:                      None
15:                  
16:                  *******************************************************************************/
17:                  
18:                  // DOM-IGNORE-BEGIN
19:                  /*******************************************************************************
20:                  * Copyright (C) 2019 Microchip Technology Inc. and its subsidiaries.
21:                  *
22:                  * Subject to your compliance with these terms, you may use Microchip software
23:                  * and any derivatives exclusively with Microchip products. It is your
24:                  * responsibility to comply with third party license terms applicable to your
25:                  * use of third party software (including open source software) that may
26:                  * accompany Microchip software.
27:                  *
28:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
29:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
30:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
31:                  * PARTICULAR PURPOSE.
32:                  *
33:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
34:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
35:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
36:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
37:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
38:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
39:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
40:                  *******************************************************************************/
41:                  // DOM-IGNORE-END
42:                  
43:                  #include "device.h"
44:                  #include "plib_evic.h"
45:                  
46:                  
47:                  // *****************************************************************************
48:                  // *****************************************************************************
49:                  // Section: IRQ Implementation
50:                  // *****************************************************************************
51:                  // *****************************************************************************
52:                  
53:                  void EVIC_Initialize( void )
54:                  {
55:                      INTCONSET = _INTCON_MVEC_MASK;
56:                  
57:                      /* Set up priority and subpriority of enabled interrupts */
58:                      IPC2SET = 0x400 | 0x0;  /* TIMER_2:  Priority 1 / Subpriority 0 */
59:                      IPC28SET = 0x4 | 0x0;  /* UART1_FAULT:  Priority 1 / Subpriority 0 */
60:                      IPC28SET = 0x400 | 0x0;  /* UART1_RX:  Priority 1 / Subpriority 0 */
61:                      IPC28SET = 0x40000 | 0x0;  /* UART1_TX:  Priority 1 / Subpriority 0 */
62:                  
63:                  
64:                  
65:                      /* Configure Shadow Register Set */
66:                      PRISS = 0x76543210;
67:                  
68:                      while (PRISS != 0x76543210)
69:                      {
70:                          /* Wait for PRISS value to take effect */
71:                      }
72:                  }
73:                  
74:                  void EVIC_SourceEnable( INT_SOURCE source )
75:                  {
76:                      volatile uint32_t *IECx = (volatile uint32_t *) (&IEC0 + ((0x10 * (source / 32)) / 4));
77:                      volatile uint32_t *IECxSET = (volatile uint32_t *)(IECx + 2);
78:                  
79:                      *IECxSET = 1 << (source & 0x1f);
80:                  }
81:                  
82:                  void EVIC_SourceDisable( INT_SOURCE source )
83:                  {
84:                      volatile uint32_t *IECx = (volatile uint32_t *) (&IEC0 + ((0x10 * (source / 32)) / 4));
85:                      volatile uint32_t *IECxCLR = (volatile uint32_t *)(IECx + 1);
86:                  
87:                      *IECxCLR = 1 << (source & 0x1f);
88:                  }
89:                  
90:                  bool EVIC_SourceIsEnabled( INT_SOURCE source )
91:                  {
92:                      volatile uint32_t *IECx = (volatile uint32_t *) (&IEC0 + ((0x10 * (source / 32)) / 4));
93:                  
94:                      return (bool)((*IECx >> (source & 0x1f)) & 0x01);
95:                  }
96:                  
97:                  bool EVIC_SourceStatusGet( INT_SOURCE source )
98:                  {
99:                      volatile uint32_t *IFSx = (volatile uint32_t *)(&IFS0 + ((0x10 * (source / 32)) / 4));
100:                 
101:                     return (bool)((*IFSx >> (source & 0x1f)) & 0x1);
102:                 }
103:                 
104:                 void EVIC_SourceStatusSet( INT_SOURCE source )
105:                 {
106:                     volatile uint32_t *IFSx = (volatile uint32_t *) (&IFS0 + ((0x10 * (source / 32)) / 4));
107:                     volatile uint32_t *IFSxSET = (volatile uint32_t *)(IFSx + 2);
108:                 
109:                     *IFSxSET = 1 << (source & 0x1f);
110:                 }
111:                 
112:                 void EVIC_SourceStatusClear( INT_SOURCE source )
113:                 {
114:                     volatile uint32_t *IFSx = (volatile uint32_t *) (&IFS0 + ((0x10 * (source / 32)) / 4));
115:                     volatile uint32_t *IFSxCLR = (volatile uint32_t *)(IFSx + 1);
116:                 
117:                     *IFSxCLR = 1 << (source & 0x1f);
118:                 }
119:                 
120:                 void EVIC_INT_Enable( void )
121:                 {
122:                     __builtin_enable_interrupts();
123:                 }
124:                 
125:                 bool EVIC_INT_Disable( void )
126:                 {
127:                     uint32_t processorStatus;
128:                 
129:                     /* Save the processor status and then Disable the global interrupt */
130:                     processorStatus = ( uint32_t )__builtin_disable_interrupts();
131:                 
132:                     /* return the interrupt status */
133:                     return (bool)(processorStatus & 0x01);
134:                 }
135:                 
136:                 void EVIC_INT_Restore( bool state )
137:                 {
138:                     if (state)
139:                     {
140:                         /* restore the state of CP0 Status register before the disable occurred */
141:                         __builtin_enable_interrupts();
142:                     }
143:                 }
144:                 
145:                 
146:                 /* End of file */
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
00000010  00000000   NOP
00000014  00000000   NOP
00000018  00000000   NOP
0000001C  00000000   NOP
00000020  00000000   NOP
00000024  00000000   NOP
00000028  00000000   NOP
0000002C  00000000   NOP
00000030  00000000   NOP
00000034  00000000   NOP
00000038  00000000   NOP
0000003C  00000000   NOP
00000040  00000000   NOP
00000044  00000000   NOP
0000004C  00000000   NOP
00000054  00000000   NOP
9D0100B4  27BDFFF8   ADDIU SP, SP, -8
9D0100B8  AFBE0004   SW FP, 4(SP)
9D0100BC  03A0F025   OR FP, SP, ZERO
9D0100C0  3C02BF81   LUI V0, -16511
9D0100C4  24031000   ADDIU V1, ZERO, 4096
9D0100C8  AC430008   SW V1, 8(V0)
9D0100CC  3C02BF81   LUI V0, -16511
9D0100D0  24030400   ADDIU V1, ZERO, 1024
9D0100D4  AC430168   SW V1, 360(V0)
9D0100D8  3C02BF81   LUI V0, -16511
9D0100DC  24030004   ADDIU V1, ZERO, 4
9D0100E0  AC430308   SW V1, 776(V0)
9D0100E4  3C02BF81   LUI V0, -16511
9D0100E8  24030400   ADDIU V1, ZERO, 1024
9D0100EC  AC430308   SW V1, 776(V0)
9D0100F0  3C02BF81   LUI V0, -16511
9D0100F4  3C030004   LUI V1, 4
9D0100F8  AC430308   SW V1, 776(V0)
9D0100FC  3C02BF81   LUI V0, -16511
9D010100  3C037654   LUI V1, 30292
9D010104  34633210   ORI V1, V1, 12816
9D010108  AC430010   SW V1, 16(V0)
9D01010C  00000000   NOP
9D010110  3C02BF81   LUI V0, -16511
9D010114  8C430010   LW V1, 16(V0)
9D010118  3C027654   LUI V0, 30292
9D01011C  34423210   ORI V0, V0, 12816
9D010120  1462FFFB   BNE V1, V0, 0x9D010110
9D010124  00000000   NOP
9D010128  00000000   NOP
9D01012C  03C0E825   OR SP, FP, ZERO
9D010130  8FBE0004   LW FP, 4(SP)
9D010134  27BD0008   ADDIU SP, SP, 8
9D010138  03E00008   JR RA
9D01013C  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/config/dsp_tu2/peripheral/clk/plib_clk.c
1:                   /*******************************************************************************
2:                     SYS CLK Static Functions for Clock System Service
3:                   
4:                     Company:
5:                       Microchip Technology Inc.
6:                   
7:                     File Name:
8:                       plib_clk.c
9:                   
10:                    Summary:
11:                      SYS CLK static function implementations for the Clock System Service.
12:                  
13:                    Description:
14:                      The Clock System Service provides a simple interface to manage the
15:                      oscillators on Microchip microcontrollers. This file defines the static
16:                      implementation for the Clock System Service.
17:                  
18:                    Remarks:
19:                      Static functions incorporate all system clock configuration settings as
20:                      determined by the user via the Microchip Harmony Configurator GUI.
21:                      It provides static version of the routines, eliminating the need for an
22:                      object ID or object handle.
23:                  
24:                      Static single-open interfaces also eliminate the need for the open handle.
25:                  
26:                  *******************************************************************************/
27:                  
28:                  /*******************************************************************************
29:                  * Copyright (C) 2019 Microchip Technology Inc. and its subsidiaries.
30:                  *
31:                  * Subject to your compliance with these terms, you may use Microchip software
32:                  * and any derivatives exclusively with Microchip products. It is your
33:                  * responsibility to comply with third party license terms applicable to your
34:                  * use of third party software (including open source software) that may
35:                  * accompany Microchip software.
36:                  *
37:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
38:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
39:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
40:                  * PARTICULAR PURPOSE.
41:                  *
42:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
43:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
44:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
45:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
46:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
47:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
48:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
49:                  *******************************************************************************/
50:                  
51:                  // *****************************************************************************
52:                  // *****************************************************************************
53:                  // Section: Include Files
54:                  // *****************************************************************************
55:                  // *****************************************************************************
56:                  
57:                  #include "device.h"
58:                  #include "plib_clk.h"
59:                  
60:                  // *****************************************************************************
61:                  // *****************************************************************************
62:                  // Section: File Scope Functions
63:                  // *****************************************************************************
64:                  // *****************************************************************************
65:                  
66:                  // *****************************************************************************
67:                  /* Function:
68:                      void CLK_Initialize( void )
69:                  
70:                    Summary:
71:                      Initializes hardware and internal data structure of the System Clock.
72:                  
73:                    Description:
74:                      This function initializes the hardware and internal data structure of System
75:                      Clock Service.
76:                  
77:                    Remarks:
78:                      This is configuration values for the static version of the Clock System
79:                      Service module is determined by the user via the MHC GUI.
80:                  
81:                      The objective is to eliminate the user's need to be knowledgeable in the
82:                      function of the 'configuration bits' to configure the system oscillators.
83:                  */
84:                  
85:                  void CLK_Initialize( void )
86:                  {
87:                      /* unlock system for clock configuration */
88:                      SYSKEY = 0x00000000;
89:                      SYSKEY = 0xAA996655;
90:                      SYSKEY = 0x556699AA;
91:                  
92:                  
93:                    
94:                  
95:                      /* Peripheral Module Disable Configuration */
96:                  
97:                      CFGCONbits.PMDLOCK = 0;
98:                  
99:                      PMD1 = 0x1000;
100:                     PMD2 = 0x3;
101:                     PMD3 = 0x1fe01ff;
102:                     PMD4 = 0x1fd;
103:                     PMD5 = 0x301f383e;
104:                     PMD6 = 0x10830001;
105:                     PMD7 = 0x500000;
106:                 
107:                     CFGCONbits.PMDLOCK = 1;
108:                 
109:                     /* Lock system since done with clock configuration */
110:                     SYSKEY = 0x33333333;
111:                 }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00E580  27BDFFF8   ADDIU SP, SP, -8
9D00E584  AFBE0004   SW FP, 4(SP)
9D00E588  03A0F025   OR FP, SP, ZERO
9D00E58C  3C02BF80   LUI V0, -16512
9D00E590  AC400030   SW ZERO, 48(V0)
9D00E594  3C02BF80   LUI V0, -16512
9D00E598  3C03AA99   LUI V1, -21863
9D00E59C  34636655   ORI V1, V1, 26197
9D00E5A0  AC430030   SW V1, 48(V0)
9D00E5A4  3C02BF80   LUI V0, -16512
9D00E5A8  3C035566   LUI V1, 21862
9D00E5AC  346399AA   ORI V1, V1, -26198
9D00E5B0  AC430030   SW V1, 48(V0)
9D00E5B4  3C03BF80   LUI V1, -16512
9D00E5B8  8C620000   LW V0, 0(V1)
9D00E5BC  7C026304   INS V0, ZERO, 12, 1
9D00E5C0  AC620000   SW V0, 0(V1)
9D00E5C4  3C02BF80   LUI V0, -16512
9D00E5C8  24031000   ADDIU V1, ZERO, 4096
9D00E5CC  AC430040   SW V1, 64(V0)
9D00E5D0  3C02BF80   LUI V0, -16512
9D00E5D4  24030003   ADDIU V1, ZERO, 3
9D00E5D8  AC430050   SW V1, 80(V0)
9D00E5DC  3C02BF80   LUI V0, -16512
9D00E5E0  3C0301FE   LUI V1, 510
9D00E5E4  346301FF   ORI V1, V1, 511
9D00E5E8  AC430060   SW V1, 96(V0)
9D00E5EC  3C02BF80   LUI V0, -16512
9D00E5F0  240301FD   ADDIU V1, ZERO, 509
9D00E5F4  AC430070   SW V1, 112(V0)
9D00E5F8  3C02BF80   LUI V0, -16512
9D00E5FC  3C03301F   LUI V1, 12319
9D00E600  3463383E   ORI V1, V1, 14398
9D00E604  AC430080   SW V1, 128(V0)
9D00E608  3C02BF80   LUI V0, -16512
9D00E60C  3C031083   LUI V1, 4227
9D00E610  34630001   ORI V1, V1, 1
9D00E614  AC430090   SW V1, 144(V0)
9D00E618  3C02BF80   LUI V0, -16512
9D00E61C  3C030050   LUI V1, 80
9D00E620  AC4300A0   SW V1, 160(V0)
9D00E624  3C03BF80   LUI V1, -16512
9D00E628  8C620000   LW V0, 0(V1)
9D00E62C  24040001   ADDIU A0, ZERO, 1
9D00E630  7C826304   INS V0, A0, 12, 1
9D00E634  AC620000   SW V0, 0(V1)
9D00E638  3C02BF80   LUI V0, -16512
9D00E63C  3C033333   LUI V1, 13107
9D00E640  34633333   ORI V1, V1, 13107
9D00E644  AC430030   SW V1, 48(V0)
9D00E648  00000000   NOP
9D00E64C  03C0E825   OR SP, FP, ZERO
9D00E650  8FBE0004   LW FP, 4(SP)
9D00E654  27BD0008   ADDIU SP, SP, 8
9D00E658  03E00008   JR RA
9D00E65C  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/config/dsp_tu2/peripheral/adchs/plib_adchs.c
1:                   /*******************************************************************************
2:                     ADCHS Peripheral Library Interface Source File
3:                   
4:                     Company
5:                       Microchip Technology Inc.
6:                   
7:                     File Name
8:                       plib_adchs.c
9:                   
10:                    Summary
11:                      ADCHS peripheral library source.
12:                  
13:                    Description
14:                      This file implements the ADCHS peripheral library.
15:                  
16:                  *******************************************************************************/
17:                  
18:                  // DOM-IGNORE-BEGIN
19:                  /*******************************************************************************
20:                  * Copyright (C) 2019 Microchip Technology Inc. and its subsidiaries.
21:                  *
22:                  * Subject to your compliance with these terms, you may use Microchip software
23:                  * and any derivatives exclusively with Microchip products. It is your
24:                  * responsibility to comply with third party license terms applicable to your
25:                  * use of third party software (including open source software) that may
26:                  * accompany Microchip software.
27:                  *
28:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
29:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
30:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
31:                  * PARTICULAR PURPOSE.
32:                  *
33:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
34:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
35:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
36:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
37:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
38:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
39:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
40:                  *******************************************************************************/
41:                  // DOM-IGNORE-END
42:                  #include "device.h"
43:                  #include "plib_adchs.h"
44:                  
45:                  #define ADCHS_CHANNEL_32  (32U)
46:                  
47:                  // *****************************************************************************
48:                  // *****************************************************************************
49:                  // Section: ADCHS Implementation
50:                  // *****************************************************************************
51:                  // *****************************************************************************
52:                  
53:                  
54:                  
55:                  
56:                  void ADCHS_Initialize()
57:                  {
58:                      ADCCON1bits.ON = 0;
59:                  ADC2CFG = DEVADC2;
60:                  ADC2TIME = 0x3010001;
61:                  
62:                      ADCCON1 = 0x600000;
63:                      ADCCON2 = 0x0;
64:                      ADCCON3 = 0x1000000;
65:                  
66:                      ADCTRGMODE = 0x0;
67:                  
68:                      ADCTRG1 = 0x0; 
69:                      ADCTRG2 = 0x0; 
70:                      ADCTRG3 = 0x0; 
71:                      
72:                      
73:                      
74:                      
75:                  
76:                      ADCTRGSNS = 0x0;
77:                  
78:                      ADCIMCON1 = 0x0;
79:                      ADCIMCON2 = 0x0; 
80:                      ADCIMCON3 = 0x0; 
81:                      
82:                  
83:                      /* Input scan */
84:                      ADCCSS1 = 0x0;
85:                      ADCCSS2 = 0x0; 
86:                  
87:                  
88:                  
89:                  
90:                  
91:                  
92:                  
93:                  
94:                      /* Turn ON ADC */
95:                      ADCCON1bits.ON = 1;
96:                      while(!ADCCON2bits.BGVRRDY); // Wait until the reference voltage is ready
97:                      while(ADCCON2bits.REFFLT); // Wait if there is a fault with the reference voltage
98:                  
99:                      /* ADC 2 */
100:                     ADCANCONbits.ANEN2 = 1;      // Enable the clock to analog bias
101:                     while(!ADCANCONbits.WKRDY2); // Wait until ADC is ready
102:                     ADCCON3bits.DIGEN2 = 1;      // Enable ADC
103:                 
104:                 
105:                 
106:                 }
107:                 
108:                 
109:                 /* Enable ADCHS channels */
110:                 void ADCHS_ModulesEnable (ADCHS_MODULE_MASK moduleMask)
111:                 {
112:                     ADCCON3 |= (moduleMask << 16);
113:                 }
114:                 
115:                 /* Disable ADCHS channels */
116:                 void ADCHS_ModulesDisable (ADCHS_MODULE_MASK moduleMask)
117:                 {
118:                     ADCCON3 &= ~(moduleMask << 16);
119:                 }
120:                 
121:                 
122:                 void ADCHS_ChannelResultInterruptEnable (ADCHS_CHANNEL_NUM channel)
123:                 {
124:                     if (channel < ADCHS_CHANNEL_32)
125:                     {
126:                         ADCGIRQEN1 |= 0x01 << channel;
127:                     }
128:                     else
129:                     {
130:                         ADCGIRQEN2 |= 0x01 << (channel - 32);
131:                     }
132:                 }
133:                 
134:                 void ADCHS_ChannelResultInterruptDisable (ADCHS_CHANNEL_NUM channel)
135:                 {
136:                     if (channel < ADCHS_CHANNEL_32)
137:                     {
138:                         ADCGIRQEN1 &= ~(0x01 << channel);
139:                     }
140:                     else
141:                     {
142:                         ADCGIRQEN2 &= ~(0x01 << (channel - 32));
143:                     }
144:                 }
145:                 
146:                 void ADCHS_ChannelEarlyInterruptEnable (ADCHS_CHANNEL_NUM channel)
147:                 {
148:                     if (channel < ADCHS_CHANNEL_32)
149:                     {
150:                         ADCEIEN1 |= (0x01 << channel);
151:                     }
152:                     else
153:                     {
154:                         ADCEIEN2 |= (0x01 << (channel - 32));
155:                     }
156:                 }
157:                 
158:                 void ADCHS_ChannelEarlyInterruptDisable (ADCHS_CHANNEL_NUM channel)
159:                 {
160:                     if (channel < ADCHS_CHANNEL_32)
161:                     {
162:                         ADCEIEN1 &= ~(0x01 << channel);
163:                     }
164:                     else
165:                     {
166:                         ADCEIEN2 &= ~(0x01 << (channel - 32));
167:                     }
168:                 }
169:                 
170:                 void ADCHS_GlobalEdgeConversionStart(void)
171:                 {
172:                     ADCCON3bits.GSWTRG = 1;
173:                 }
174:                 
175:                 void ADCHS_GlobalLevelConversionStart(void)
176:                 {
177:                     ADCCON3bits.GLSWTRG = 1;
178:                 }
179:                 
180:                 void ADCHS_GlobalLevelConversionStop(void)
181:                 {
182:                     ADCCON3bits.GLSWTRG = 0;
183:                 }
184:                 
185:                 void ADCHS_ChannelConversionStart(ADCHS_CHANNEL_NUM channel)
186:                 {
187:                     ADCCON3bits.ADINSEL = channel;
188:                     ADCCON3bits.RQCNVRT = 1;
189:                 }
190:                 
191:                 
192:                 /*Check if conversion result is available */
193:                 bool ADCHS_ChannelResultIsReady(ADCHS_CHANNEL_NUM channel)
194:                 {
195:                     bool status = false;
196:                     if (channel < ADCHS_CHANNEL_32)
197:                     {
198:                         status = (ADCDSTAT1 >> channel) & 0x01;
199:                     }
200:                     else
201:                     {
202:                         status = (ADCDSTAT2 >> (channel - 32)) & 0x01;
203:                     }
204:                     return status;
205:                 }
206:                 
207:                 /* Read the conversion result */
208:                 uint16_t ADCHS_ChannelResultGet(ADCHS_CHANNEL_NUM channel)
209:                 {
210:                     return (*((&ADCDATA0) + channel));
211:                 
212:                 }
213:                 
214:                 
215:                 
216:                 
217:                 
218:                 bool ADCHS_EOSStatusGet(void)
219:                 {
220:                     return (bool)(ADCCON2bits.EOSRDY);
221:                 }
222:                 
223:                 
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
0000000C  00000000   NOP
00000010  00000000   NOP
00000014  00000000   NOP
00000018  00000000   NOP
0000001C  00000000   NOP
00000020  00000000   NOP
00000024  00000000   NOP
0000002C  00000000   NOP
00000030  00000000   NOP
00000034  00000000   NOP
00000038  00000000   NOP
00000044  00000000   NOP
00000048  00000000   NOP
0000004C  00000000   NOP
00000050  00000000   NOP
00000054  00000000   NOP
00000058  00000000   NOP
0000005C  00000000   NOP
00000060  00000000   NOP
00000068  00000000   NOP
0000006C  00000000   NOP
00000074  00000000   NOP
0000007C  00000000   NOP
9D00CA70  27BDFFF8   ADDIU SP, SP, -8
9D00CA74  AFBE0004   SW FP, 4(SP)
9D00CA78  03A0F025   OR FP, SP, ZERO
9D00CA7C  3C03BF85   LUI V1, -16507
9D00CA80  8C62B000   LW V0, -20480(V1)
9D00CA84  7C027BC4   INS V0, ZERO, 15, 1
9D00CA88  AC62B000   SW V0, -20480(V1)
9D00CA8C  3C02BFC5   LUI V0, -16443
9D00CA90  8C434008   LW V1, 16392(V0)
9D00CA94  3C02BF85   LUI V0, -16507
9D00CA98  AC43B188   SW V1, -20088(V0)
9D00CA9C  3C02BF85   LUI V0, -16507
9D00CAA0  3C030301   LUI V1, 769
9D00CAA4  34630001   ORI V1, V1, 1
9D00CAA8  AC43B0DC   SW V1, -20260(V0)
9D00CAAC  3C02BF85   LUI V0, -16507
9D00CAB0  3C030060   LUI V1, 96
9D00CAB4  AC43B000   SW V1, -20480(V0)
9D00CAB8  3C02BF85   LUI V0, -16507
9D00CABC  AC40B004   SW ZERO, -20476(V0)
9D00CAC0  3C02BF85   LUI V0, -16507
9D00CAC4  3C030100   LUI V1, 256
9D00CAC8  AC43B008   SW V1, -20472(V0)
9D00CACC  3C02BF85   LUI V0, -16507
9D00CAD0  AC40B00C   SW ZERO, -20468(V0)
9D00CAD4  3C02BF85   LUI V0, -16507
9D00CAD8  AC40B080   SW ZERO, -20352(V0)
9D00CADC  3C02BF85   LUI V0, -16507
9D00CAE0  AC40B084   SW ZERO, -20348(V0)
9D00CAE4  3C02BF85   LUI V0, -16507
9D00CAE8  AC40B088   SW ZERO, -20344(V0)
9D00CAEC  3C02BF85   LUI V0, -16507
9D00CAF0  AC40B0D0   SW ZERO, -20272(V0)
9D00CAF4  3C02BF85   LUI V0, -16507
9D00CAF8  AC40B010   SW ZERO, -20464(V0)
9D00CAFC  3C02BF85   LUI V0, -16507
9D00CB00  AC40B014   SW ZERO, -20460(V0)
9D00CB04  3C02BF85   LUI V0, -16507
9D00CB08  AC40B018   SW ZERO, -20456(V0)
9D00CB0C  3C02BF85   LUI V0, -16507
9D00CB10  AC40B028   SW ZERO, -20440(V0)
9D00CB14  3C02BF85   LUI V0, -16507
9D00CB18  AC40B02C   SW ZERO, -20436(V0)
9D00CB1C  3C03BF85   LUI V1, -16507
9D00CB20  8C62B000   LW V0, -20480(V1)
9D00CB24  24040001   ADDIU A0, ZERO, 1
9D00CB28  7C827BC4   INS V0, A0, 15, 1
9D00CB2C  AC62B000   SW V0, -20480(V1)
9D00CB30  00000000   NOP
9D00CB34  3C02BF85   LUI V0, -16507
9D00CB38  8C42B004   LW V0, -20476(V0)
9D00CB3C  7C4207C0   EXT V0, V0, 31, 1
9D00CB40  304200FF   ANDI V0, V0, 255
9D00CB44  1040FFFB   BEQ V0, ZERO, 0x9D00CB34
9D00CB48  00000000   NOP
9D00CB4C  00000000   NOP
9D00CB50  3C02BF85   LUI V0, -16507
9D00CB54  8C42B004   LW V0, -20476(V0)
9D00CB58  7C420780   EXT V0, V0, 30, 1
9D00CB5C  304200FF   ANDI V0, V0, 255
9D00CB60  1440FFFB   BNE V0, ZERO, 0x9D00CB50
9D00CB64  00000000   NOP
9D00CB68  3C03BF85   LUI V1, -16507
9D00CB6C  8C62B100   LW V0, -20224(V1)
9D00CB70  24040001   ADDIU A0, ZERO, 1
9D00CB74  7C821084   INS V0, A0, 2, 1
9D00CB78  AC62B100   SW V0, -20224(V1)
9D00CB7C  00000000   NOP
9D00CB80  3C02BF85   LUI V0, -16507
9D00CB84  8C42B100   LW V0, -20224(V0)
9D00CB88  7C420280   EXT V0, V0, 10, 1
9D00CB8C  304200FF   ANDI V0, V0, 255
9D00CB90  1040FFFB   BEQ V0, ZERO, 0x9D00CB80
9D00CB94  00000000   NOP
9D00CB98  3C03BF85   LUI V1, -16507
9D00CB9C  8C62B008   LW V0, -20472(V1)
9D00CBA0  24040001   ADDIU A0, ZERO, 1
9D00CBA4  7C829484   INS V0, A0, 18, 1
9D00CBA8  AC62B008   SW V0, -20472(V1)
9D00CBAC  00000000   NOP
9D00CBB0  03C0E825   OR SP, FP, ZERO
9D00CBB4  8FBE0004   LW FP, 4(SP)
9D00CBB8  27BD0008   ADDIU SP, SP, 8
9D00CBBC  03E00008   JR RA
9D00CBC0  00000000   NOP
9D010E94  27BDFFF8   ADDIU SP, SP, -8
9D010E98  AFBE0004   SW FP, 4(SP)
9D010E9C  03A0F025   OR FP, SP, ZERO
9D010EA0  AFC40008   SW A0, 8(FP)
9D010EA4  8FC20008   LW V0, 8(FP)
9D010EA8  3042003F   ANDI V0, V0, 63
9D010EAC  304400FF   ANDI A0, V0, 255
9D010EB0  3C03BF85   LUI V1, -16507
9D010EB4  8C62B008   LW V0, -20472(V1)
9D010EB8  7C822804   INS V0, A0, 0, 6
9D010EBC  AC62B008   SW V0, -20472(V1)
9D010EC0  3C03BF85   LUI V1, -16507
9D010EC4  8C62B008   LW V0, -20472(V1)
9D010EC8  24040001   ADDIU A0, ZERO, 1
9D010ECC  7C824204   INS V0, A0, 8, 1
9D010ED0  AC62B008   SW V0, -20472(V1)
9D010ED4  00000000   NOP
9D010ED8  03C0E825   OR SP, FP, ZERO
9D010EDC  8FBE0004   LW FP, 4(SP)
9D010EE0  27BD0008   ADDIU SP, SP, 8
9D010EE4  03E00008   JR RA
9D010EE8  00000000   NOP
9D011424  27BDFFF8   ADDIU SP, SP, -8
9D011428  AFBE0004   SW FP, 4(SP)
9D01142C  03A0F025   OR FP, SP, ZERO
9D011430  AFC40008   SW A0, 8(FP)
9D011434  8FC20008   LW V0, 8(FP)
9D011438  00021880   SLL V1, V0, 2
9D01143C  3C02BF85   LUI V0, -16507
9D011440  2442B200   ADDIU V0, V0, -19968
9D011444  00621021   ADDU V0, V1, V0
9D011448  8C420000   LW V0, 0(V0)
9D01144C  3042FFFF   ANDI V0, V0, -1
9D011450  03C0E825   OR SP, FP, ZERO
9D011454  8FBE0004   LW FP, 4(SP)
9D011458  27BD0008   ADDIU SP, SP, 8
9D01145C  03E00008   JR RA
9D011460  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/config/dsp_tu2/interrupts.c  
1:                   /*******************************************************************************
2:                    System Interrupts File
3:                   
4:                     Company:
5:                       Microchip Technology Inc.
6:                   
7:                     File Name:
8:                       interrupt.c
9:                   
10:                    Summary:
11:                      Interrupt vectors mapping
12:                  
13:                    Description:
14:                      This file maps all the interrupt vectors to their corresponding
15:                      implementations. If a particular module interrupt is used, then its ISR
16:                      definition can be found in corresponding PLIB source file. If a module
17:                      interrupt is not used, then its ISR implementation is mapped to dummy
18:                      handler.
19:                   *******************************************************************************/
20:                  
21:                  // DOM-IGNORE-BEGIN
22:                  /*******************************************************************************
23:                  * Copyright (C) 2018 Microchip Technology Inc. and its subsidiaries.
24:                  *
25:                  * Subject to your compliance with these terms, you may use Microchip software
26:                  * and any derivatives exclusively with Microchip products. It is your
27:                  * responsibility to comply with third party license terms applicable to your
28:                  * use of third party software (including open source software) that may
29:                  * accompany Microchip software.
30:                  *
31:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
32:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
33:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
34:                  * PARTICULAR PURPOSE.
35:                  *
36:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
37:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
38:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
39:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
40:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
41:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
42:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
43:                   *******************************************************************************/
44:                  // DOM-IGNORE-END
45:                  
46:                  // *****************************************************************************
47:                  // *****************************************************************************
48:                  // Section: Included Files
49:                  // *****************************************************************************
50:                  // *****************************************************************************
51:                  
52:                  #include "interrupts.h"
53:                  #include "definitions.h"
54:                  
55:                  
56:                  // *****************************************************************************
57:                  // *****************************************************************************
58:                  // Section: System Interrupt Vector Functions
59:                  // *****************************************************************************
60:                  // *****************************************************************************
61:                  
62:                  
63:                  void TIMER_2_InterruptHandler( void );
64:                  void UART1_FAULT_InterruptHandler( void );
65:                  void UART1_RX_InterruptHandler( void );
66:                  void UART1_TX_InterruptHandler( void );
67:                  
68:                  
69:                  
70:                  /* All the handlers are defined here.  Each will call its PLIB-specific function. */
71:                  void __ISR(_TIMER_2_VECTOR, ipl1SRS) TIMER_2_Handler (void)
72:                  {
73:                      TIMER_2_InterruptHandler();
74:                  }
75:                  
76:                  void __ISR(_UART1_FAULT_VECTOR, ipl1SRS) UART1_FAULT_Handler (void)
77:                  {
78:                      UART1_FAULT_InterruptHandler();
79:                  }
80:                  
81:                  void __ISR(_UART1_RX_VECTOR, ipl1SRS) UART1_RX_Handler (void)
82:                  {
83:                      UART1_RX_InterruptHandler();
84:                  }
85:                  
86:                  void __ISR(_UART1_TX_VECTOR, ipl1SRS) UART1_TX_Handler (void)
87:                  {
88:                      UART1_TX_InterruptHandler();
89:                  }
90:                  
91:                  
92:                  
93:                  
94:                  /*******************************************************************************
95:                   End of File
96:                  */
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00B748  415DE800   RDPGPR SP, SP
9D00B74C  401A7000   MFC0 K0, EPC
9D00B750  401B6000   MFC0 K1, Status
9D00B754  27BDFEE8   ADDIU SP, SP, -280
9D00B758  AFBA0114   SW K0, 276(SP)
9D00B75C  401A6002   MFC0 K0, SRSCtl
9D00B760  AFBB0110   SW K1, 272(SP)
9D00B764  AFBA010C   SW K0, 268(SP)
9D00B768  7C1B7844   INS K1, ZERO, 1, 15
9D00B76C  377B0400   ORI K1, K1, 1024
9D00B770  409B6000   MTC0 K1, Status
9D00B774  F7BF00D8   SDC1 F31, 216(SP)
9D00B778  F7BD00D0   SDC1 F29, 208(SP)
9D00B77C  F7BB00C8   SDC1 F27, 200(SP)
9D00B780  F7B900C0   SDC1 F25, 192(SP)
9D00B784  F7B700B8   SDC1 F23, 184(SP)
9D00B788  F7B500B0   SDC1 F21, 176(SP)
9D00B78C  F7B300A8   SDC1 F19, 168(SP)
9D00B790  F7B200A0   SDC1 F18, 160(SP)
9D00B794  F7B10098   SDC1 F17, 152(SP)
9D00B798  F7B00090   SDC1 F16, 144(SP)
9D00B79C  F7AF0088   SDC1 F15, 136(SP)
9D00B7A0  F7AE0080   SDC1 F14, 128(SP)
9D00B7A4  F7AD0078   SDC1 F13, 120(SP)
9D00B7A8  F7AC0070   SDC1 F12, 112(SP)
9D00B7AC  F7AB0068   SDC1 F11, 104(SP)
9D00B7B0  F7AA0060   SDC1 F10, 96(SP)
9D00B7B4  F7A90058   SDC1 F9, 88(SP)
9D00B7B8  F7A80050   SDC1 F8, 80(SP)
9D00B7BC  F7A70048   SDC1 F7, 72(SP)
9D00B7C0  F7A60040   SDC1 F6, 64(SP)
9D00B7C4  F7A50038   SDC1 F5, 56(SP)
9D00B7C8  F7A40030   SDC1 F4, 48(SP)
9D00B7CC  F7A30028   SDC1 F3, 40(SP)
9D00B7D0  F7A20020   SDC1 F2, 32(SP)
9D00B7D4  F7A10018   SDC1 F1, 24(SP)
9D00B7D8  F7A00010   SDC1 F0, 16(SP)
9D00B7DC  00001012   MFLO V0
9D00B7E0  AFA20104   SW V0, 260(SP)
9D00B7E4  00001810   MFHI V1
9D00B7E8  AFA30100   SW V1, 256(SP)
9D00B7EC  00201012   MFLO V0
9D00B7F0  AFA200FC   SW V0, 252(SP)
9D00B7F4  00201810   MFHI V1
9D00B7F8  AFA300F8   SW V1, 248(SP)
9D00B7FC  00401012   MFLO V0
9D00B800  AFA200F4   SW V0, 244(SP)
9D00B804  00401810   MFHI V1
9D00B808  AFA300F0   SW V1, 240(SP)
9D00B80C  00601012   MFLO V0
9D00B810  AFA200EC   SW V0, 236(SP)
9D00B814  00601810   MFHI V1
9D00B818  AFA300E8   SW V1, 232(SP)
9D00B81C  7C3F1CB8   RDDSP V1, 0x3F
9D00B820  AFA30108   SW V1, 264(SP)
9D00B824  4442F800   CFC1 V0, F31
9D00B828  AFA200E4   SW V0, 228(SP)
9D00B82C  03A0F025   OR FP, SP, ZERO
9D00B830  0F404240   JAL TIMER_2_InterruptHandler
9D00B834  00000000   NOP
9D00B838  00000000   NOP
9D00B83C  03C0E825   OR SP, FP, ZERO
9D00B840  8FA200E4   LW V0, 228(SP)
9D00B844  44C2F800   CTC1 V0, F31
9D00B848  8FA30108   LW V1, 264(SP)
9D00B84C  7C61FCF8   WRDSP V1, 0x3F
9D00B850  8FA20104   LW V0, 260(SP)
9D00B854  00400013   MTLO V0
9D00B858  8FA30100   LW V1, 256(SP)
9D00B85C  00600011   MTHI V1
9D00B860  8FA500FC   LW A1, 252(SP)
9D00B864  00A00813   MTLO A1
9D00B868  8FA500F8   LW A1, 248(SP)
9D00B86C  00A00811   MTHI A1
9D00B870  8FA500F4   LW A1, 244(SP)
9D00B874  00A01013   MTLO A1
9D00B878  8FA500F0   LW A1, 240(SP)
9D00B87C  00A01011   MTHI A1
9D00B880  8FA500EC   LW A1, 236(SP)
9D00B884  00A01813   MTLO A1
9D00B888  8FA500E8   LW A1, 232(SP)
9D00B88C  00A01811   MTHI A1
9D00B890  D7BF00D8   LDC1 F31, 216(SP)
9D00B894  D7BD00D0   LDC1 F29, 208(SP)
9D00B898  D7BB00C8   LDC1 F27, 200(SP)
9D00B89C  D7B900C0   LDC1 F25, 192(SP)
9D00B8A0  D7B700B8   LDC1 F23, 184(SP)
9D00B8A4  D7B500B0   LDC1 F21, 176(SP)
9D00B8A8  D7B300A8   LDC1 F19, 168(SP)
9D00B8AC  D7B200A0   LDC1 F18, 160(SP)
9D00B8B0  D7B10098   LDC1 F17, 152(SP)
9D00B8B4  D7B00090   LDC1 F16, 144(SP)
9D00B8B8  D7AF0088   LDC1 F15, 136(SP)
9D00B8BC  D7AE0080   LDC1 F14, 128(SP)
9D00B8C0  D7AD0078   LDC1 F13, 120(SP)
9D00B8C4  D7AC0070   LDC1 F12, 112(SP)
9D00B8C8  D7AB0068   LDC1 F11, 104(SP)
9D00B8CC  D7AA0060   LDC1 F10, 96(SP)
9D00B8D0  D7A90058   LDC1 F9, 88(SP)
9D00B8D4  D7A80050   LDC1 F8, 80(SP)
9D00B8D8  D7A70048   LDC1 F7, 72(SP)
9D00B8DC  D7A60040   LDC1 F6, 64(SP)
9D00B8E0  D7A50038   LDC1 F5, 56(SP)
9D00B8E4  D7A40030   LDC1 F4, 48(SP)
9D00B8E8  D7A30028   LDC1 F3, 40(SP)
9D00B8EC  D7A20020   LDC1 F2, 32(SP)
9D00B8F0  D7A10018   LDC1 F1, 24(SP)
9D00B8F4  D7A00010   LDC1 F0, 16(SP)
9D00B8F8  41606000   DI ZERO
9D00B8FC  000000C0   EHB
9D00B900  8FBB010C   LW K1, 268(SP)
9D00B904  8FBA0114   LW K0, 276(SP)
9D00B908  409B6002   MTC0 K1, SRSCtl
9D00B90C  8FBB0110   LW K1, 272(SP)
9D00B910  409A7000   MTC0 K0, EPC
9D00B914  27BD0118   ADDIU SP, SP, 280
9D00B918  41DDE800   WRPGPR SP, SP
9D00B91C  409B6000   MTC0 K1, Status
9D00B920  42000018   ERET
9D00B924  415DE800   RDPGPR SP, SP
9D00B928  401A7000   MFC0 K0, EPC
9D00B92C  401B6000   MFC0 K1, Status
9D00B930  27BDFEE8   ADDIU SP, SP, -280
9D00B934  AFBA0114   SW K0, 276(SP)
9D00B938  401A6002   MFC0 K0, SRSCtl
9D00B93C  AFBB0110   SW K1, 272(SP)
9D00B940  AFBA010C   SW K0, 268(SP)
9D00B944  7C1B7844   INS K1, ZERO, 1, 15
9D00B948  377B0400   ORI K1, K1, 1024
9D00B94C  409B6000   MTC0 K1, Status
9D00B950  F7BF00D8   SDC1 F31, 216(SP)
9D00B954  F7BD00D0   SDC1 F29, 208(SP)
9D00B958  F7BB00C8   SDC1 F27, 200(SP)
9D00B95C  F7B900C0   SDC1 F25, 192(SP)
9D00B960  F7B700B8   SDC1 F23, 184(SP)
9D00B964  F7B500B0   SDC1 F21, 176(SP)
9D00B968  F7B300A8   SDC1 F19, 168(SP)
9D00B96C  F7B200A0   SDC1 F18, 160(SP)
9D00B970  F7B10098   SDC1 F17, 152(SP)
9D00B974  F7B00090   SDC1 F16, 144(SP)
9D00B978  F7AF0088   SDC1 F15, 136(SP)
9D00B97C  F7AE0080   SDC1 F14, 128(SP)
9D00B980  F7AD0078   SDC1 F13, 120(SP)
9D00B984  F7AC0070   SDC1 F12, 112(SP)
9D00B988  F7AB0068   SDC1 F11, 104(SP)
9D00B98C  F7AA0060   SDC1 F10, 96(SP)
9D00B990  F7A90058   SDC1 F9, 88(SP)
9D00B994  F7A80050   SDC1 F8, 80(SP)
9D00B998  F7A70048   SDC1 F7, 72(SP)
9D00B99C  F7A60040   SDC1 F6, 64(SP)
9D00B9A0  F7A50038   SDC1 F5, 56(SP)
9D00B9A4  F7A40030   SDC1 F4, 48(SP)
9D00B9A8  F7A30028   SDC1 F3, 40(SP)
9D00B9AC  F7A20020   SDC1 F2, 32(SP)
9D00B9B0  F7A10018   SDC1 F1, 24(SP)
9D00B9B4  F7A00010   SDC1 F0, 16(SP)
9D00B9B8  00001012   MFLO V0
9D00B9BC  AFA20104   SW V0, 260(SP)
9D00B9C0  00001810   MFHI V1
9D00B9C4  AFA30100   SW V1, 256(SP)
9D00B9C8  00201012   MFLO V0
9D00B9CC  AFA200FC   SW V0, 252(SP)
9D00B9D0  00201810   MFHI V1
9D00B9D4  AFA300F8   SW V1, 248(SP)
9D00B9D8  00401012   MFLO V0
9D00B9DC  AFA200F4   SW V0, 244(SP)
9D00B9E0  00401810   MFHI V1
9D00B9E4  AFA300F0   SW V1, 240(SP)
9D00B9E8  00601012   MFLO V0
9D00B9EC  AFA200EC   SW V0, 236(SP)
9D00B9F0  00601810   MFHI V1
9D00B9F4  AFA300E8   SW V1, 232(SP)
9D00B9F8  7C3F1CB8   RDDSP V1, 0x3F
9D00B9FC  AFA30108   SW V1, 264(SP)
9D00BA00  4442F800   CFC1 V0, F31
9D00BA04  AFA200E4   SW V0, 228(SP)
9D00BA08  03A0F025   OR FP, SP, ZERO
9D00BA0C  0F4040B9   JAL UART1_FAULT_InterruptHandler
9D00BA10  00000000   NOP
9D00BA14  00000000   NOP
9D00BA18  03C0E825   OR SP, FP, ZERO
9D00BA1C  8FA200E4   LW V0, 228(SP)
9D00BA20  44C2F800   CTC1 V0, F31
9D00BA24  8FA30108   LW V1, 264(SP)
9D00BA28  7C61FCF8   WRDSP V1, 0x3F
9D00BA2C  8FA20104   LW V0, 260(SP)
9D00BA30  00400013   MTLO V0
9D00BA34  8FA30100   LW V1, 256(SP)
9D00BA38  00600011   MTHI V1
9D00BA3C  8FA500FC   LW A1, 252(SP)
9D00BA40  00A00813   MTLO A1
9D00BA44  8FA500F8   LW A1, 248(SP)
9D00BA48  00A00811   MTHI A1
9D00BA4C  8FA500F4   LW A1, 244(SP)
9D00BA50  00A01013   MTLO A1
9D00BA54  8FA500F0   LW A1, 240(SP)
9D00BA58  00A01011   MTHI A1
9D00BA5C  8FA500EC   LW A1, 236(SP)
9D00BA60  00A01813   MTLO A1
9D00BA64  8FA500E8   LW A1, 232(SP)
9D00BA68  00A01811   MTHI A1
9D00BA6C  D7BF00D8   LDC1 F31, 216(SP)
9D00BA70  D7BD00D0   LDC1 F29, 208(SP)
9D00BA74  D7BB00C8   LDC1 F27, 200(SP)
9D00BA78  D7B900C0   LDC1 F25, 192(SP)
9D00BA7C  D7B700B8   LDC1 F23, 184(SP)
9D00BA80  D7B500B0   LDC1 F21, 176(SP)
9D00BA84  D7B300A8   LDC1 F19, 168(SP)
9D00BA88  D7B200A0   LDC1 F18, 160(SP)
9D00BA8C  D7B10098   LDC1 F17, 152(SP)
9D00BA90  D7B00090   LDC1 F16, 144(SP)
9D00BA94  D7AF0088   LDC1 F15, 136(SP)
9D00BA98  D7AE0080   LDC1 F14, 128(SP)
9D00BA9C  D7AD0078   LDC1 F13, 120(SP)
9D00BAA0  D7AC0070   LDC1 F12, 112(SP)
9D00BAA4  D7AB0068   LDC1 F11, 104(SP)
9D00BAA8  D7AA0060   LDC1 F10, 96(SP)
9D00BAAC  D7A90058   LDC1 F9, 88(SP)
9D00BAB0  D7A80050   LDC1 F8, 80(SP)
9D00BAB4  D7A70048   LDC1 F7, 72(SP)
9D00BAB8  D7A60040   LDC1 F6, 64(SP)
9D00BABC  D7A50038   LDC1 F5, 56(SP)
9D00BAC0  D7A40030   LDC1 F4, 48(SP)
9D00BAC4  D7A30028   LDC1 F3, 40(SP)
9D00BAC8  D7A20020   LDC1 F2, 32(SP)
9D00BACC  D7A10018   LDC1 F1, 24(SP)
9D00BAD0  D7A00010   LDC1 F0, 16(SP)
9D00BAD4  41606000   DI ZERO
9D00BAD8  000000C0   EHB
9D00BADC  8FBB010C   LW K1, 268(SP)
9D00BAE0  8FBA0114   LW K0, 276(SP)
9D00BAE4  409B6002   MTC0 K1, SRSCtl
9D00BAE8  8FBB0110   LW K1, 272(SP)
9D00BAEC  409A7000   MTC0 K0, EPC
9D00BAF0  27BD0118   ADDIU SP, SP, 280
9D00BAF4  41DDE800   WRPGPR SP, SP
9D00BAF8  409B6000   MTC0 K1, Status
9D00BAFC  42000018   ERET
9D00BB00  415DE800   RDPGPR SP, SP
9D00BB04  401A7000   MFC0 K0, EPC
9D00BB08  401B6000   MFC0 K1, Status
9D00BB0C  27BDFEE8   ADDIU SP, SP, -280
9D00BB10  AFBA0114   SW K0, 276(SP)
9D00BB14  401A6002   MFC0 K0, SRSCtl
9D00BB18  AFBB0110   SW K1, 272(SP)
9D00BB1C  AFBA010C   SW K0, 268(SP)
9D00BB20  7C1B7844   INS K1, ZERO, 1, 15
9D00BB24  377B0400   ORI K1, K1, 1024
9D00BB28  409B6000   MTC0 K1, Status
9D00BB2C  F7BF00D8   SDC1 F31, 216(SP)
9D00BB30  F7BD00D0   SDC1 F29, 208(SP)
9D00BB34  F7BB00C8   SDC1 F27, 200(SP)
9D00BB38  F7B900C0   SDC1 F25, 192(SP)
9D00BB3C  F7B700B8   SDC1 F23, 184(SP)
9D00BB40  F7B500B0   SDC1 F21, 176(SP)
9D00BB44  F7B300A8   SDC1 F19, 168(SP)
9D00BB48  F7B200A0   SDC1 F18, 160(SP)
9D00BB4C  F7B10098   SDC1 F17, 152(SP)
9D00BB50  F7B00090   SDC1 F16, 144(SP)
9D00BB54  F7AF0088   SDC1 F15, 136(SP)
9D00BB58  F7AE0080   SDC1 F14, 128(SP)
9D00BB5C  F7AD0078   SDC1 F13, 120(SP)
9D00BB60  F7AC0070   SDC1 F12, 112(SP)
9D00BB64  F7AB0068   SDC1 F11, 104(SP)
9D00BB68  F7AA0060   SDC1 F10, 96(SP)
9D00BB6C  F7A90058   SDC1 F9, 88(SP)
9D00BB70  F7A80050   SDC1 F8, 80(SP)
9D00BB74  F7A70048   SDC1 F7, 72(SP)
9D00BB78  F7A60040   SDC1 F6, 64(SP)
9D00BB7C  F7A50038   SDC1 F5, 56(SP)
9D00BB80  F7A40030   SDC1 F4, 48(SP)
9D00BB84  F7A30028   SDC1 F3, 40(SP)
9D00BB88  F7A20020   SDC1 F2, 32(SP)
9D00BB8C  F7A10018   SDC1 F1, 24(SP)
9D00BB90  F7A00010   SDC1 F0, 16(SP)
9D00BB94  00001012   MFLO V0
9D00BB98  AFA20104   SW V0, 260(SP)
9D00BB9C  00001810   MFHI V1
9D00BBA0  AFA30100   SW V1, 256(SP)
9D00BBA4  00201012   MFLO V0
9D00BBA8  AFA200FC   SW V0, 252(SP)
9D00BBAC  00201810   MFHI V1
9D00BBB0  AFA300F8   SW V1, 248(SP)
9D00BBB4  00401012   MFLO V0
9D00BBB8  AFA200F4   SW V0, 244(SP)
9D00BBBC  00401810   MFHI V1
9D00BBC0  AFA300F0   SW V1, 240(SP)
9D00BBC4  00601012   MFLO V0
9D00BBC8  AFA200EC   SW V0, 236(SP)
9D00BBCC  00601810   MFHI V1
9D00BBD0  AFA300E8   SW V1, 232(SP)
9D00BBD4  7C3F1CB8   RDDSP V1, 0x3F
9D00BBD8  AFA30108   SW V1, 264(SP)
9D00BBDC  4442F800   CFC1 V0, F31
9D00BBE0  AFA200E4   SW V0, 228(SP)
9D00BBE4  03A0F025   OR FP, SP, ZERO
9D00BBE8  0F404163   JAL UART1_RX_InterruptHandler
9D00BBEC  00000000   NOP
9D00BBF0  00000000   NOP
9D00BBF4  03C0E825   OR SP, FP, ZERO
9D00BBF8  8FA200E4   LW V0, 228(SP)
9D00BBFC  44C2F800   CTC1 V0, F31
9D00BC00  8FA30108   LW V1, 264(SP)
9D00BC04  7C61FCF8   WRDSP V1, 0x3F
9D00BC08  8FA20104   LW V0, 260(SP)
9D00BC0C  00400013   MTLO V0
9D00BC10  8FA30100   LW V1, 256(SP)
9D00BC14  00600011   MTHI V1
9D00BC18  8FA500FC   LW A1, 252(SP)
9D00BC1C  00A00813   MTLO A1
9D00BC20  8FA500F8   LW A1, 248(SP)
9D00BC24  00A00811   MTHI A1
9D00BC28  8FA500F4   LW A1, 244(SP)
9D00BC2C  00A01013   MTLO A1
9D00BC30  8FA500F0   LW A1, 240(SP)
9D00BC34  00A01011   MTHI A1
9D00BC38  8FA500EC   LW A1, 236(SP)
9D00BC3C  00A01813   MTLO A1
9D00BC40  8FA500E8   LW A1, 232(SP)
9D00BC44  00A01811   MTHI A1
9D00BC48  D7BF00D8   LDC1 F31, 216(SP)
9D00BC4C  D7BD00D0   LDC1 F29, 208(SP)
9D00BC50  D7BB00C8   LDC1 F27, 200(SP)
9D00BC54  D7B900C0   LDC1 F25, 192(SP)
9D00BC58  D7B700B8   LDC1 F23, 184(SP)
9D00BC5C  D7B500B0   LDC1 F21, 176(SP)
9D00BC60  D7B300A8   LDC1 F19, 168(SP)
9D00BC64  D7B200A0   LDC1 F18, 160(SP)
9D00BC68  D7B10098   LDC1 F17, 152(SP)
9D00BC6C  D7B00090   LDC1 F16, 144(SP)
9D00BC70  D7AF0088   LDC1 F15, 136(SP)
9D00BC74  D7AE0080   LDC1 F14, 128(SP)
9D00BC78  D7AD0078   LDC1 F13, 120(SP)
9D00BC7C  D7AC0070   LDC1 F12, 112(SP)
9D00BC80  D7AB0068   LDC1 F11, 104(SP)
9D00BC84  D7AA0060   LDC1 F10, 96(SP)
9D00BC88  D7A90058   LDC1 F9, 88(SP)
9D00BC8C  D7A80050   LDC1 F8, 80(SP)
9D00BC90  D7A70048   LDC1 F7, 72(SP)
9D00BC94  D7A60040   LDC1 F6, 64(SP)
9D00BC98  D7A50038   LDC1 F5, 56(SP)
9D00BC9C  D7A40030   LDC1 F4, 48(SP)
9D00BCA0  D7A30028   LDC1 F3, 40(SP)
9D00BCA4  D7A20020   LDC1 F2, 32(SP)
9D00BCA8  D7A10018   LDC1 F1, 24(SP)
9D00BCAC  D7A00010   LDC1 F0, 16(SP)
9D00BCB0  41606000   DI ZERO
9D00BCB4  000000C0   EHB
9D00BCB8  8FBB010C   LW K1, 268(SP)
9D00BCBC  8FBA0114   LW K0, 276(SP)
9D00BCC0  409B6002   MTC0 K1, SRSCtl
9D00BCC4  8FBB0110   LW K1, 272(SP)
9D00BCC8  409A7000   MTC0 K0, EPC
9D00BCCC  27BD0118   ADDIU SP, SP, 280
9D00BCD0  41DDE800   WRPGPR SP, SP
9D00BCD4  409B6000   MTC0 K1, Status
9D00BCD8  42000018   ERET
9D00BCDC  415DE800   RDPGPR SP, SP
9D00BCE0  401A7000   MFC0 K0, EPC
9D00BCE4  401B6000   MFC0 K1, Status
9D00BCE8  27BDFEE8   ADDIU SP, SP, -280
9D00BCEC  AFBA0114   SW K0, 276(SP)
9D00BCF0  401A6002   MFC0 K0, SRSCtl
9D00BCF4  AFBB0110   SW K1, 272(SP)
9D00BCF8  AFBA010C   SW K0, 268(SP)
9D00BCFC  7C1B7844   INS K1, ZERO, 1, 15
9D00BD00  377B0400   ORI K1, K1, 1024
9D00BD04  409B6000   MTC0 K1, Status
9D00BD08  F7BF00D8   SDC1 F31, 216(SP)
9D00BD0C  F7BD00D0   SDC1 F29, 208(SP)
9D00BD10  F7BB00C8   SDC1 F27, 200(SP)
9D00BD14  F7B900C0   SDC1 F25, 192(SP)
9D00BD18  F7B700B8   SDC1 F23, 184(SP)
9D00BD1C  F7B500B0   SDC1 F21, 176(SP)
9D00BD20  F7B300A8   SDC1 F19, 168(SP)
9D00BD24  F7B200A0   SDC1 F18, 160(SP)
9D00BD28  F7B10098   SDC1 F17, 152(SP)
9D00BD2C  F7B00090   SDC1 F16, 144(SP)
9D00BD30  F7AF0088   SDC1 F15, 136(SP)
9D00BD34  F7AE0080   SDC1 F14, 128(SP)
9D00BD38  F7AD0078   SDC1 F13, 120(SP)
9D00BD3C  F7AC0070   SDC1 F12, 112(SP)
9D00BD40  F7AB0068   SDC1 F11, 104(SP)
9D00BD44  F7AA0060   SDC1 F10, 96(SP)
9D00BD48  F7A90058   SDC1 F9, 88(SP)
9D00BD4C  F7A80050   SDC1 F8, 80(SP)
9D00BD50  F7A70048   SDC1 F7, 72(SP)
9D00BD54  F7A60040   SDC1 F6, 64(SP)
9D00BD58  F7A50038   SDC1 F5, 56(SP)
9D00BD5C  F7A40030   SDC1 F4, 48(SP)
9D00BD60  F7A30028   SDC1 F3, 40(SP)
9D00BD64  F7A20020   SDC1 F2, 32(SP)
9D00BD68  F7A10018   SDC1 F1, 24(SP)
9D00BD6C  F7A00010   SDC1 F0, 16(SP)
9D00BD70  00001012   MFLO V0
9D00BD74  AFA20104   SW V0, 260(SP)
9D00BD78  00001810   MFHI V1
9D00BD7C  AFA30100   SW V1, 256(SP)
9D00BD80  00201012   MFLO V0
9D00BD84  AFA200FC   SW V0, 252(SP)
9D00BD88  00201810   MFHI V1
9D00BD8C  AFA300F8   SW V1, 248(SP)
9D00BD90  00401012   MFLO V0
9D00BD94  AFA200F4   SW V0, 244(SP)
9D00BD98  00401810   MFHI V1
9D00BD9C  AFA300F0   SW V1, 240(SP)
9D00BDA0  00601012   MFLO V0
9D00BDA4  AFA200EC   SW V0, 236(SP)
9D00BDA8  00601810   MFHI V1
9D00BDAC  AFA300E8   SW V1, 232(SP)
9D00BDB0  7C3F1CB8   RDDSP V1, 0x3F
9D00BDB4  AFA30108   SW V1, 264(SP)
9D00BDB8  4442F800   CFC1 V0, F31
9D00BDBC  AFA200E4   SW V0, 228(SP)
9D00BDC0  03A0F025   OR FP, SP, ZERO
9D00BDC4  0F4036B1   JAL UART1_TX_InterruptHandler
9D00BDC8  00000000   NOP
9D00BDCC  00000000   NOP
9D00BDD0  03C0E825   OR SP, FP, ZERO
9D00BDD4  8FA200E4   LW V0, 228(SP)
9D00BDD8  44C2F800   CTC1 V0, F31
9D00BDDC  8FA30108   LW V1, 264(SP)
9D00BDE0  7C61FCF8   WRDSP V1, 0x3F
9D00BDE4  8FA20104   LW V0, 260(SP)
9D00BDE8  00400013   MTLO V0
9D00BDEC  8FA30100   LW V1, 256(SP)
9D00BDF0  00600011   MTHI V1
9D00BDF4  8FA500FC   LW A1, 252(SP)
9D00BDF8  00A00813   MTLO A1
9D00BDFC  8FA500F8   LW A1, 248(SP)
9D00BE00  00A00811   MTHI A1
9D00BE04  8FA500F4   LW A1, 244(SP)
9D00BE08  00A01013   MTLO A1
9D00BE0C  8FA500F0   LW A1, 240(SP)
9D00BE10  00A01011   MTHI A1
9D00BE14  8FA500EC   LW A1, 236(SP)
9D00BE18  00A01813   MTLO A1
9D00BE1C  8FA500E8   LW A1, 232(SP)
9D00BE20  00A01811   MTHI A1
9D00BE24  D7BF00D8   LDC1 F31, 216(SP)
9D00BE28  D7BD00D0   LDC1 F29, 208(SP)
9D00BE2C  D7BB00C8   LDC1 F27, 200(SP)
9D00BE30  D7B900C0   LDC1 F25, 192(SP)
9D00BE34  D7B700B8   LDC1 F23, 184(SP)
9D00BE38  D7B500B0   LDC1 F21, 176(SP)
9D00BE3C  D7B300A8   LDC1 F19, 168(SP)
9D00BE40  D7B200A0   LDC1 F18, 160(SP)
9D00BE44  D7B10098   LDC1 F17, 152(SP)
9D00BE48  D7B00090   LDC1 F16, 144(SP)
9D00BE4C  D7AF0088   LDC1 F15, 136(SP)
9D00BE50  D7AE0080   LDC1 F14, 128(SP)
9D00BE54  D7AD0078   LDC1 F13, 120(SP)
9D00BE58  D7AC0070   LDC1 F12, 112(SP)
9D00BE5C  D7AB0068   LDC1 F11, 104(SP)
9D00BE60  D7AA0060   LDC1 F10, 96(SP)
9D00BE64  D7A90058   LDC1 F9, 88(SP)
9D00BE68  D7A80050   LDC1 F8, 80(SP)
9D00BE6C  D7A70048   LDC1 F7, 72(SP)
9D00BE70  D7A60040   LDC1 F6, 64(SP)
9D00BE74  D7A50038   LDC1 F5, 56(SP)
9D00BE78  D7A40030   LDC1 F4, 48(SP)
9D00BE7C  D7A30028   LDC1 F3, 40(SP)
9D00BE80  D7A20020   LDC1 F2, 32(SP)
9D00BE84  D7A10018   LDC1 F1, 24(SP)
9D00BE88  D7A00010   LDC1 F0, 16(SP)
9D00BE8C  41606000   DI ZERO
9D00BE90  000000C0   EHB
9D00BE94  8FBB010C   LW K1, 268(SP)
9D00BE98  8FBA0114   LW K0, 276(SP)
9D00BE9C  409B6002   MTC0 K1, SRSCtl
9D00BEA0  8FBB0110   LW K1, 272(SP)
9D00BEA4  409A7000   MTC0 K0, EPC
9D00BEA8  27BD0118   ADDIU SP, SP, 280
9D00BEAC  41DDE800   WRPGPR SP, SP
9D00BEB0  409B6000   MTC0 K1, Status
9D00BEB4  42000018   ERET
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/config/dsp_tu2/initialization.c
1:                   /*******************************************************************************
2:                     System Initialization File
3:                   
4:                     File Name:
5:                       initialization.c
6:                   
7:                     Summary:
8:                       This file contains source code necessary to initialize the system.
9:                   
10:                    Description:
11:                      This file contains source code necessary to initialize the system.  It
12:                      implements the "SYS_Initialize" function, defines the configuration bits,
13:                      and allocates any necessary global system resources,
14:                   *******************************************************************************/
15:                  
16:                  // DOM-IGNORE-BEGIN
17:                  /*******************************************************************************
18:                  * Copyright (C) 2018 Microchip Technology Inc. and its subsidiaries.
19:                  *
20:                  * Subject to your compliance with these terms, you may use Microchip software
21:                  * and any derivatives exclusively with Microchip products. It is your
22:                  * responsibility to comply with third party license terms applicable to your
23:                  * use of third party software (including open source software) that may
24:                  * accompany Microchip software.
25:                  *
26:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
27:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
28:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
29:                  * PARTICULAR PURPOSE.
30:                  *
31:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
32:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
33:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
34:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
35:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
36:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
37:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
38:                   *******************************************************************************/
39:                  // DOM-IGNORE-END
40:                  
41:                  // *****************************************************************************
42:                  // *****************************************************************************
43:                  // Section: Included Files
44:                  // *****************************************************************************
45:                  // *****************************************************************************
46:                  #include "definitions.h"
47:                  #include "device.h"
48:                  
49:                  
50:                  
51:                  // ****************************************************************************
52:                  // ****************************************************************************
53:                  // Section: Configuration Bits
54:                  // ****************************************************************************
55:                  // ****************************************************************************
56:                  
57:                  /*** DEVCFG0 ***/
58:                  #pragma config DEBUG =      OFF
59:                  #pragma config JTAGEN =     OFF
60:                  #pragma config ICESEL =     ICS_PGx1
61:                  #pragma config TRCEN =      OFF
62:                  #pragma config BOOTISA =    MIPS32
63:                  #pragma config FECCCON =    OFF_UNLOCKED
64:                  #pragma config FSLEEP =     OFF
65:                  #pragma config DBGPER =     PG_ALL
66:                  #pragma config SMCLR =      MCLR_NORM
67:                  #pragma config SOSCGAIN =   GAIN_LEVEL_3
68:                  #pragma config SOSCBOOST =  ON
69:                  #pragma config POSCGAIN =   GAIN_LEVEL_3
70:                  #pragma config POSCBOOST =  ON
71:                  #pragma config EJTAGBEN =   NORMAL
72:                  #pragma config CP =         OFF
73:                  
74:                  /*** DEVCFG1 ***/
75:                  #pragma config FNOSC =      SPLL
76:                  #pragma config DMTINTV =    WIN_127_128
77:                  #pragma config FSOSCEN =    OFF
78:                  #pragma config IESO =       OFF
79:                  #pragma config POSCMOD =    OFF
80:                  #pragma config OSCIOFNC =   OFF
81:                  #pragma config FCKSM =      CSECME
82:                  #pragma config WDTPS =      PS1048576
83:                  #pragma config WDTSPGM =    STOP
84:                  #pragma config FWDTEN =     OFF
85:                  #pragma config WINDIS =     NORMAL
86:                  #pragma config FWDTWINSZ =  WINSZ_25
87:                  #pragma config DMTCNT =     DMT31
88:                  #pragma config FDMTEN =     OFF
89:                  
90:                  /*** DEVCFG2 ***/
91:                  #pragma config FPLLIDIV =   DIV_1
92:                  #pragma config FPLLRNG =    RANGE_5_10_MHZ
93:                  #pragma config FPLLICLK =   PLL_FRC
94:                  #pragma config FPLLMULT =   MUL_50
95:                  #pragma config FPLLODIV =   DIV_2
96:                  #pragma config UPLLFSEL =   FREQ_24MHZ
97:                  
98:                  /*** DEVCFG3 ***/
99:                  #pragma config USERID =     0xffff
100:                 #pragma config FMIIEN =     ON
101:                 #pragma config FETHIO =     ON
102:                 #pragma config PGL1WAY =    ON
103:                 #pragma config PMDL1WAY =   ON
104:                 #pragma config IOL1WAY =    ON
105:                 #pragma config FUSBIDIO =   ON
106:                 
107:                 /*** BF1SEQ0 ***/
108:                 
109:                 #pragma config TSEQ =       0xffff
110:                 #pragma config CSEQ =       0x0
111:                 
112:                 
113:                 
114:                 
115:                 
116:                 // *****************************************************************************
117:                 // *****************************************************************************
118:                 // Section: Driver Initialization Data
119:                 // *****************************************************************************
120:                 // *****************************************************************************
121:                 
122:                 
123:                 // *****************************************************************************
124:                 // *****************************************************************************
125:                 // Section: System Data
126:                 // *****************************************************************************
127:                 // *****************************************************************************
128:                 
129:                 // *****************************************************************************
130:                 // *****************************************************************************
131:                 // Section: Library/Stack Initialization Data
132:                 // *****************************************************************************
133:                 // *****************************************************************************
134:                 
135:                 
136:                 // *****************************************************************************
137:                 // *****************************************************************************
138:                 // Section: System Initialization
139:                 // *****************************************************************************
140:                 // *****************************************************************************
141:                 
142:                 
143:                 
144:                 // *****************************************************************************
145:                 // *****************************************************************************
146:                 // Section: Local initialization functions
147:                 // *****************************************************************************
148:                 // *****************************************************************************
149:                 
150:                 
151:                 
152:                 /*******************************************************************************
153:                   Function:
154:                     void SYS_Initialize ( void *data )
155:                 
156:                   Summary:
157:                     Initializes the board, services, drivers, application and other modules.
158:                 
159:                   Remarks:
160:                  */
161:                 
162:                 void SYS_Initialize ( void* data )
163:                 {
164:                     /* MISRAC 2012 deviation block start */
165:                     /* MISRA C-2012 Rule 2.2 deviated in this file.  Deviation record ID -  H3_MISRAC_2012_R_2_2_DR_1 */
166:                 
167:                     /* Start out with interrupts disabled before configuring any modules */
168:                     __builtin_disable_interrupts();
169:                 
170:                   
171:                     CLK_Initialize();
172:                     /* Configure Prefetch, Wait States and ECC */
173:                     PRECONbits.PREFEN = 3;
174:                     PRECONbits.PFMWS = 3;
175:                     CFGCONbits.ECCCON = 3;
176:                 
177:                 
178:                 
179:                 	GPIO_Initialize();
180:                 
181:                     ADCHS_Initialize();
182:                 
183:                 	UART1_Initialize();
184:                 
185:                     TMR2_Initialize();
186:                 
187:                 	SPI3_Initialize();
188:                 
189:                     OCMP1_Initialize();
190:                 
191:                 	SPI2_Initialize();
192:                 
193:                 	SPI1_Initialize();
194:                 
195:                 
196:                 
197:                 
198:                 
199:                     EVIC_Initialize();
200:                 
201:                 	/* Enable global interrupts */
202:                     __builtin_enable_interrupts();
203:                 
204:                 
205:                     /* MISRAC 2012 deviation block end */
206:                 }
207:                 
208:                 
209:                 /*******************************************************************************
210:                  End of File
211:                 */
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00EDEC  27BDFFE8   ADDIU SP, SP, -24
9D00EDF0  AFBF0014   SW RA, 20(SP)
9D00EDF4  AFBE0010   SW FP, 16(SP)
9D00EDF8  03A0F025   OR FP, SP, ZERO
9D00EDFC  AFC40018   SW A0, 24(FP)
9D00EE00  41626000   DI V0
9D00EE04  000000C0   EHB
9D00EE08  00000000   NOP
9D00EE0C  0F403960   JAL CLK_Initialize
9D00EE10  00000000   NOP
9D00EE14  3C03BF8E   LUI V1, -16498
9D00EE18  8C620000   LW V0, 0(V1)
9D00EE1C  24040003   ADDIU A0, ZERO, 3
9D00EE20  7C822904   INS V0, A0, 4, 2
9D00EE24  AC620000   SW V0, 0(V1)
9D00EE28  3C03BF8E   LUI V1, -16498
9D00EE2C  8C620000   LW V0, 0(V1)
9D00EE30  24040003   ADDIU A0, ZERO, 3
9D00EE34  7C821004   INS V0, A0, 0, 3
9D00EE38  AC620000   SW V0, 0(V1)
9D00EE3C  3C03BF80   LUI V1, -16512
9D00EE40  8C620000   LW V0, 0(V1)
9D00EE44  24040003   ADDIU A0, ZERO, 3
9D00EE48  7C822904   INS V0, A0, 4, 2
9D00EE4C  AC620000   SW V0, 0(V1)
9D00EE50  0F402D58   JAL GPIO_Initialize
9D00EE54  00000000   NOP
9D00EE58  0F40329C   JAL ADCHS_Initialize
9D00EE5C  00000000   NOP
9D00EE60  0F403078   JAL UART1_Initialize
9D00EE64  00000000   NOP
9D00EE68  0F4043BB   JAL TMR2_Initialize
9D00EE6C  00000000   NOP
9D00EE70  0F403C11   JAL SPI3_Initialize
9D00EE74  00000000   NOP
9D00EE78  0F40449F   JAL OCMP1_Initialize
9D00EE7C  00000000   NOP
9D00EE80  0F403C42   JAL SPI2_Initialize
9D00EE84  00000000   NOP
9D00EE88  0F403BE0   JAL SPI1_Initialize
9D00EE8C  00000000   NOP
9D00EE90  0F40402D   JAL EVIC_Initialize
9D00EE94  00000000   NOP
9D00EE98  41626020   EI V0
9D00EE9C  00000000   NOP
9D00EEA0  03C0E825   OR SP, FP, ZERO
9D00EEA4  8FBF0014   LW RA, 20(SP)
9D00EEA8  8FBE0010   LW FP, 16(SP)
9D00EEAC  27BD0018   ADDIU SP, SP, 24
9D00EEB0  03E00008   JR RA
9D00EEB4  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/config/dsp_tu2/exceptions.c  
1:                   /*******************************************************************************
2:                     MPLAB Harmony Exceptions Source File
3:                   
4:                     File Name:
5:                       exceptions.c
6:                   
7:                     Summary:
8:                       This file contains a function which overrides the default _weak_ exception
9:                       handler provided by the XC32 compiler.
10:                  
11:                    Description:
12:                      This file redefines the default _weak_  exception handler with a more debug
13:                      friendly one. If an unexpected exception occurs the code will stop in a
14:                      while(1) loop.  The debugger can be halted and two variables _excep_code and
15:                      _except_addr can be examined to determine the cause and address where the
16:                      exception occurred.
17:                   *******************************************************************************/
18:                  
19:                  // DOM-IGNORE-BEGIN
20:                  /*******************************************************************************
21:                  * Copyright (C) 2018 Microchip Technology Inc. and its subsidiaries.
22:                  *
23:                  * Subject to your compliance with these terms, you may use Microchip software
24:                  * and any derivatives exclusively with Microchip products. It is your
25:                  * responsibility to comply with third party license terms applicable to your
26:                  * use of third party software (including open source software) that may
27:                  * accompany Microchip software.
28:                  *
29:                  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
30:                  * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
31:                  * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
32:                  * PARTICULAR PURPOSE.
33:                  *
34:                  * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
35:                  * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
36:                  * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
37:                  * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
38:                  * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
39:                  * ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
40:                  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
41:                  *******************************************************************************/
42:                  // DOM-IGNORE-END
43:                  
44:                  // *****************************************************************************
45:                  // *****************************************************************************
46:                  // Section: Included Files
47:                  // *****************************************************************************
48:                  // *****************************************************************************
49:                  #include "device.h"
50:                  #include "definitions.h"
51:                  #include <stdio.h>
52:                  
53:                  
54:                  // *****************************************************************************
55:                  // *****************************************************************************
56:                  // Section: Global Data Definitions
57:                  // *****************************************************************************
58:                  // *****************************************************************************
59:                  
60:                  /*******************************************************************************
61:                    Exception Reason Data
62:                  
63:                    <editor-fold defaultstate="expanded" desc="Exception Reason Data">
64:                  
65:                    Remarks:
66:                      These global static items are used instead of local variables in the
67:                      _general_exception_handler function because the stack may not be available
68:                      if an exception has occured.
69:                  */
70:                  
71:                  /* Address of instruction that caused the exception. */
72:                  static unsigned int _excep_addr;
73:                  
74:                  /* Enum identifying the cause */
75:                  typedef enum {
76:                      EXCEP_IRQ      =  0, // interrupt
77:                      EXCEP_AdEL     =  4, // address error exception (load or ifetch)
78:                      EXCEP_AdES     =  5, // address error exception (store)
79:                      EXCEP_IBE      =  6, // bus error (ifetch)
80:                      EXCEP_DBE      =  7, // bus error (load/store)
81:                      EXCEP_Sys      =  8, // syscall
82:                      EXCEP_Bp       =  9, // breakpoint
83:                      EXCEP_RI       = 10, // reserved instruction
84:                      EXCEP_CpU      = 11, // coprocessor unusable
85:                      EXCEP_Overflow = 12, // arithmetic overflow
86:                      EXCEP_Trap     = 13, // trap (possible divide by zero)
87:                      EXCEP_IS1      = 16, // implementation specfic 1
88:                      EXCEP_CEU      = 17, // CorExtend Unuseable
89:                      EXCEP_C2E      = 18, // coprocessor 2
90:                  } excep_code;
91:                  
92:                  /* Code identifying the cause of the exception (CP0 Cause register). */
93:                  static excep_code _excep_code;
94:                  
95:                  // </editor-fold>
96:                  
97:                  /*******************************************************************************
98:                    Function:
99:                      void _general_exception_handler ( void )
100:                 
101:                   Description:
102:                     A general exception is any non-interrupt exception which occurs during program
103:                     execution outside of bootstrap code.
104:                 
105:                   Remarks:
106:                     Refer to the XC32 User's Guide for additional information.
107:                  */
108:                 
109:                 void __attribute__((noreturn)) _general_exception_handler ( void )
110:                 {
111:                     /* Mask off the ExcCode Field from the Cause Register
112:                     Refer to the MIPs Software User's manual */
113:                     _excep_code = (_CP0_GET_CAUSE() & 0x0000007C) >> 2;
114:                     _excep_addr = _CP0_GET_EPC();
115:                 
116:                     while (1)
117:                     {
118:                         #if defined(__DEBUG) || defined(__DEBUG_D) && defined(__XC32)
119:                             __builtin_software_breakpoint();
120:                         #endif
121:                     }
122:                 }
123:                 
124:                 /*******************************************************************************
125:                   Function:
126:                     void _bootstrap_exception_handler ( void )
127:                 
128:                   Description:
129:                     A bootstrap exception is any exception which occurs while bootstrap code is
130:                     running (STATUS.BEV bit is 1).
131:                 
132:                   Remarks:
133:                     Refer to the XC32 User's Guide for additional information.
134:                  */
135:                 
136:                 void __attribute__((noreturn)) _bootstrap_exception_handler(void)
137:                 {
138:                     /* Mask off the ExcCode Field from the Cause Register
139:                     Refer to the MIPs Software User's manual */
140:                     _excep_code = (_CP0_GET_CAUSE() & 0x0000007C) >> 2;
141:                     _excep_addr = _CP0_GET_EPC();
142:                 
143:                     while (1)
144:                     {
145:                         #if defined(__DEBUG) || defined(__DEBUG_D) && defined(__XC32)
146:                             __builtin_software_breakpoint();
147:                         #endif
148:                     }
149:                 }
150:                 /*******************************************************************************
151:                   Function:
152:                     void _cache_err_exception_handler ( void )
153:                 
154:                   Description:
155:                     A cache-error exception occurs when an instruction or data reference detects
156:                     a cache tag or data error. This exception is not maskable. To avoid
157:                     disturbing the error in the cache array the exception vector is to an
158:                     unmapped, uncached address. This exception is precise.
159:                 
160:                   Remarks:
161:                     Refer to the XC32 User's Guide for additional information.
162:                  */
163:                 
164:                 void __attribute__((noreturn)) _cache_err_exception_handler(void)
165:                 {
166:                     /* Mask off the ExcCode Field from the Cause Register
167:                     Refer to the MIPs Software User's manual */
168:                     _excep_code = (_CP0_GET_CAUSE() & 0x0000007C) >> 2;
169:                     _excep_addr = _CP0_GET_EPC();
170:                 
171:                     while (1)
172:                     {
173:                         #if defined(__DEBUG) || defined(__DEBUG_D) && defined(__XC32)
174:                             __builtin_software_breakpoint();
175:                         #endif
176:                     }
177:                 }
178:                 
179:                 /*******************************************************************************
180:                   Function:
181:                     void _simple_tlb_refill_exception_handler ( void )
182:                 
183:                   Description:
184:                     During an instruction fetch or data access, a TLB refill exception occurs
185:                     when no TLB entry matches a reference to a mapped address space and the EXL
186:                     bit is 0 in the Status register. Note that this is distinct from the case
187:                     in which an entry matches, but has the valid bit off. In that case, a TLB
188:                     Invalid exception occurs.
189:                 
190:                   Remarks:
191:                     Refer to the XC32 User's Guide for additional information.
192:                  */
193:                 
194:                 void __attribute__((noreturn)) _simple_tlb_refill_exception_handler(void)
195:                 {
196:                     /* Mask off the ExcCode Field from the Cause Register
197:                     Refer to the MIPs Software User's manual */
198:                     _excep_code = (_CP0_GET_CAUSE() & 0x0000007C) >> 2;
199:                     _excep_addr = _CP0_GET_EPC();
200:                 
201:                     while (1)
202:                     {
203:                         #if defined(__DEBUG) || defined(__DEBUG_D) && defined(__XC32)
204:                             __builtin_software_breakpoint();
205:                         #endif
206:                     }
207:                 }
208:                 /*******************************************************************************
209:                  End of File
210:                 */
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D011834  27BDFFF8   ADDIU SP, SP, -8
9D011838  AFBF0004   SW RA, 4(SP)
9D01183C  AFBE0000   SW FP, 0(SP)
9D011840  03A0F025   OR FP, SP, ZERO
9D011844  40026800   MFC0 V0, Cause
9D011848  00021082   SRL V0, V0, 2
9D01184C  3042001F   ANDI V0, V0, 31
9D011850  AF828070   SW V0, -32656(GP)
9D011854  40027000   MFC0 V0, EPC
9D011858  AF82806C   SW V0, -32660(GP)
9D01185C  1000FFFF   BEQ ZERO, ZERO, 0x9D01185C
9D011860  00000000   NOP
9D011864  27BDFFF8   ADDIU SP, SP, -8
9D011868  AFBF0004   SW RA, 4(SP)
9D01186C  AFBE0000   SW FP, 0(SP)
9D011870  03A0F025   OR FP, SP, ZERO
9D011874  40026800   MFC0 V0, Cause
9D011878  00021082   SRL V0, V0, 2
9D01187C  3042001F   ANDI V0, V0, 31
9D011880  AF828070   SW V0, -32656(GP)
9D011884  40027000   MFC0 V0, EPC
9D011888  AF82806C   SW V0, -32660(GP)
9D01188C  1000FFFF   BEQ ZERO, ZERO, 0x9D01188C
9D011890  00000000   NOP
9D011894  27BDFFF8   ADDIU SP, SP, -8
9D011898  AFBF0004   SW RA, 4(SP)
9D01189C  AFBE0000   SW FP, 0(SP)
9D0118A0  03A0F025   OR FP, SP, ZERO
9D0118A4  40026800   MFC0 V0, Cause
9D0118A8  00021082   SRL V0, V0, 2
9D0118AC  3042001F   ANDI V0, V0, 31
9D0118B0  AF828070   SW V0, -32656(GP)
9D0118B4  40027000   MFC0 V0, EPC
9D0118B8  AF82806C   SW V0, -32660(GP)
9D0118BC  1000FFFF   BEQ ZERO, ZERO, 0x9D0118BC
9D0118C0  00000000   NOP
9D0118C4  27BDFFF8   ADDIU SP, SP, -8
9D0118C8  AFBF0004   SW RA, 4(SP)
9D0118CC  AFBE0000   SW FP, 0(SP)
9D0118D0  03A0F025   OR FP, SP, ZERO
9D0118D4  40026800   MFC0 V0, Cause
9D0118D8  00021082   SRL V0, V0, 2
9D0118DC  3042001F   ANDI V0, V0, 31
9D0118E0  AF828070   SW V0, -32656(GP)
9D0118E4  40027000   MFC0 V0, EPC
9D0118E8  AF82806C   SW V0, -32660(GP)
9D0118EC  1000FFFF   BEQ ZERO, ZERO, 0x9D0118EC
9D0118F0  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/commandinterpreter.c  -------
1:                   // CommandInterpreter.c
2:                   
3:                   // CommandInterpreter.c
4:                   #include <stdint.h>
5:                   #include <stdio.h>
6:                   #include "definitions.h"                // SYS function prototypes
7:                   #include <string.h>
8:                   #include "main.h"
9:                   #include "UserConfig.h"             // PrintString for error messages
10:                  #include "biquad.h"                 // Modify filters
11:                  #include "agc.h"                    // Access to AGC filter
12:                  #include "filters.h"                // Set up demod filters based on UserConfig
13:                  
14:                  
15:                  //#define NumCommandBufs NumTcpSockets+3 // Separate command buffers for TCP connections (NumTcpSockets), RS232, ConfigFlash, and HTTPPOST
16:                  #define NumCommandBufs 1 // Separate command buffers for different possible sources
17:                  #define CommandBufSize 150 
18:                  #define MaxArgs 10 
19:                  
20:                  
21:                  
22:                  
23:                  // Function Prototypes
24:                  void CommandInterpreter(uint8_t stream, char data); // Call with a character as argument. The character is added
25:                  
26:                  																
27:                  // Globals
28:                  uint8_t MaxCommandSize=0;  // used in debug. Figure out how large buffers need to be
29:                  char HelpString[];
30:                  
31:                  uint32_t HashGenerate(char *pString){
32:                  // generate a 32 bit hash of the string. 
33:                  uint8_t HashShiftSize;
34:                  uint32_t Hash;
35:                    HashShiftSize=32/strlen(pString); // vary shift size so hash always uses all 32 bits
36:                    Hash=0;          // start with null hash
37:                    while(*pString){		          // stop on null terminator
38:                  	  Hash<<=HashShiftSize;	      // shift over HashShiftSize bits on each character
39:                      Hash+=(uint32_t)*pString++;   // add in next character and bump the pointer
40:                    }                       // done hashing the command
41:                    return(Hash);
42:                  }
43:                  
44:                  
45:                  static char CommandBuf[NumCommandBufs][CommandBufSize]; // create a linear buffer for each stream
46:                  
47:                  void CommandInterpreter(uint8_t stream, char data){
48:                  // Pass in a character from the specified stream. It is added to the buffer unless it's a cr. If so, the command is executed. Any output is sent to stream.
49:                  static uint8_t NextCharIndex[NumCommandBufs];     // where the next character goes
50:                  uint32_t Hash=0;
51:                  char *TokenArray[MaxArgs];
52:                  char tokens[4] = "\t\r|"; // tokens for strtok (tab, return) - Don't break on space. Allow it to be in a string arg. Pipe (|) added 6/21/13. hh
53:                  char *NextToken;	// Pointer to next token in command buffer
54:                  int ArgNum=0;                 // Argument number currently storing
55:                    StringBuf[0]=0;         // Will return stuff in StringBuf
56:                    switch(data){
57:                      default:                   // it was not backspace, escape, or cr
58:                        if((data>0)&&(data<128)){  // valid ascii
59:                          if(NextCharIndex[stream]<CommandBufSize+2){   // we have room for character
60:                            CommandBuf[stream][NextCharIndex[stream]++]=data;  // add to buffer
61:                          }
62:                        }
63:                        break;
64:                      case 0x0a:              // newline
65:                        break;                // do nothing, throwing it out
66:                      case 0x08:              // back space
67:                        if(NextCharIndex[stream]){
68:                           NextCharIndex[stream]--;            // back up on a back space if we're not already at the beginning
69:                        }
70:                        break;
71:                      case 0x1b:              // escape
72:                        NextCharIndex[stream]=0;              // go back to start
73:                        break;
74:                      case '\r':              // it's a carriage return. Hash the command and accumulate the arguments and execute it
75:                        CommandBuf[stream][NextCharIndex[stream]]=0;   // terminate the string we've built
76:                        if(strlen(CommandBuf[stream])==0){
77:                          strcpy(StringBuf,"\r\n>");
78:                          return;                           // rempromt and get out on null string
79:                        }  
80:                        if(NextCharIndex[stream]>MaxCommandSize) MaxCommandSize=NextCharIndex[stream]; // remember max command size
81:                        NextCharIndex[stream]=0;      // next time, start building string at start of buffer
82:                        if(CommandBuf[stream][0]=='#') return;			// get out before doing anything. This is a comment.
83:                        NextToken=strtok(CommandBuf[stream],tokens);		// Pointer to start of CommandBuf with delimiter replaced with null
84:                        while(NULL!=NextToken){             // Scan through string getting pointers to each field
85:                          TokenArray[ArgNum++]=NextToken;   // Store pointers to argument and bump index. ArgNum ends up with argument count including command
86:                          if(ArgNum>=MaxArgs) return;       // Get out on excess arguments instead of crashing
87:                          NextToken=strtok(NULL,tokens);    // Point to next argument in string
88:                        }
89:                        Hash=HashGenerate(TokenArray[0]);  // Generate a hash of the command
90:                        switch(Hash){  // Hash also available as a float64 in arg[0], but we'll use this UINT32 value for the switch
91:                          default:
92:                            sprintf(StringBuf,"Bad command. Hash=0x%x.\r\n>",Hash);
93:                            break;
94:                          case 0x3f:               // ? (help)
95:                            PrintString(HelpString);
96:                            strcpy(StringBuf,"\r\n>");
97:                            break;
98:                          case 0xb6d27f3:            // NarrowShiftCenterFreq
99:                            if(2==ArgNum){            // There is a parameter
100:                             UserConfig.NarrowShiftCenterFreq = atof(TokenArray[1]);
101:                             UpdateDemodFilters();   // Update all filters and DDS M/S frequencies
102:                             strcpy(StringBuf,"\r\n>");
103:                           }else{
104:                             sprintf(StringBuf,"\r\n%f\r\n>",UserConfig.NarrowShiftCenterFreq);
105:                           }
106:                           break;
107:                         case 0x6fbc1b5a:            // NarrowShiftHz
108:                           if(2==ArgNum){            // There is a parameter
109:                             UserConfig.NarrowShiftHz = atof(TokenArray[1]);
110:                             UpdateDemodFilters();   // Update all filters and DDS M/S frequencies
111:                             strcpy(StringBuf,"\r\n>");
112:                           }else{
113:                             sprintf(StringBuf,"\r\n%f\r\n>",UserConfig.NarrowShiftHz);
114:                           }
115:                           break;
116:                         case 0x2f327f3:            // WideShiftCenterFreq
117:                           if(2==ArgNum){            // There is a parameter
118:                             UserConfig.WideShiftCenterFreq = atof(TokenArray[1]);
119:                             UpdateDemodFilters();   // Update all filters and DDS M/S frequencies
120:                             strcpy(StringBuf,"\r\n>");
121:                           }else{
122:                             sprintf(StringBuf,"\r\n%f\r\n>",UserConfig.WideShiftCenterFreq);
123:                           }
124:                           break;   
125:                         case 0x7989b5a:            // WideShiftHz
126:                           if(2==ArgNum){            // There is a parameter
127:                             UserConfig.WideShiftHz = atof(TokenArray[1]);
128:                             UpdateDemodFilters();   // Update all filters and DDS M/S frequencies
129:                             strcpy(StringBuf,"\r\n>");
130:                           }else{
131:                             sprintf(StringBuf,"\r\n%f\r\n>",UserConfig.WideShiftHz);
132:                           }
133:                           break;   
134:                         case 0x88b988a5:            // BaudRate
135:                           if(2==ArgNum){            // There is a parameter
136:                             UserConfig.BaudRate = atof(TokenArray[1]);
137:                             UpdateDemodFilters();   // Update all filters and DDS M/S frequencies
138:                             strcpy(StringBuf,"\r\n>");
139:                           }else{
140:                             sprintf(StringBuf,"\r\n%f\r\n>",UserConfig.BaudRate);
141:                           }
142:                           break;   
143:                         case 0x17d4fa8:            // ToneFilterBwBrMult
144:                           if(2==ArgNum){            // There is a parameter
145:                             UserConfig.ToneFilterBwBrMult = atof(TokenArray[1]);
146:                             UpdateDemodFilters();   // Update all filters and DDS M/S frequencies
147:                             strcpy(StringBuf,"\r\n>");
148:                           }else{
149:                             sprintf(StringBuf,"\r\n%f\r\n>",UserConfig.ToneFilterBwBrMult);
150:                           }
151:                           break;             
152:                         case 0xb9e21d04:            // MarkHoldThresh
153:                           if(2==ArgNum){            // There is a parameter
154:                             UserConfig.MarkHoldThresh = atof(TokenArray[1]);
155:                             strcpy(StringBuf,"\r\n>");
156:                           }else{
157:                             sprintf(StringBuf,"\r\n%f\r\n>",UserConfig.MarkHoldThresh);
158:                           }
159:                           break;  
160:                         case 0x7d469d04:            // AutostartThresh
161:                           if(2==ArgNum){            // There is a parameter
162:                             UserConfig.AutostartThresh = atof(TokenArray[1]);
163:                             strcpy(StringBuf,"\r\n>");
164:                           }else{
165:                             sprintf(StringBuf,"\r\n%f\r\n>",UserConfig.AutostartThresh);
166:                           }
167:                           break;  
168:                         case 0x5a35f9fb:            // AutostartShutdownSeconds
169:                           if(2==ArgNum){            // There is a parameter
170:                             UserConfig.AutostartShutdownSeconds = atoi(TokenArray[1]);
171:                             strcpy(StringBuf,"\r\n>");
172:                           }else{
173:                             sprintf(StringBuf,"\r\n%d\r\n>",UserConfig.AutostartShutdownSeconds);
174:                           }
175:                           break;  
176:                         case 0xbe5a4ba3:            // KosDropSeconds
177:                           if(2==ArgNum){            // There is a parameter
178:                             UserConfig.KosDropSeconds = atoi(TokenArray[1]);
179:                             strcpy(StringBuf,"\r\n>");
180:                           }else{
181:                             sprintf(StringBuf,"\r\n%d\r\n>",UserConfig.KosDropSeconds);
182:                           }
183:                           break;  
184:                         case 0x8b184ea0:            // AgcTargetLevel
185:                           if(2==ArgNum){            // There is a parameter
186:                             UserConfig.AgcTargetLevel = atof(TokenArray[1]);
187:                             strcpy(StringBuf,"\r\n>");
188:                           }else{
189:                             sprintf(StringBuf,"\r\n%f\r\n>",UserConfig.AgcTargetLevel);
190:                           }
191:                           break;  
192:                         case 0x47d836a6:              // AgcLpfF
193:                           if(2==ArgNum){              // There is a parameter
194:                             UserConfig.AgcLpfF=atof(TokenArray[1]);
195:                             BiQuad_modify(AgcLpf, LPF, 0.0, UserConfig.AgcLpfF, 8000.0, 0.707 ); 
196:                             strcpy(StringBuf,"\r\n>");
197:                           }else{
198:                             sprintf(StringBuf,"\r\n%f\r\n>",UserConfig.AgcLpfF);
199:                           }
200:                           break;
201:                         case 0x79c7846:                // UseInputBpf
202:                           if(2==ArgNum){                // There is a parameter
203:                             UserConfig.UseInputBpf=1 & atoi(TokenArray[1]);
204:                             strcpy(StringBuf,"\r\n>");
205:                           }else{
206:                             if(1==UserConfig.UseInputBpf){
207:                               strcpy(StringBuf,"\r\n1\r\n>");
208:                             }else{
209:                               strcpy(StringBuf,"\r\n0\r\n>");
210:                             }
211:                           }
212:                           break;
213:                         case 0x290c429a:                // UseLimiter
214:                           if(2==ArgNum){                // There is a parameter
215:                             UserConfig.UseLimiter=1 & atoi(TokenArray[1]);
216:                             strcpy(StringBuf,"\r\n>");
217:                           }else{
218:                             if(1==UserConfig.UseLimiter){
219:                               strcpy(StringBuf,"\r\n1\r\n>");
220:                             }else{
221:                               strcpy(StringBuf,"\r\n0\r\n>");
222:                             }
223:                           }
224:                           break;
225:                         case 0xb1639143:                // UseAgc
226:                           if(2==ArgNum){                // There is a parameter
227:                             UserConfig.UseAgc=1 & atoi(TokenArray[1]);
228:                             strcpy(StringBuf,"\r\n>");
229:                           }else{
230:                             if(1==UserConfig.UseAgc){
231:                               strcpy(StringBuf,"\r\n1\r\n>");
232:                             }else{
233:                               strcpy(StringBuf,"\r\n0\r\n>");
234:                             }
235:                           }
236:                           break;
237:                         case 0x7ccca9f6:              // AgcMaxGain
238:                           if(2==ArgNum){              // There is a parameter
239:                             UserConfig.AgcMaxGain=atof(TokenArray[1]);
240:                             strcpy(StringBuf,"\r\n>");
241:                           }else{
242:                             sprintf(StringBuf,"\r\n%f\r\n>",UserConfig.AgcMaxGain);
243:                           }
244:                           break; 
245:                         case 0x6ec259ad:            // modem
246:                           PrintString("\r\nSwitching terminal to modem. Use ESC to return to command interpreter.\r\n");
247:                           UartDest=modem;
248:                           break;
249:                         case 0xb2df91:              // LoadDefaultConfig
250:                           LoadDefaultConfig();
251:                           PrintString("Default configuration loaded\r\n>");
252:                           break;
253:                         case 0x564b1eeb:            // PrintSavedConfig
254:                           PrintSavedConfig();
255:                           break;
256:                         case 0x7555eeb:             //PrintConfig
257:                           SavePrintConfig(1);       // Send to console
258:                           strcpy(StringBuf,"\r\n\nCurrent configuration printed\r\n>");
259:                           break;
260:                         case 0x97d692f:             // SaveConfig  
261:                           SavePrintConfig(0);       // Send to external flash
262:                           strcpy(StringBuf,"\r\n\nCurrent configuration saved\r\n>");
263:                           break;
264:                         case 0xfd4b1eeb:           // LoadSavedConfig
265:                           LoadSavedConfig();
266:                           break;
267:                         case 0xa317ca50:           //NoLoop - 
268:                           if(2==ArgNum){              // There is a parameter
269:                             UserConfig.NoLoop=atoi(TokenArray[1]);
270:                             strcpy(StringBuf,"\r\n>");
271:                           }else{
272:                             sprintf(StringBuf,"\r\n%d\r\n>",UserConfig.NoLoop);
273:                           }
274:                           break; 
275:                       }
276:                     }
277:                   }
278:                 
279:                 /*
280:                          1         2         3         4         5         6         7         8
281:                 12345678901234567890123456789012345678901234567890123456789012345678901234567890
282:                 */
283:                   
284:                  
285:                 char HelpString[]= "DSP TU Command Line Interface\r\n\n\
286:                 Each command consists of a command string, and zero or more parameters.\r\n\
287:                 Parameters are tab delimited, and the command is terminated with a carriage\r\n\
288:                 return. Commands take effect immediately. They can be saved to be reloaded on\
289:                 the next power cycle. If no parameter is given, the current value of the\r\n\
290:                 parameter is returned. If a command is not recognized, an error message is shown\r\n\
291:                 along with a hash of the command. Commands ARE case sensitive! In the list\r\n\
292:                 below, the default value of each parameter is shown along with a description of\r\n\
293:                 the command.\r\n\n\
294:                 AgcLpfF                   1.0      Set the frequency of the AGC control loop low\r\n\
295:                                                    pass filter. A lower number makes the AGC\r\n\
296:                                                    respond more slowly\r\n\
297:                 AgcMaxGain                100.0    The maximum gain the AGC will achieve with no\r\n\
298:                                                    input signal\r\n\
299:                 AgcTargetLevel            0.5      The AGC adjusts its gain to yield this output\r\n\
300:                                                    level to the remainder of the demodulator\r\n\
301:                 AutostartShutdownSeconds  30       Integer number of seconds after loss of mark\r\n\
302:                                                    tone when motor is shut down\r\n\
303:                 AutostartThresh           0.3      Discriminator threshold (mark level minus\r\n\
304:                                                    space level) that will start motor. Too low a\r\n\
305:                                                    level can give false starts on noise. Too\r\n\
306:                                                    high a level can keep the motor from starting\r\n\
307:                                                    on a weak signal.\r\n\
308:                 BaudRate                  45.45    The transmit baud rate in bits per second.\r\n\
309:                                                    Used to set the speed of the Baudot UART and\r\n\
310:                                                    tone filter bandwidths.\r\n\
311:                 KosDropSeconds            5        How many seconds after the last typed\r\n\
312:                                                    character until the transceiver is switched\r\n\
313:                                                    from transmit to receive.\r\n\
314:                 LoadDefaultConfig                  No parameters. Loads default configuration.\r\n\
315:                 LoadSavedConfig                    No parameters. Loads the configuration saved\r\n\
316:                                                    to external flash.\r\n\
317:                 MarkHoldThresh            0.2      Sustained discriminator levels below this\r\n\
318:                                                    threshold put the demodulator in mark to\r\n\
319:                                                    avoid printing on noise.\r\n\
320:                 modem                              No parameters. Switches USB terminal to the\r\n\
321:                                                    Baudot UART to transmit and receive data. ESC\r\n\
322:                                                    returns to the command interpreter.\r\n\
323:                 NarrowShiftCenterFreq     2210.0   Mean of Mark and Space frequencies for tone\r\n\
324:                                                    filters and tone generator.\r\n\
325:                 NarrowShiftHz             170.0    Difference between Mark and Space\r\n\
326:                                                    frequencies. System sets Mark frequency to\r\n\
327:                                                    Center-(Shift/2) and Space to\r\n\
328:                                                    Center+(Shift/2) unless MarkHi is enabled,\r\n\
329:                                                    reversing these tones.\r\n\
330:                 NoLoop                    0        Allows operation without a loop supply,\r\n\
331:                                                    instead using the software uart and USB.\r\n\
332:                                                    If NoLoop = 1, KOS and AFSK generation will\r\n\
333:                                                    ignore the lack of loop current.\r\n\
334:                 PrintConfig                        No parameters. Prints the current system\r\n\
335:                                                    configuration.\r\n\
336:                 PrintSavedConfig                   No parameters. Prints saved configuration.\r\n\
337:                 SaveConfig                         No parameters. Saves the current\r\n\
338:                                                    configuration to external flash to be loaded\r\n\
339:                                                    on next power up.\r\n\
340:                 ToneFilterBwBrMult        2.0      The BaudRate is multiplied by this value to\r\n\
341:                                                    yield the bandwidth of the tone filters. This\r\n\
342:                                                    is set to the lowest value possible that\r\n\
343:                                                    results in full discriminator swing in 1/2\r\n\
344:                                                    bit time\r\n\
345:                 UseAgc                    1        1 enables the AGC, while 0 disables it. Users\r\n\
346:                                                    may choose to use the limiter instead of the\r\n\
347:                                                    AGC\r\n\
348:                 UseInputBpf               0        1 enables the input bandpass filter; 0\r\n\
349:                                                    disables it. The input BPF may be useful on\r\n\
350:                                                    narrow shift especially if the limiter is\r\n\
351:                                                    used (instead of the AGC) to prevent other\r\n\
352:                                                    signals from taking over the limiter.\r\n\
353:                 UseLimiter                0        1 enables the limiter; 0 disables it. Users\r\n\
354:                                                    may choose to use the limiter (FM\r\n\
355:                                                    demodulation) or the AGC (AM demodulation).\r\n\
356:                 WideShiftCenterFreq       2000.0   As described for NarrowShiftCenterFreq, this\r\n\
357:                                                    sets the Mark/Space center frequency when\r\n\
358:                                                    wide shift is selected.\r\n\
359:                 WideShiftHz               850.0    As described for NarrowShiftHz, this sets the\r\n\
360:                                                    difference between the Mark and Space\r\n\
361:                                                    frequencies.\r\n\
362:                 ";
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D001D88  27BDFF98   ADDIU SP, SP, -104
9D001D8C  AFBF0064   SW RA, 100(SP)
9D001D90  AFBE0060   SW FP, 96(SP)
9D001D94  03A0F025   OR FP, SP, ZERO
9D001D98  00801025   OR V0, A0, ZERO
9D001D9C  00A01825   OR V1, A1, ZERO
9D001DA0  A3C20068   SB V0, 104(FP)
9D001DA4  00601025   OR V0, V1, ZERO
9D001DA8  A3C2006C   SB V0, 108(FP)
9D001DAC  AFC00030   SW ZERO, 48(FP)
9D001DB0  3C02007C   LUI V0, 124
9D001DB4  34420D09   ORI V0, V0, 3337
9D001DB8  AFC2005C   SW V0, 92(FP)
9D001DBC  AFC0002C   SW ZERO, 44(FP)
9D001DC0  3C028000   LUI V0, -32768
9D001DC4  A04001CC   SB ZERO, 460(V0)
9D001DC8  83C2006C   LB V0, 108(FP)
9D001DCC  2403000A   ADDIU V1, ZERO, 10
9D001DD0  10430443   BEQ V0, V1, 0x9D002EE0
9D001DD4  00000000   NOP
9D001DD8  2843000B   SLTI V1, V0, 11
9D001DDC  10600006   BEQ V1, ZERO, 0x9D001DF8
9D001DE0  00000000   NOP
9D001DE4  24030008   ADDIU V1, ZERO, 8
9D001DE8  1043002D   BEQ V0, V1, 0x9D001EA0
9D001DEC  00000000   NOP
9D001DF0  10000007   BEQ ZERO, ZERO, 0x9D001E10
9D001DF4  00000000   NOP
9D001DF8  2403000D   ADDIU V1, ZERO, 13
9D001DFC  1043003F   BEQ V0, V1, 0x9D001EFC
9D001E00  00000000   NOP
9D001E04  2403001B   ADDIU V1, ZERO, 27
9D001E08  10430036   BEQ V0, V1, 0x9D001EE4
9D001E0C  00000000   NOP
9D001E10  83C2006C   LB V0, 108(FP)
9D001E14  18400435   BLEZ V0, 0x9D002EEC
9D001E18  00000000   NOP
9D001E1C  93C30068   LBU V1, 104(FP)
9D001E20  27828100   ADDIU V0, GP, -32512
9D001E24  00621021   ADDU V0, V1, V0
9D001E28  90420000   LBU V0, 0(V0)
9D001E2C  2C420098   SLTIU V0, V0, 152
9D001E30  1040042E   BEQ V0, ZERO, 0x9D002EEC
9D001E34  00000000   NOP
9D001E38  93C30068   LBU V1, 104(FP)
9D001E3C  93C20068   LBU V0, 104(FP)
9D001E40  27848100   ADDIU A0, GP, -32512
9D001E44  00442021   ADDU A0, V0, A0
9D001E48  90840000   LBU A0, 0(A0)
9D001E4C  24850001   ADDIU A1, A0, 1
9D001E50  30A500FF   ANDI A1, A1, 255
9D001E54  27868100   ADDIU A2, GP, -32512
9D001E58  00461021   ADDU V0, V0, A2
9D001E5C  A0450000   SB A1, 0(V0)
9D001E60  00802825   OR A1, A0, ZERO
9D001E64  3C048000   LUI A0, -32768
9D001E68  00601025   OR V0, V1, ZERO
9D001E6C  00021080   SLL V0, V0, 2
9D001E70  00431021   ADDU V0, V0, V1
9D001E74  00021900   SLL V1, V0, 4
9D001E78  00621823   SUBU V1, V1, V0
9D001E7C  00031040   SLL V0, V1, 1
9D001E80  00401825   OR V1, V0, ZERO
9D001E84  24823440   ADDIU V0, A0, 13376
9D001E88  00621021   ADDU V0, V1, V0
9D001E8C  00451021   ADDU V0, V0, A1
9D001E90  93C3006C   LBU V1, 108(FP)
9D001E94  A0430000   SB V1, 0(V0)
9D001E98  10000414   BEQ ZERO, ZERO, 0x9D002EEC
9D001E9C  00000000   NOP
9D001EA0  93C30068   LBU V1, 104(FP)
9D001EA4  27828100   ADDIU V0, GP, -32512
9D001EA8  00621021   ADDU V0, V1, V0
9D001EAC  90420000   LBU V0, 0(V0)
9D001EB0  10400411   BEQ V0, ZERO, 0x9D002EF8
9D001EB4  00000000   NOP
9D001EB8  93C20068   LBU V0, 104(FP)
9D001EBC  27838100   ADDIU V1, GP, -32512
9D001EC0  00431821   ADDU V1, V0, V1
9D001EC4  90630000   LBU V1, 0(V1)
9D001EC8  2463FFFF   ADDIU V1, V1, -1
9D001ECC  306300FF   ANDI V1, V1, 255
9D001ED0  27848100   ADDIU A0, GP, -32512
9D001ED4  00441021   ADDU V0, V0, A0
9D001ED8  A0430000   SB V1, 0(V0)
9D001EDC  10000406   BEQ ZERO, ZERO, 0x9D002EF8
9D001EE0  00000000   NOP
9D001EE4  93C30068   LBU V1, 104(FP)
9D001EE8  27828100   ADDIU V0, GP, -32512
9D001EEC  00621021   ADDU V0, V1, V0
9D001EF0  A0400000   SB ZERO, 0(V0)
9D001EF4  10000407   BEQ ZERO, ZERO, 0x9D002F14
9D001EF8  00000000   NOP
9D001EFC  93C30068   LBU V1, 104(FP)
9D001F00  93C40068   LBU A0, 104(FP)
9D001F04  27828100   ADDIU V0, GP, -32512
9D001F08  00821021   ADDU V0, A0, V0
9D001F0C  90420000   LBU V0, 0(V0)
9D001F10  00402825   OR A1, V0, ZERO
9D001F14  3C048000   LUI A0, -32768
9D001F18  00601025   OR V0, V1, ZERO
9D001F1C  00021080   SLL V0, V0, 2
9D001F20  00431021   ADDU V0, V0, V1
9D001F24  00021900   SLL V1, V0, 4
9D001F28  00621823   SUBU V1, V1, V0
9D001F2C  00031040   SLL V0, V1, 1
9D001F30  00401825   OR V1, V0, ZERO
9D001F34  24823440   ADDIU V0, A0, 13376
9D001F38  00621021   ADDU V0, V1, V0
9D001F3C  00451021   ADDU V0, V0, A1
9D001F40  A0400000   SB ZERO, 0(V0)
9D001F44  93C30068   LBU V1, 104(FP)
9D001F48  00601025   OR V0, V1, ZERO
9D001F4C  00021080   SLL V0, V0, 2
9D001F50  00431021   ADDU V0, V0, V1
9D001F54  00021900   SLL V1, V0, 4
9D001F58  00621823   SUBU V1, V1, V0
9D001F5C  00031040   SLL V0, V1, 1
9D001F60  00401825   OR V1, V0, ZERO
9D001F64  3C028000   LUI V0, -32768
9D001F68  24423440   ADDIU V0, V0, 13376
9D001F6C  00621021   ADDU V0, V1, V0
9D001F70  80420000   LB V0, 0(V0)
9D001F74  14400009   BNE V0, ZERO, 0x9D001F9C
9D001F78  00000000   NOP
9D001F7C  3C028000   LUI V0, -32768
9D001F80  3C039D01   LUI V1, -25343
9D001F84  8C63D8B8   LW V1, -10056(V1)
9D001F88  244401CC   ADDIU A0, V0, 460
9D001F8C  A8830003   SWL V1, 3(A0)
9D001F90  B84301CC   SWR V1, 460(V0)
9D001F94  100003DF   BEQ ZERO, ZERO, 0x9D002F14
9D001F98  00000000   NOP
9D001F9C  93C30068   LBU V1, 104(FP)
9D001FA0  27828100   ADDIU V0, GP, -32512
9D001FA4  00621021   ADDU V0, V1, V0
9D001FA8  90430000   LBU V1, 0(V0)
9D001FAC  938280FC   LBU V0, -32516(GP)
9D001FB0  0043102B   SLTU V0, V0, V1
9D001FB4  10400006   BEQ V0, ZERO, 0x9D001FD0
9D001FB8  00000000   NOP
9D001FBC  93C30068   LBU V1, 104(FP)
9D001FC0  27828100   ADDIU V0, GP, -32512
9D001FC4  00621021   ADDU V0, V1, V0
9D001FC8  90420000   LBU V0, 0(V0)
9D001FCC  A38280FC   SB V0, -32516(GP)
9D001FD0  93C30068   LBU V1, 104(FP)
9D001FD4  27828100   ADDIU V0, GP, -32512
9D001FD8  00621021   ADDU V0, V1, V0
9D001FDC  A0400000   SB ZERO, 0(V0)
9D001FE0  93C30068   LBU V1, 104(FP)
9D001FE4  3C048000   LUI A0, -32768
9D001FE8  00601025   OR V0, V1, ZERO
9D001FEC  00021080   SLL V0, V0, 2
9D001FF0  00431021   ADDU V0, V0, V1
9D001FF4  00021900   SLL V1, V0, 4
9D001FF8  00621823   SUBU V1, V1, V0
9D001FFC  00031040   SLL V0, V1, 1
9D002000  00401825   OR V1, V0, ZERO
9D002004  24823440   ADDIU V0, A0, 13376
9D002008  00621021   ADDU V0, V1, V0
9D00200C  80430000   LB V1, 0(V0)
9D002010  24020023   ADDIU V0, ZERO, 35
9D002014  106203BB   BEQ V1, V0, 0x9D002F04
9D002018  00000000   NOP
9D00201C  93C30068   LBU V1, 104(FP)
9D002020  00601025   OR V0, V1, ZERO
9D002024  00021080   SLL V0, V0, 2
9D002028  00431021   ADDU V0, V0, V1
9D00202C  00021900   SLL V1, V0, 4
9D002030  00621823   SUBU V1, V1, V0
9D002034  00031040   SLL V0, V1, 1
9D002038  00401825   OR V1, V0, ZERO
9D00203C  3C028000   LUI V0, -32768
9D002040  24423440   ADDIU V0, V0, 13376
9D002044  00621021   ADDU V0, V1, V0
9D002048  27C3005C   ADDIU V1, FP, 92
9D00204C  00602825   OR A1, V1, ZERO
9D002050  00402025   OR A0, V0, ZERO
9D002054  0F403EB7   JAL strtok
9D002058  00000000   NOP
9D00205C  AFC20028   SW V0, 40(FP)
9D002060  10000013   BEQ ZERO, ZERO, 0x9D0020B0
9D002064  00000000   NOP
9D002068  8FC2002C   LW V0, 44(FP)
9D00206C  24430001   ADDIU V1, V0, 1
9D002070  AFC3002C   SW V1, 44(FP)
9D002074  00021080   SLL V0, V0, 2
9D002078  27C30028   ADDIU V1, FP, 40
9D00207C  00621021   ADDU V0, V1, V0
9D002080  8FC30028   LW V1, 40(FP)
9D002084  AC43000C   SW V1, 12(V0)
9D002088  8FC2002C   LW V0, 44(FP)
9D00208C  2842000A   SLTI V0, V0, 10
9D002090  1040039F   BEQ V0, ZERO, 0x9D002F10
9D002094  00000000   NOP
9D002098  27C2005C   ADDIU V0, FP, 92
9D00209C  00402825   OR A1, V0, ZERO
9D0020A0  00002025   OR A0, ZERO, ZERO
9D0020A4  0F403EB7   JAL strtok
9D0020A8  00000000   NOP
9D0020AC  AFC20028   SW V0, 40(FP)
9D0020B0  8FC20028   LW V0, 40(FP)
9D0020B4  1440FFEC   BNE V0, ZERO, 0x9D002068
9D0020B8  00000000   NOP
9D0020BC  8FC20034   LW V0, 52(FP)
9D0020C0  00402025   OR A0, V0, ZERO
9D0020C4  0F403E8E   JAL HashGenerate
9D0020C8  00000000   NOP
9D0020CC  AFC20030   SW V0, 48(FP)
9D0020D0  8FC30030   LW V1, 48(FP)
9D0020D4  3C02564B   LUI V0, 22091
9D0020D8  34421EEB   ORI V0, V0, 7915
9D0020DC  10620339   BEQ V1, V0, 0x9D002DC4
9D0020E0  00000000   NOP
9D0020E4  8FC30030   LW V1, 48(FP)
9D0020E8  3C02564B   LUI V0, 22091
9D0020EC  34421EEC   ORI V0, V0, 7916
9D0020F0  0062102B   SLTU V0, V1, V0
9D0020F4  10400051   BEQ V0, ZERO, 0x9D00223C
9D0020F8  00000000   NOP
9D0020FC  8FC30030   LW V1, 48(FP)
9D002100  3C020798   LUI V0, 1944
9D002104  34429B5A   ORI V0, V0, -25766
9D002108  10620119   BEQ V1, V0, 0x9D002570
9D00210C  00000000   NOP
9D002110  8FC30030   LW V1, 48(FP)
9D002114  3C020798   LUI V0, 1944
9D002118  34429B5B   ORI V0, V0, -25765
9D00211C  0062102B   SLTU V0, V1, V0
9D002120  10400023   BEQ V0, ZERO, 0x9D0021B0
9D002124  00000000   NOP
9D002128  8FC30030   LW V1, 48(FP)
9D00212C  3C02017D   LUI V0, 381
9D002130  34424FA8   ORI V0, V0, 20392
9D002134  10620152   BEQ V1, V0, 0x9D002680
9D002138  00000000   NOP
9D00213C  8FC30030   LW V1, 48(FP)
9D002140  3C02017D   LUI V0, 381
9D002144  34424FA9   ORI V0, V0, 20393
9D002148  0062102B   SLTU V0, V1, V0
9D00214C  1040000C   BEQ V0, ZERO, 0x9D002180
9D002150  00000000   NOP
9D002154  8FC30030   LW V1, 48(FP)
9D002158  2402003F   ADDIU V0, ZERO, 63
9D00215C  10620094   BEQ V1, V0, 0x9D0023B0
9D002160  00000000   NOP
9D002164  8FC30030   LW V1, 48(FP)
9D002168  3C0200B2   LUI V0, 178
9D00216C  3442DF91   ORI V0, V0, -8303
9D002170  1062030C   BEQ V1, V0, 0x9D002DA4
9D002174  00000000   NOP
9D002178  10000084   BEQ ZERO, ZERO, 0x9D00238C
9D00217C  00000000   NOP
9D002180  8FC30030   LW V1, 48(FP)
9D002184  3C0202F3   LUI V0, 755
9D002188  344227F3   ORI V0, V0, 10227
9D00218C  106200D6   BEQ V1, V0, 0x9D0024E8
9D002190  00000000   NOP
9D002194  8FC30030   LW V1, 48(FP)
9D002198  3C020755   LUI V0, 1877
9D00219C  34425EEB   ORI V0, V0, 24299
9D0021A0  1062030C   BEQ V1, V0, 0x9D002DD4
9D0021A4  00000000   NOP
9D0021A8  10000078   BEQ ZERO, ZERO, 0x9D00238C
9D0021AC  00000000   NOP
9D0021B0  8FC30030   LW V1, 48(FP)
9D0021B4  3C020B6D   LUI V0, 2925
9D0021B8  344227F3   ORI V0, V0, 10227
9D0021BC  10620088   BEQ V1, V0, 0x9D0023E0
9D0021C0  00000000   NOP
9D0021C4  8FC30030   LW V1, 48(FP)
9D0021C8  3C020B6D   LUI V0, 2925
9D0021CC  344227F4   ORI V0, V0, 10228
9D0021D0  0062102B   SLTU V0, V1, V0
9D0021D4  1040000D   BEQ V0, ZERO, 0x9D00220C
9D0021D8  00000000   NOP
9D0021DC  8FC30030   LW V1, 48(FP)
9D0021E0  3C02079C   LUI V0, 1948
9D0021E4  34427846   ORI V0, V0, 30790
9D0021E8  10620218   BEQ V1, V0, 0x9D002A4C
9D0021EC  00000000   NOP
9D0021F0  8FC30030   LW V1, 48(FP)
9D0021F4  3C02097D   LUI V0, 2429
9D0021F8  3442692F   ORI V0, V0, 26927
9D0021FC  10620304   BEQ V1, V0, 0x9D002E10
9D002200  00000000   NOP
9D002204  10000061   BEQ ZERO, ZERO, 0x9D00238C
9D002208  00000000   NOP
9D00220C  8FC30030   LW V1, 48(FP)
9D002210  3C02290C   LUI V0, 10508
9D002214  3442429A   ORI V0, V0, 17050
9D002218  10620246   BEQ V1, V0, 0x9D002B34
9D00221C  00000000   NOP
9D002220  8FC30030   LW V1, 48(FP)
9D002224  3C0247D8   LUI V0, 18392
9D002228  344236A6   ORI V0, V0, 13990
9D00222C  106201D6   BEQ V1, V0, 0x9D002988
9D002230  00000000   NOP
9D002234  10000055   BEQ ZERO, ZERO, 0x9D00238C
9D002238  00000000   NOP
9D00223C  8FC30030   LW V1, 48(FP)
9D002240  3C0288B9   LUI V0, -30535
9D002244  344288A5   ORI V0, V0, -30555
9D002248  106200EB   BEQ V1, V0, 0x9D0025F8
9D00224C  00000000   NOP
9D002250  8FC30030   LW V1, 48(FP)
9D002254  3C0288B9   LUI V0, -30535
9D002258  344288A6   ORI V0, V0, -30554
9D00225C  0062102B   SLTU V0, V1, V0
9D002260  10400024   BEQ V0, ZERO, 0x9D0022F4
9D002264  00000000   NOP
9D002268  8FC30030   LW V1, 48(FP)
9D00226C  3C026FBC   LUI V0, 28604
9D002270  34421B5A   ORI V0, V0, 7002
9D002274  1062007A   BEQ V1, V0, 0x9D002460
9D002278  00000000   NOP
9D00227C  8FC30030   LW V1, 48(FP)
9D002280  3C026FBC   LUI V0, 28604
9D002284  34421B5B   ORI V0, V0, 7003
9D002288  0062102B   SLTU V0, V1, V0
9D00228C  1040000D   BEQ V0, ZERO, 0x9D0022C4
9D002290  00000000   NOP
9D002294  8FC30030   LW V1, 48(FP)
9D002298  3C025A35   LUI V0, 23093
9D00229C  3442F9FB   ORI V0, V0, -1541
9D0022A0  10620159   BEQ V1, V0, 0x9D002808
9D0022A4  00000000   NOP
9D0022A8  8FC30030   LW V1, 48(FP)
9D0022AC  3C026EC2   LUI V0, 28354
9D0022B0  344259AD   ORI V0, V0, 22957
9D0022B4  106202B3   BEQ V1, V0, 0x9D002D84
9D0022B8  00000000   NOP
9D0022BC  10000033   BEQ ZERO, ZERO, 0x9D00238C
9D0022C0  00000000   NOP
9D0022C4  8FC30030   LW V1, 48(FP)
9D0022C8  3C027CCC   LUI V0, 31948
9D0022CC  3442A9F6   ORI V0, V0, -22026
9D0022D0  1062028C   BEQ V1, V0, 0x9D002D04
9D0022D4  00000000   NOP
9D0022D8  8FC30030   LW V1, 48(FP)
9D0022DC  3C027D46   LUI V0, 32070
9D0022E0  34429D04   ORI V0, V0, -25340
9D0022E4  10620128   BEQ V1, V0, 0x9D002788
9D0022E8  00000000   NOP
9D0022EC  10000027   BEQ ZERO, ZERO, 0x9D00238C
9D0022F0  00000000   NOP
9D0022F4  8FC30030   LW V1, 48(FP)
9D0022F8  3C02B163   LUI V0, -20125
9D0022FC  34429143   ORI V0, V0, -28349
9D002300  10620246   BEQ V1, V0, 0x9D002C1C
9D002304  00000000   NOP
9D002308  8FC30030   LW V1, 48(FP)
9D00230C  3C02B163   LUI V0, -20125
9D002310  34429144   ORI V0, V0, -28348
9D002314  0062102B   SLTU V0, V1, V0
9D002318  1040000D   BEQ V0, ZERO, 0x9D002350
9D00231C  00000000   NOP
9D002320  8FC30030   LW V1, 48(FP)
9D002324  3C028B18   LUI V0, -29928
9D002328  34424EA0   ORI V0, V0, 20128
9D00232C  10620176   BEQ V1, V0, 0x9D002908
9D002330  00000000   NOP
9D002334  8FC30030   LW V1, 48(FP)
9D002338  3C02A317   LUI V0, -23785
9D00233C  3442CA50   ORI V0, V0, -13744
9D002340  106202C6   BEQ V1, V0, 0x9D002E5C
9D002344  00000000   NOP
9D002348  10000010   BEQ ZERO, ZERO, 0x9D00238C
9D00234C  00000000   NOP
9D002350  8FC30030   LW V1, 48(FP)
9D002354  3C02BE5A   LUI V0, -16806
9D002358  34424BA3   ORI V0, V0, 19363
9D00235C  1062014A   BEQ V1, V0, 0x9D002888
9D002360  00000000   NOP
9D002364  8FC30030   LW V1, 48(FP)
9D002368  3C02FD4B   LUI V0, -693
9D00236C  34421EEB   ORI V0, V0, 7915
9D002370  106202B6   BEQ V1, V0, 0x9D002E4C
9D002374  00000000   NOP
9D002378  8FC30030   LW V1, 48(FP)
9D00237C  3C02B9E2   LUI V0, -17950
9D002380  34421D04   ORI V0, V0, 7428
9D002384  106200E0   BEQ V1, V0, 0x9D002708
9D002388  00000000   NOP
9D00238C  8FC60030   LW A2, 48(FP)
9D002390  3C029D01   LUI V0, -25343
9D002394  2445D8BC   ADDIU A1, V0, -10052
9D002398  3C028000   LUI V0, -32768
9D00239C  244401CC   ADDIU A0, V0, 460
9D0023A0  0F40468D   JAL __wrap_sprintf
9D0023A4  00000000   NOP
9D0023A8  100002DA   BEQ ZERO, ZERO, 0x9D002F14
9D0023AC  00000000   NOP
9D0023B0  3C028000   LUI V0, -32768
9D0023B4  24441A90   ADDIU A0, V0, 6800
9D0023B8  0F404466   JAL PrintString
9D0023BC  00000000   NOP
9D0023C0  3C028000   LUI V0, -32768
9D0023C4  3C039D01   LUI V1, -25343
9D0023C8  8C63D8B8   LW V1, -10056(V1)
9D0023CC  244401CC   ADDIU A0, V0, 460
9D0023D0  A8830003   SWL V1, 3(A0)
9D0023D4  B84301CC   SWR V1, 460(V0)
9D0023D8  100002CE   BEQ ZERO, ZERO, 0x9D002F14
9D0023DC  00000000   NOP
9D0023E0  8FC3002C   LW V1, 44(FP)
9D0023E4  24020002   ADDIU V0, ZERO, 2
9D0023E8  14620011   BNE V1, V0, 0x9D002430
9D0023EC  00000000   NOP
9D0023F0  8FC20038   LW V0, 56(FP)
9D0023F4  00402025   OR A0, V0, ZERO
9D0023F8  0F4046F0   JAL atof
9D0023FC  00000000   NOP
9D002400  3C028000   LUI V0, -32768
9D002404  F4400230   SDC1 F0, 560(V0)
9D002408  0F402666   JAL UpdateDemodFilters
9D00240C  00000000   NOP
9D002410  3C028000   LUI V0, -32768
9D002414  3C039D01   LUI V1, -25343
9D002418  8C63D8B8   LW V1, -10056(V1)
9D00241C  244401CC   ADDIU A0, V0, 460
9D002420  A8830003   SWL V1, 3(A0)
9D002424  B84301CC   SWR V1, 460(V0)
9D002428  100002BA   BEQ ZERO, ZERO, 0x9D002F14
9D00242C  00000000   NOP
9D002430  3C028000   LUI V0, -32768
9D002434  D4400230   LDC1 F0, 560(V0)
9D002438  44060000   MFC1 A2, F0
9D00243C  44670000   MFHC1 A3, F0
9D002440  3C029D01   LUI V0, -25343
9D002444  2445D8D8   ADDIU A1, V0, -10024
9D002448  3C028000   LUI V0, -32768
9D00244C  244401CC   ADDIU A0, V0, 460
9D002450  0F40468D   JAL __wrap_sprintf
9D002454  00000000   NOP
9D002458  100002AE   BEQ ZERO, ZERO, 0x9D002F14
9D00245C  00000000   NOP
9D002460  8FC3002C   LW V1, 44(FP)
9D002464  24020002   ADDIU V0, ZERO, 2
9D002468  14620012   BNE V1, V0, 0x9D0024B4
9D00246C  00000000   NOP
9D002470  8FC20038   LW V0, 56(FP)
9D002474  00402025   OR A0, V0, ZERO
9D002478  0F4046F0   JAL atof
9D00247C  00000000   NOP
9D002480  3C028000   LUI V0, -32768
9D002484  24420230   ADDIU V0, V0, 560
9D002488  F4400008   SDC1 F0, 8(V0)
9D00248C  0F402666   JAL UpdateDemodFilters
9D002490  00000000   NOP
9D002494  3C028000   LUI V0, -32768
9D002498  3C039D01   LUI V1, -25343
9D00249C  8C63D8B8   LW V1, -10056(V1)
9D0024A0  244401CC   ADDIU A0, V0, 460
9D0024A4  A8830003   SWL V1, 3(A0)
9D0024A8  B84301CC   SWR V1, 460(V0)
9D0024AC  10000299   BEQ ZERO, ZERO, 0x9D002F14
9D0024B0  00000000   NOP
9D0024B4  3C028000   LUI V0, -32768
9D0024B8  24420230   ADDIU V0, V0, 560
9D0024BC  D4400008   LDC1 F0, 8(V0)
9D0024C0  44060000   MFC1 A2, F0
9D0024C4  44670000   MFHC1 A3, F0
9D0024C8  3C029D01   LUI V0, -25343
9D0024CC  2445D8D8   ADDIU A1, V0, -10024
9D0024D0  3C028000   LUI V0, -32768
9D0024D4  244401CC   ADDIU A0, V0, 460
9D0024D8  0F40468D   JAL __wrap_sprintf
9D0024DC  00000000   NOP
9D0024E0  1000028C   BEQ ZERO, ZERO, 0x9D002F14
9D0024E4  00000000   NOP
9D0024E8  8FC3002C   LW V1, 44(FP)
9D0024EC  24020002   ADDIU V0, ZERO, 2
9D0024F0  14620012   BNE V1, V0, 0x9D00253C
9D0024F4  00000000   NOP
9D0024F8  8FC20038   LW V0, 56(FP)
9D0024FC  00402025   OR A0, V0, ZERO
9D002500  0F4046F0   JAL atof
9D002504  00000000   NOP
9D002508  3C028000   LUI V0, -32768
9D00250C  24420230   ADDIU V0, V0, 560
9D002510  F4400010   SDC1 F0, 16(V0)
9D002514  0F402666   JAL UpdateDemodFilters
9D002518  00000000   NOP
9D00251C  3C028000   LUI V0, -32768
9D002520  3C039D01   LUI V1, -25343
9D002524  8C63D8B8   LW V1, -10056(V1)
9D002528  244401CC   ADDIU A0, V0, 460
9D00252C  A8830003   SWL V1, 3(A0)
9D002530  B84301CC   SWR V1, 460(V0)
9D002534  10000277   BEQ ZERO, ZERO, 0x9D002F14
9D002538  00000000   NOP
9D00253C  3C028000   LUI V0, -32768
9D002540  24420230   ADDIU V0, V0, 560
9D002544  D4400010   LDC1 F0, 16(V0)
9D002548  44060000   MFC1 A2, F0
9D00254C  44670000   MFHC1 A3, F0
9D002550  3C029D01   LUI V0, -25343
9D002554  2445D8D8   ADDIU A1, V0, -10024
9D002558  3C028000   LUI V0, -32768
9D00255C  244401CC   ADDIU A0, V0, 460
9D002560  0F40468D   JAL __wrap_sprintf
9D002564  00000000   NOP
9D002568  1000026A   BEQ ZERO, ZERO, 0x9D002F14
9D00256C  00000000   NOP
9D002570  8FC3002C   LW V1, 44(FP)
9D002574  24020002   ADDIU V0, ZERO, 2
9D002578  14620012   BNE V1, V0, 0x9D0025C4
9D00257C  00000000   NOP
9D002580  8FC20038   LW V0, 56(FP)
9D002584  00402025   OR A0, V0, ZERO
9D002588  0F4046F0   JAL atof
9D00258C  00000000   NOP
9D002590  3C028000   LUI V0, -32768
9D002594  24420230   ADDIU V0, V0, 560
9D002598  F4400018   SDC1 F0, 24(V0)
9D00259C  0F402666   JAL UpdateDemodFilters
9D0025A0  00000000   NOP
9D0025A4  3C028000   LUI V0, -32768
9D0025A8  3C039D01   LUI V1, -25343
9D0025AC  8C63D8B8   LW V1, -10056(V1)
9D0025B0  244401CC   ADDIU A0, V0, 460
9D0025B4  A8830003   SWL V1, 3(A0)
9D0025B8  B84301CC   SWR V1, 460(V0)
9D0025BC  10000255   BEQ ZERO, ZERO, 0x9D002F14
9D0025C0  00000000   NOP
9D0025C4  3C028000   LUI V0, -32768
9D0025C8  24420230   ADDIU V0, V0, 560
9D0025CC  D4400018   LDC1 F0, 24(V0)
9D0025D0  44060000   MFC1 A2, F0
9D0025D4  44670000   MFHC1 A3, F0
9D0025D8  3C029D01   LUI V0, -25343
9D0025DC  2445D8D8   ADDIU A1, V0, -10024
9D0025E0  3C028000   LUI V0, -32768
9D0025E4  244401CC   ADDIU A0, V0, 460
9D0025E8  0F40468D   JAL __wrap_sprintf
9D0025EC  00000000   NOP
9D0025F0  10000248   BEQ ZERO, ZERO, 0x9D002F14
9D0025F4  00000000   NOP
9D0025F8  8FC3002C   LW V1, 44(FP)
9D0025FC  24020002   ADDIU V0, ZERO, 2
9D002600  14620012   BNE V1, V0, 0x9D00264C
9D002604  00000000   NOP
9D002608  8FC20038   LW V0, 56(FP)
9D00260C  00402025   OR A0, V0, ZERO
9D002610  0F4046F0   JAL atof
9D002614  00000000   NOP
9D002618  3C028000   LUI V0, -32768
9D00261C  24420230   ADDIU V0, V0, 560
9D002620  F4400020   SDC1 F0, 32(V0)
9D002624  0F402666   JAL UpdateDemodFilters
9D002628  00000000   NOP
9D00262C  3C028000   LUI V0, -32768
9D002630  3C039D01   LUI V1, -25343
9D002634  8C63D8B8   LW V1, -10056(V1)
9D002638  244401CC   ADDIU A0, V0, 460
9D00263C  A8830003   SWL V1, 3(A0)
9D002640  B84301CC   SWR V1, 460(V0)
9D002644  10000233   BEQ ZERO, ZERO, 0x9D002F14
9D002648  00000000   NOP
9D00264C  3C028000   LUI V0, -32768
9D002650  24420230   ADDIU V0, V0, 560
9D002654  D4400020   LDC1 F0, 32(V0)
9D002658  44060000   MFC1 A2, F0
9D00265C  44670000   MFHC1 A3, F0
9D002660  3C029D01   LUI V0, -25343
9D002664  2445D8D8   ADDIU A1, V0, -10024
9D002668  3C028000   LUI V0, -32768
9D00266C  244401CC   ADDIU A0, V0, 460
9D002670  0F40468D   JAL __wrap_sprintf
9D002674  00000000   NOP
9D002678  10000226   BEQ ZERO, ZERO, 0x9D002F14
9D00267C  00000000   NOP
9D002680  8FC3002C   LW V1, 44(FP)
9D002684  24020002   ADDIU V0, ZERO, 2
9D002688  14620012   BNE V1, V0, 0x9D0026D4
9D00268C  00000000   NOP
9D002690  8FC20038   LW V0, 56(FP)
9D002694  00402025   OR A0, V0, ZERO
9D002698  0F4046F0   JAL atof
9D00269C  00000000   NOP
9D0026A0  3C028000   LUI V0, -32768
9D0026A4  24420230   ADDIU V0, V0, 560
9D0026A8  F4400028   SDC1 F0, 40(V0)
9D0026AC  0F402666   JAL UpdateDemodFilters
9D0026B0  00000000   NOP
9D0026B4  3C028000   LUI V0, -32768
9D0026B8  3C039D01   LUI V1, -25343
9D0026BC  8C63D8B8   LW V1, -10056(V1)
9D0026C0  244401CC   ADDIU A0, V0, 460
9D0026C4  A8830003   SWL V1, 3(A0)
9D0026C8  B84301CC   SWR V1, 460(V0)
9D0026CC  10000211   BEQ ZERO, ZERO, 0x9D002F14
9D0026D0  00000000   NOP
9D0026D4  3C028000   LUI V0, -32768
9D0026D8  24420230   ADDIU V0, V0, 560
9D0026DC  D4400028   LDC1 F0, 40(V0)
9D0026E0  44060000   MFC1 A2, F0
9D0026E4  44670000   MFHC1 A3, F0
9D0026E8  3C029D01   LUI V0, -25343
9D0026EC  2445D8D8   ADDIU A1, V0, -10024
9D0026F0  3C028000   LUI V0, -32768
9D0026F4  244401CC   ADDIU A0, V0, 460
9D0026F8  0F40468D   JAL __wrap_sprintf
9D0026FC  00000000   NOP
9D002700  10000204   BEQ ZERO, ZERO, 0x9D002F14
9D002704  00000000   NOP
9D002708  8FC3002C   LW V1, 44(FP)
9D00270C  24020002   ADDIU V0, ZERO, 2
9D002710  14620010   BNE V1, V0, 0x9D002754
9D002714  00000000   NOP
9D002718  8FC20038   LW V0, 56(FP)
9D00271C  00402025   OR A0, V0, ZERO
9D002720  0F4046F0   JAL atof
9D002724  00000000   NOP
9D002728  3C028000   LUI V0, -32768
9D00272C  24420230   ADDIU V0, V0, 560
9D002730  F4400030   SDC1 F0, 48(V0)
9D002734  3C028000   LUI V0, -32768
9D002738  3C039D01   LUI V1, -25343
9D00273C  8C63D8B8   LW V1, -10056(V1)
9D002740  244401CC   ADDIU A0, V0, 460
9D002744  A8830003   SWL V1, 3(A0)
9D002748  B84301CC   SWR V1, 460(V0)
9D00274C  100001F1   BEQ ZERO, ZERO, 0x9D002F14
9D002750  00000000   NOP
9D002754  3C028000   LUI V0, -32768
9D002758  24420230   ADDIU V0, V0, 560
9D00275C  D4400030   LDC1 F0, 48(V0)
9D002760  44060000   MFC1 A2, F0
9D002764  44670000   MFHC1 A3, F0
9D002768  3C029D01   LUI V0, -25343
9D00276C  2445D8D8   ADDIU A1, V0, -10024
9D002770  3C028000   LUI V0, -32768
9D002774  244401CC   ADDIU A0, V0, 460
9D002778  0F40468D   JAL __wrap_sprintf
9D00277C  00000000   NOP
9D002780  100001E4   BEQ ZERO, ZERO, 0x9D002F14
9D002784  00000000   NOP
9D002788  8FC3002C   LW V1, 44(FP)
9D00278C  24020002   ADDIU V0, ZERO, 2
9D002790  14620010   BNE V1, V0, 0x9D0027D4
9D002794  00000000   NOP
9D002798  8FC20038   LW V0, 56(FP)
9D00279C  00402025   OR A0, V0, ZERO
9D0027A0  0F4046F0   JAL atof
9D0027A4  00000000   NOP
9D0027A8  3C028000   LUI V0, -32768
9D0027AC  24420230   ADDIU V0, V0, 560
9D0027B0  F4400038   SDC1 F0, 56(V0)
9D0027B4  3C028000   LUI V0, -32768
9D0027B8  3C039D01   LUI V1, -25343
9D0027BC  8C63D8B8   LW V1, -10056(V1)
9D0027C0  244401CC   ADDIU A0, V0, 460
9D0027C4  A8830003   SWL V1, 3(A0)
9D0027C8  B84301CC   SWR V1, 460(V0)
9D0027CC  100001D1   BEQ ZERO, ZERO, 0x9D002F14
9D0027D0  00000000   NOP
9D0027D4  3C028000   LUI V0, -32768
9D0027D8  24420230   ADDIU V0, V0, 560
9D0027DC  D4400038   LDC1 F0, 56(V0)
9D0027E0  44060000   MFC1 A2, F0
9D0027E4  44670000   MFHC1 A3, F0
9D0027E8  3C029D01   LUI V0, -25343
9D0027EC  2445D8D8   ADDIU A1, V0, -10024
9D0027F0  3C028000   LUI V0, -32768
9D0027F4  244401CC   ADDIU A0, V0, 460
9D0027F8  0F40468D   JAL __wrap_sprintf
9D0027FC  00000000   NOP
9D002800  100001C4   BEQ ZERO, ZERO, 0x9D002F14
9D002804  00000000   NOP
9D002808  8FC3002C   LW V1, 44(FP)
9D00280C  24020002   ADDIU V0, ZERO, 2
9D002810  14620011   BNE V1, V0, 0x9D002858
9D002814  00000000   NOP
9D002818  8FC20038   LW V0, 56(FP)
9D00281C  00402025   OR A0, V0, ZERO
9D002820  0F4041C3   JAL atoi
9D002824  00000000   NOP
9D002828  00401825   OR V1, V0, ZERO
9D00282C  3C028000   LUI V0, -32768
9D002830  24420230   ADDIU V0, V0, 560
9D002834  AC430040   SW V1, 64(V0)
9D002838  3C028000   LUI V0, -32768
9D00283C  3C039D01   LUI V1, -25343
9D002840  8C63D8B8   LW V1, -10056(V1)
9D002844  244401CC   ADDIU A0, V0, 460
9D002848  A8830003   SWL V1, 3(A0)
9D00284C  B84301CC   SWR V1, 460(V0)
9D002850  100001B0   BEQ ZERO, ZERO, 0x9D002F14
9D002854  00000000   NOP
9D002858  3C028000   LUI V0, -32768
9D00285C  24420230   ADDIU V0, V0, 560
9D002860  8C420040   LW V0, 64(V0)
9D002864  00403025   OR A2, V0, ZERO
9D002868  3C029D01   LUI V0, -25343
9D00286C  2445D8E0   ADDIU A1, V0, -10016
9D002870  3C028000   LUI V0, -32768
9D002874  244401CC   ADDIU A0, V0, 460
9D002878  0F40468D   JAL __wrap_sprintf
9D00287C  00000000   NOP
9D002880  100001A4   BEQ ZERO, ZERO, 0x9D002F14
9D002884  00000000   NOP
9D002888  8FC3002C   LW V1, 44(FP)
9D00288C  24020002   ADDIU V0, ZERO, 2
9D002890  14620011   BNE V1, V0, 0x9D0028D8
9D002894  00000000   NOP
9D002898  8FC20038   LW V0, 56(FP)
9D00289C  00402025   OR A0, V0, ZERO
9D0028A0  0F4041C3   JAL atoi
9D0028A4  00000000   NOP
9D0028A8  00401825   OR V1, V0, ZERO
9D0028AC  3C028000   LUI V0, -32768
9D0028B0  24420230   ADDIU V0, V0, 560
9D0028B4  AC430044   SW V1, 68(V0)
9D0028B8  3C028000   LUI V0, -32768
9D0028BC  3C039D01   LUI V1, -25343
9D0028C0  8C63D8B8   LW V1, -10056(V1)
9D0028C4  244401CC   ADDIU A0, V0, 460
9D0028C8  A8830003   SWL V1, 3(A0)
9D0028CC  B84301CC   SWR V1, 460(V0)
9D0028D0  10000190   BEQ ZERO, ZERO, 0x9D002F14
9D0028D4  00000000   NOP
9D0028D8  3C028000   LUI V0, -32768
9D0028DC  24420230   ADDIU V0, V0, 560
9D0028E0  8C420044   LW V0, 68(V0)
9D0028E4  00403025   OR A2, V0, ZERO
9D0028E8  3C029D01   LUI V0, -25343
9D0028EC  2445D8E0   ADDIU A1, V0, -10016
9D0028F0  3C028000   LUI V0, -32768
9D0028F4  244401CC   ADDIU A0, V0, 460
9D0028F8  0F40468D   JAL __wrap_sprintf
9D0028FC  00000000   NOP
9D002900  10000184   BEQ ZERO, ZERO, 0x9D002F14
9D002904  00000000   NOP
9D002908  8FC3002C   LW V1, 44(FP)
9D00290C  24020002   ADDIU V0, ZERO, 2
9D002910  14620010   BNE V1, V0, 0x9D002954
9D002914  00000000   NOP
9D002918  8FC20038   LW V0, 56(FP)
9D00291C  00402025   OR A0, V0, ZERO
9D002920  0F4046F0   JAL atof
9D002924  00000000   NOP
9D002928  3C028000   LUI V0, -32768
9D00292C  24420230   ADDIU V0, V0, 560
9D002930  F4400048   SDC1 F0, 72(V0)
9D002934  3C028000   LUI V0, -32768
9D002938  3C039D01   LUI V1, -25343
9D00293C  8C63D8B8   LW V1, -10056(V1)
9D002940  244401CC   ADDIU A0, V0, 460
9D002944  A8830003   SWL V1, 3(A0)
9D002948  B84301CC   SWR V1, 460(V0)
9D00294C  10000171   BEQ ZERO, ZERO, 0x9D002F14
9D002950  00000000   NOP
9D002954  3C028000   LUI V0, -32768
9D002958  24420230   ADDIU V0, V0, 560
9D00295C  D4400048   LDC1 F0, 72(V0)
9D002960  44060000   MFC1 A2, F0
9D002964  44670000   MFHC1 A3, F0
9D002968  3C029D01   LUI V0, -25343
9D00296C  2445D8D8   ADDIU A1, V0, -10024
9D002970  3C028000   LUI V0, -32768
9D002974  244401CC   ADDIU A0, V0, 460
9D002978  0F40468D   JAL __wrap_sprintf
9D00297C  00000000   NOP
9D002980  10000164   BEQ ZERO, ZERO, 0x9D002F14
9D002984  00000000   NOP
9D002988  8FC3002C   LW V1, 44(FP)
9D00298C  24020002   ADDIU V0, ZERO, 2
9D002990  14620021   BNE V1, V0, 0x9D002A18
9D002994  00000000   NOP
9D002998  8FC20038   LW V0, 56(FP)
9D00299C  00402025   OR A0, V0, ZERO
9D0029A0  0F4046F0   JAL atof
9D0029A4  00000000   NOP
9D0029A8  3C028000   LUI V0, -32768
9D0029AC  24420230   ADDIU V0, V0, 560
9D0029B0  F4400050   SDC1 F0, 80(V0)
9D0029B4  8F83815C   LW V1, -32420(GP)
9D0029B8  3C028000   LUI V0, -32768
9D0029BC  24420230   ADDIU V0, V0, 560
9D0029C0  D4400050   LDC1 F0, 80(V0)
9D0029C4  3C029D01   LUI V0, -25343
9D0029C8  D441D9B0   LDC1 F1, -9808(V0)
9D0029CC  F7A10020   SDC1 F1, 32(SP)
9D0029D0  3C029D01   LUI V0, -25343
9D0029D4  D441D9B8   LDC1 F1, -9800(V0)
9D0029D8  F7A10018   SDC1 F1, 24(SP)
9D0029DC  F7A00010   SDC1 F0, 16(SP)
9D0029E0  00003025   OR A2, ZERO, ZERO
9D0029E4  00003825   OR A3, ZERO, ZERO
9D0029E8  00002825   OR A1, ZERO, ZERO
9D0029EC  00602025   OR A0, V1, ZERO
9D0029F0  0F401999   JAL BiQuad_modify
9D0029F4  00000000   NOP
9D0029F8  3C028000   LUI V0, -32768
9D0029FC  3C039D01   LUI V1, -25343
9D002A00  8C63D8B8   LW V1, -10056(V1)
9D002A04  244401CC   ADDIU A0, V0, 460
9D002A08  A8830003   SWL V1, 3(A0)
9D002A0C  B84301CC   SWR V1, 460(V0)
9D002A10  10000140   BEQ ZERO, ZERO, 0x9D002F14
9D002A14  00000000   NOP
9D002A18  3C028000   LUI V0, -32768
9D002A1C  24420230   ADDIU V0, V0, 560
9D002A20  D4400050   LDC1 F0, 80(V0)
9D002A24  44060000   MFC1 A2, F0
9D002A28  44670000   MFHC1 A3, F0
9D002A2C  3C029D01   LUI V0, -25343
9D002A30  2445D8D8   ADDIU A1, V0, -10024
9D002A34  3C028000   LUI V0, -32768
9D002A38  244401CC   ADDIU A0, V0, 460
9D002A3C  0F40468D   JAL __wrap_sprintf
9D002A40  00000000   NOP
9D002A44  10000133   BEQ ZERO, ZERO, 0x9D002F14
9D002A48  00000000   NOP
9D002A4C  8FC3002C   LW V1, 44(FP)
9D002A50  24020002   ADDIU V0, ZERO, 2
9D002A54  14620011   BNE V1, V0, 0x9D002A9C
9D002A58  00000000   NOP
9D002A5C  8FC20038   LW V0, 56(FP)
9D002A60  00402025   OR A0, V0, ZERO
9D002A64  0F4041C3   JAL atoi
9D002A68  00000000   NOP
9D002A6C  30430001   ANDI V1, V0, 1
9D002A70  3C028000   LUI V0, -32768
9D002A74  24420230   ADDIU V0, V0, 560
9D002A78  AC430058   SW V1, 88(V0)
9D002A7C  3C028000   LUI V0, -32768
9D002A80  3C039D01   LUI V1, -25343
9D002A84  8C63D8B8   LW V1, -10056(V1)
9D002A88  244401CC   ADDIU A0, V0, 460
9D002A8C  A8830003   SWL V1, 3(A0)
9D002A90  B84301CC   SWR V1, 460(V0)
9D002A94  1000011F   BEQ ZERO, ZERO, 0x9D002F14
9D002A98  00000000   NOP
9D002A9C  3C028000   LUI V0, -32768
9D002AA0  24420230   ADDIU V0, V0, 560
9D002AA4  8C430058   LW V1, 88(V0)
9D002AA8  24020001   ADDIU V0, ZERO, 1
9D002AAC  14620011   BNE V1, V0, 0x9D002AF4
9D002AB0  00000000   NOP
9D002AB4  3C028000   LUI V0, -32768
9D002AB8  3C039D01   LUI V1, -25343
9D002ABC  8C64D8E8   LW A0, -10008(V1)
9D002AC0  244501CC   ADDIU A1, V0, 460
9D002AC4  A8A40003   SWL A0, 3(A1)
9D002AC8  B84401CC   SWR A0, 460(V0)
9D002ACC  2463D8E8   ADDIU V1, V1, -10008
9D002AD0  244201CC   ADDIU V0, V0, 460
9D002AD4  90640004   LBU A0, 4(V1)
9D002AD8  A0440004   SB A0, 4(V0)
9D002ADC  90640005   LBU A0, 5(V1)
9D002AE0  A0440005   SB A0, 5(V0)
9D002AE4  90630006   LBU V1, 6(V1)
9D002AE8  A0430006   SB V1, 6(V0)
9D002AEC  10000109   BEQ ZERO, ZERO, 0x9D002F14
9D002AF0  00000000   NOP
9D002AF4  3C028000   LUI V0, -32768
9D002AF8  3C039D01   LUI V1, -25343
9D002AFC  8C64D8F0   LW A0, -10000(V1)
9D002B00  244501CC   ADDIU A1, V0, 460
9D002B04  A8A40003   SWL A0, 3(A1)
9D002B08  B84401CC   SWR A0, 460(V0)
9D002B0C  2463D8F0   ADDIU V1, V1, -10000
9D002B10  244201CC   ADDIU V0, V0, 460
9D002B14  90640004   LBU A0, 4(V1)
9D002B18  A0440004   SB A0, 4(V0)
9D002B1C  90640005   LBU A0, 5(V1)
9D002B20  A0440005   SB A0, 5(V0)
9D002B24  90630006   LBU V1, 6(V1)
9D002B28  A0430006   SB V1, 6(V0)
9D002B2C  100000F9   BEQ ZERO, ZERO, 0x9D002F14
9D002B30  00000000   NOP
9D002B34  8FC3002C   LW V1, 44(FP)
9D002B38  24020002   ADDIU V0, ZERO, 2
9D002B3C  14620011   BNE V1, V0, 0x9D002B84
9D002B40  00000000   NOP
9D002B44  8FC20038   LW V0, 56(FP)
9D002B48  00402025   OR A0, V0, ZERO
9D002B4C  0F4041C3   JAL atoi
9D002B50  00000000   NOP
9D002B54  30430001   ANDI V1, V0, 1
9D002B58  3C028000   LUI V0, -32768
9D002B5C  24420230   ADDIU V0, V0, 560
9D002B60  AC43005C   SW V1, 92(V0)
9D002B64  3C028000   LUI V0, -32768
9D002B68  3C039D01   LUI V1, -25343
9D002B6C  8C63D8B8   LW V1, -10056(V1)
9D002B70  244401CC   ADDIU A0, V0, 460
9D002B74  A8830003   SWL V1, 3(A0)
9D002B78  B84301CC   SWR V1, 460(V0)
9D002B7C  100000E5   BEQ ZERO, ZERO, 0x9D002F14
9D002B80  00000000   NOP
9D002B84  3C028000   LUI V0, -32768
9D002B88  24420230   ADDIU V0, V0, 560
9D002B8C  8C43005C   LW V1, 92(V0)
9D002B90  24020001   ADDIU V0, ZERO, 1
9D002B94  14620011   BNE V1, V0, 0x9D002BDC
9D002B98  00000000   NOP
9D002B9C  3C028000   LUI V0, -32768
9D002BA0  3C039D01   LUI V1, -25343
9D002BA4  8C64D8E8   LW A0, -10008(V1)
9D002BA8  244501CC   ADDIU A1, V0, 460
9D002BAC  A8A40003   SWL A0, 3(A1)
9D002BB0  B84401CC   SWR A0, 460(V0)
9D002BB4  2463D8E8   ADDIU V1, V1, -10008
9D002BB8  244201CC   ADDIU V0, V0, 460
9D002BBC  90640004   LBU A0, 4(V1)
9D002BC0  A0440004   SB A0, 4(V0)
9D002BC4  90640005   LBU A0, 5(V1)
9D002BC8  A0440005   SB A0, 5(V0)
9D002BCC  90630006   LBU V1, 6(V1)
9D002BD0  A0430006   SB V1, 6(V0)
9D002BD4  100000CF   BEQ ZERO, ZERO, 0x9D002F14
9D002BD8  00000000   NOP
9D002BDC  3C028000   LUI V0, -32768
9D002BE0  3C039D01   LUI V1, -25343
9D002BE4  8C64D8F0   LW A0, -10000(V1)
9D002BE8  244501CC   ADDIU A1, V0, 460
9D002BEC  A8A40003   SWL A0, 3(A1)
9D002BF0  B84401CC   SWR A0, 460(V0)
9D002BF4  2463D8F0   ADDIU V1, V1, -10000
9D002BF8  244201CC   ADDIU V0, V0, 460
9D002BFC  90640004   LBU A0, 4(V1)
9D002C00  A0440004   SB A0, 4(V0)
9D002C04  90640005   LBU A0, 5(V1)
9D002C08  A0440005   SB A0, 5(V0)
9D002C0C  90630006   LBU V1, 6(V1)
9D002C10  A0430006   SB V1, 6(V0)
9D002C14  100000BF   BEQ ZERO, ZERO, 0x9D002F14
9D002C18  00000000   NOP
9D002C1C  8FC3002C   LW V1, 44(FP)
9D002C20  24020002   ADDIU V0, ZERO, 2
9D002C24  14620011   BNE V1, V0, 0x9D002C6C
9D002C28  00000000   NOP
9D002C2C  8FC20038   LW V0, 56(FP)
9D002C30  00402025   OR A0, V0, ZERO
9D002C34  0F4041C3   JAL atoi
9D002C38  00000000   NOP
9D002C3C  30430001   ANDI V1, V0, 1
9D002C40  3C028000   LUI V0, -32768
9D002C44  24420230   ADDIU V0, V0, 560
9D002C48  AC430060   SW V1, 96(V0)
9D002C4C  3C028000   LUI V0, -32768
9D002C50  3C039D01   LUI V1, -25343
9D002C54  8C63D8B8   LW V1, -10056(V1)
9D002C58  244401CC   ADDIU A0, V0, 460
9D002C5C  A8830003   SWL V1, 3(A0)
9D002C60  B84301CC   SWR V1, 460(V0)
9D002C64  100000AB   BEQ ZERO, ZERO, 0x9D002F14
9D002C68  00000000   NOP
9D002C6C  3C028000   LUI V0, -32768
9D002C70  24420230   ADDIU V0, V0, 560
9D002C74  8C430060   LW V1, 96(V0)
9D002C78  24020001   ADDIU V0, ZERO, 1
9D002C7C  14620011   BNE V1, V0, 0x9D002CC4
9D002C80  00000000   NOP
9D002C84  3C028000   LUI V0, -32768
9D002C88  3C039D01   LUI V1, -25343
9D002C8C  8C64D8E8   LW A0, -10008(V1)
9D002C90  244501CC   ADDIU A1, V0, 460
9D002C94  A8A40003   SWL A0, 3(A1)
9D002C98  B84401CC   SWR A0, 460(V0)
9D002C9C  2463D8E8   ADDIU V1, V1, -10008
9D002CA0  244201CC   ADDIU V0, V0, 460
9D002CA4  90640004   LBU A0, 4(V1)
9D002CA8  A0440004   SB A0, 4(V0)
9D002CAC  90640005   LBU A0, 5(V1)
9D002CB0  A0440005   SB A0, 5(V0)
9D002CB4  90630006   LBU V1, 6(V1)
9D002CB8  A0430006   SB V1, 6(V0)
9D002CBC  10000095   BEQ ZERO, ZERO, 0x9D002F14
9D002CC0  00000000   NOP
9D002CC4  3C028000   LUI V0, -32768
9D002CC8  3C039D01   LUI V1, -25343
9D002CCC  8C64D8F0   LW A0, -10000(V1)
9D002CD0  244501CC   ADDIU A1, V0, 460
9D002CD4  A8A40003   SWL A0, 3(A1)
9D002CD8  B84401CC   SWR A0, 460(V0)
9D002CDC  2463D8F0   ADDIU V1, V1, -10000
9D002CE0  244201CC   ADDIU V0, V0, 460
9D002CE4  90640004   LBU A0, 4(V1)
9D002CE8  A0440004   SB A0, 4(V0)
9D002CEC  90640005   LBU A0, 5(V1)
9D002CF0  A0440005   SB A0, 5(V0)
9D002CF4  90630006   LBU V1, 6(V1)
9D002CF8  A0430006   SB V1, 6(V0)
9D002CFC  10000085   BEQ ZERO, ZERO, 0x9D002F14
9D002D00  00000000   NOP
9D002D04  8FC3002C   LW V1, 44(FP)
9D002D08  24020002   ADDIU V0, ZERO, 2
9D002D0C  14620010   BNE V1, V0, 0x9D002D50
9D002D10  00000000   NOP
9D002D14  8FC20038   LW V0, 56(FP)
9D002D18  00402025   OR A0, V0, ZERO
9D002D1C  0F4046F0   JAL atof
9D002D20  00000000   NOP
9D002D24  3C028000   LUI V0, -32768
9D002D28  24420230   ADDIU V0, V0, 560
9D002D2C  F4400068   SDC1 F0, 104(V0)
9D002D30  3C028000   LUI V0, -32768
9D002D34  3C039D01   LUI V1, -25343
9D002D38  8C63D8B8   LW V1, -10056(V1)
9D002D3C  244401CC   ADDIU A0, V0, 460
9D002D40  A8830003   SWL V1, 3(A0)
9D002D44  B84301CC   SWR V1, 460(V0)
9D002D48  10000072   BEQ ZERO, ZERO, 0x9D002F14
9D002D4C  00000000   NOP
9D002D50  3C028000   LUI V0, -32768
9D002D54  24420230   ADDIU V0, V0, 560
9D002D58  D4400068   LDC1 F0, 104(V0)
9D002D5C  44060000   MFC1 A2, F0
9D002D60  44670000   MFHC1 A3, F0
9D002D64  3C029D01   LUI V0, -25343
9D002D68  2445D8D8   ADDIU A1, V0, -10024
9D002D6C  3C028000   LUI V0, -32768
9D002D70  244401CC   ADDIU A0, V0, 460
9D002D74  0F40468D   JAL __wrap_sprintf
9D002D78  00000000   NOP
9D002D7C  10000065   BEQ ZERO, ZERO, 0x9D002F14
9D002D80  00000000   NOP
9D002D84  3C029D01   LUI V0, -25343
9D002D88  2444D8F8   ADDIU A0, V0, -9992
9D002D8C  0F404466   JAL PrintString
9D002D90  00000000   NOP
9D002D94  24020001   ADDIU V0, ZERO, 1
9D002D98  AF828078   SW V0, -32648(GP)
9D002D9C  1000005D   BEQ ZERO, ZERO, 0x9D002F14
9D002DA0  00000000   NOP
9D002DA4  0F404414   JAL LoadDefaultConfig
9D002DA8  00000000   NOP
9D002DAC  3C029D01   LUI V0, -25343
9D002DB0  2444D944   ADDIU A0, V0, -9916
9D002DB4  0F404466   JAL PrintString
9D002DB8  00000000   NOP
9D002DBC  10000055   BEQ ZERO, ZERO, 0x9D002F14
9D002DC0  00000000   NOP
9D002DC4  0F403E65   JAL PrintSavedConfig
9D002DC8  00000000   NOP
9D002DCC  10000051   BEQ ZERO, ZERO, 0x9D002F14
9D002DD0  00000000   NOP
9D002DD4  24040001   ADDIU A0, ZERO, 1
9D002DD8  0F401141   JAL SavePrintConfig
9D002DDC  00000000   NOP
9D002DE0  3C038000   LUI V1, -32768
9D002DE4  3C029D01   LUI V0, -25343
9D002DE8  246301CC   ADDIU V1, V1, 460
9D002DEC  2442D964   ADDIU V0, V0, -9884
9D002DF0  24040024   ADDIU A0, ZERO, 36
9D002DF4  00803025   OR A2, A0, ZERO
9D002DF8  00402825   OR A1, V0, ZERO
9D002DFC  00602025   OR A0, V1, ZERO
9D002E00  0F40313C   JAL memcpy
9D002E04  00000000   NOP
9D002E08  10000042   BEQ ZERO, ZERO, 0x9D002F14
9D002E0C  00000000   NOP
9D002E10  00002025   OR A0, ZERO, ZERO
9D002E14  0F401141   JAL SavePrintConfig
9D002E18  00000000   NOP
9D002E1C  3C038000   LUI V1, -32768
9D002E20  3C029D01   LUI V0, -25343
9D002E24  246301CC   ADDIU V1, V1, 460
9D002E28  2442D988   ADDIU V0, V0, -9848
9D002E2C  24040022   ADDIU A0, ZERO, 34
9D002E30  00803025   OR A2, A0, ZERO
9D002E34  00402825   OR A1, V0, ZERO
9D002E38  00602025   OR A0, V1, ZERO
9D002E3C  0F40313C   JAL memcpy
9D002E40  00000000   NOP
9D002E44  10000033   BEQ ZERO, ZERO, 0x9D002F14
9D002E48  00000000   NOP
9D002E4C  0F403DBB   JAL LoadSavedConfig
9D002E50  00000000   NOP
9D002E54  1000002F   BEQ ZERO, ZERO, 0x9D002F14
9D002E58  00000000   NOP
9D002E5C  8FC3002C   LW V1, 44(FP)
9D002E60  24020002   ADDIU V0, ZERO, 2
9D002E64  14620011   BNE V1, V0, 0x9D002EAC
9D002E68  00000000   NOP
9D002E6C  8FC20038   LW V0, 56(FP)
9D002E70  00402025   OR A0, V0, ZERO
9D002E74  0F4041C3   JAL atoi
9D002E78  00000000   NOP
9D002E7C  00401825   OR V1, V0, ZERO
9D002E80  3C028000   LUI V0, -32768
9D002E84  24420230   ADDIU V0, V0, 560
9D002E88  AC430064   SW V1, 100(V0)
9D002E8C  3C028000   LUI V0, -32768
9D002E90  3C039D01   LUI V1, -25343
9D002E94  8C63D8B8   LW V1, -10056(V1)
9D002E98  244401CC   ADDIU A0, V0, 460
9D002E9C  A8830003   SWL V1, 3(A0)
9D002EA0  B84301CC   SWR V1, 460(V0)
9D002EA4  1000001B   BEQ ZERO, ZERO, 0x9D002F14
9D002EA8  00000000   NOP
9D002EAC  3C028000   LUI V0, -32768
9D002EB0  24420230   ADDIU V0, V0, 560
9D002EB4  8C420064   LW V0, 100(V0)
9D002EB8  00403025   OR A2, V0, ZERO
9D002EBC  3C029D01   LUI V0, -25343
9D002EC0  2445D8E0   ADDIU A1, V0, -10016
9D002EC4  3C028000   LUI V0, -32768
9D002EC8  244401CC   ADDIU A0, V0, 460
9D002ECC  0F40468D   JAL __wrap_sprintf
9D002ED0  00000000   NOP
9D002ED4  00000000   NOP
9D002ED8  1000000E   BEQ ZERO, ZERO, 0x9D002F14
9D002EDC  00000000   NOP
9D002EE0  00000000   NOP
9D002EE4  1000000B   BEQ ZERO, ZERO, 0x9D002F14
9D002EE8  00000000   NOP
9D002EEC  00000000   NOP
9D002EF0  10000008   BEQ ZERO, ZERO, 0x9D002F14
9D002EF4  00000000   NOP
9D002EF8  00000000   NOP
9D002EFC  10000005   BEQ ZERO, ZERO, 0x9D002F14
9D002F00  00000000   NOP
9D002F04  00000000   NOP
9D002F08  10000002   BEQ ZERO, ZERO, 0x9D002F14
9D002F0C  00000000   NOP
9D002F10  00000000   NOP
9D002F14  03C0E825   OR SP, FP, ZERO
9D002F18  8FBF0064   LW RA, 100(SP)
9D002F1C  8FBE0060   LW FP, 96(SP)
9D002F20  27BD0068   ADDIU SP, SP, 104
9D002F24  03E00008   JR RA
9D002F28  00000000   NOP
9D00FA38  27BDFFE0   ADDIU SP, SP, -32
9D00FA3C  AFBF001C   SW RA, 28(SP)
9D00FA40  AFBE0018   SW FP, 24(SP)
9D00FA44  03A0F025   OR FP, SP, ZERO
9D00FA48  AFC40020   SW A0, 32(FP)
9D00FA4C  8FC40020   LW A0, 32(FP)
9D00FA50  0F403196   JAL strlen
9D00FA54  00000000   NOP
9D00FA58  00401825   OR V1, V0, ZERO
9D00FA5C  24020020   ADDIU V0, ZERO, 32
9D00FA60  0043001B   DIVU V0, V1
9D00FA64  006001F4   TEQ V1, ZERO
9D00FA68  00001010   MFHI V0
9D00FA6C  00001012   MFLO V0
9D00FA70  A3C20014   SB V0, 20(FP)
9D00FA74  AFC00010   SW ZERO, 16(FP)
9D00FA78  1000000D   BEQ ZERO, ZERO, 0x9D00FAB0
9D00FA7C  00000000   NOP
9D00FA80  93C20014   LBU V0, 20(FP)
9D00FA84  8FC30010   LW V1, 16(FP)
9D00FA88  00431004   SLLV V0, V1, V0
9D00FA8C  AFC20010   SW V0, 16(FP)
9D00FA90  8FC20020   LW V0, 32(FP)
9D00FA94  24430001   ADDIU V1, V0, 1
9D00FA98  AFC30020   SW V1, 32(FP)
9D00FA9C  80420000   LB V0, 0(V0)
9D00FAA0  00401825   OR V1, V0, ZERO
9D00FAA4  8FC20010   LW V0, 16(FP)
9D00FAA8  00431021   ADDU V0, V0, V1
9D00FAAC  AFC20010   SW V0, 16(FP)
9D00FAB0  8FC20020   LW V0, 32(FP)
9D00FAB4  80420000   LB V0, 0(V0)
9D00FAB8  1440FFF1   BNE V0, ZERO, 0x9D00FA80
9D00FABC  00000000   NOP
9D00FAC0  8FC20010   LW V0, 16(FP)
9D00FAC4  03C0E825   OR SP, FP, ZERO
9D00FAC8  8FBF001C   LW RA, 28(SP)
9D00FACC  8FBE0018   LW FP, 24(SP)
9D00FAD0  27BD0020   ADDIU SP, SP, 32
9D00FAD4  03E00008   JR RA
9D00FAD8  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/biquad.c  -------------------
1:                   /**
2:                    * @file biquad.c
3:                    *
4:                    * Simple implementation of Biquad filters -- Tom St Denis
5:                    *
6:                    * Based on the work
7:                    *
8:                    *   Cookbook formulae for audio EQ biquad filter coefficients
9:                    *   ---------------------------------------------------------
10:                   *   by Robert Bristow-Johnson, pbjrbj@viconet.com  a.k.a. robert@audioheads.com
11:                   *
12:                   * Available on the web at
13:                   *    http://www.musicdsp.org/files/biquad.c
14:                   *
15:                   * Enjoy.
16:                   *
17:                   * This work is hereby placed in the public domain for all purposes, whether
18:                   * commercial, free [as in speech] or educational, etc.  Use the code and please
19:                   * give me credit if you wish.
20:                   *
21:                   * Tom St Denis -- http://tomstdenis.home.dhs.org
22:                   *
23:                   * See also: http://musicweb.ucsd.edu/~tre/biquad.pdf
24:                   *
25:                   */
26:                  #include "biquad.h"
27:                  #include "main.h" // access to PrintString
28:                  
29:                  /* Computes a BiQuad filter on a sample */
30:                  double BiQuad(const double sample, biquad* const b)
31:                  {
32:                    double result;
33:                  
34:                    /* compute result */
35:                    result = b->a0 * sample + b->a1 * b->x1 + b->a2 * b->x2 -
36:                      b->a3 * b->y1 - b->a4 * b->y2;
37:                  
38:                    /* shift x1 to x2, sample to x1 */
39:                    b->x2 = b->x1;
40:                    b->x1 = sample;
41:                  
42:                    /* shift y1 to y2, result to y1 */
43:                    b->y2 = b->y1;
44:                    b->y1 = result;
45:                  
46:                    return result;
47:                  }
48:                  
49:                  /* sets up a BiQuad Filter */
50:                  /* Note that dbGain is only used when the type is LSH or HSH */
51:                  biquad *BiQuad_new(const int type, const double dbGain, const double freq,
52:                  		   const double srate, const double Q)
53:                  {
54:                    biquad *b;          // Create pointer to biquad
55:                  
56:                    b = malloc(sizeof(biquad)); // allocate RAM for biquad
57:                    if (b == NULL){              // Get out if malloc fails
58:                      PrintString("Insufficient heap space in BiQuad_new\r\n");
59:                      return NULL;
60:                    }  
61:                    BiQuad_modify(b, type, dbGain, freq, srate, Q); // Go set up biquad b
62:                     /* zero initial samples */
63:                    b->x1 = b->x2 = 0;
64:                    b->y1 = b->y2 = 0;
65:                    return b;
66:                  }
67:                  
68:                  /* Modifies an existing BiQuad filter. */
69:                  /* Note that dbGain is only used when the type is LSH or HSH */
70:                  // Pointer to biquad struct is first parameter.
71:                  void BiQuad_modify(biquad* const b, const int type, const double dbGain, const double freq,
72:                  		   const double srate, const double Q)
73:                  {
74:                    double A, omega, sn, cs, alpha, beta;
75:                    double a0, a1, a2, b0, b1, b2;
76:                    /* setup variables */
77:                    A = pow(10, dbGain /40);
78:                    omega = 2 * M_PI * freq /srate;
79:                    sn = sin(omega);
80:                    cs = cos(omega);
81:                    // alpha = sn * sinh(M_LN2 /2 * bandwidth * omega /sn);
82:                    alpha = sn / (2*Q); // From https://github.com/hosackm/BiquadFilter/blob/master/Biquad.c
83:                    beta = sqrt(A + A);
84:                  
85:                    switch (type) {
86:                    case LPF:
87:                      b0 = (1 - cs) /2;
88:                      b1 = 1 - cs;
89:                      b2 = (1 - cs) /2;
90:                      a0 = 1 + alpha;
91:                      a1 = -2 * cs;
92:                      a2 = 1 - alpha;
93:                      break;
94:                    case HPF:
95:                      b0 = (1 + cs) /2;
96:                      b1 = -(1 + cs);
97:                      b2 = (1 + cs) /2;
98:                      a0 = 1 + alpha;
99:                      a1 = -2 * cs;
100:                     a2 = 1 - alpha;
101:                     break;
102:                   case BPF:
103:                     b0 = alpha;
104:                     b1 = 0;
105:                     b2 = -alpha;
106:                     a0 = 1 + alpha;
107:                     a1 = -2 * cs;
108:                     a2 = 1 - alpha;
109:                     break;
110:                   case NOTCH:
111:                     b0 = 1;
112:                     b1 = -2 * cs;
113:                     b2 = 1;
114:                     a0 = 1 + alpha;
115:                     a1 = -2 * cs;
116:                     a2 = 1 - alpha;
117:                     break;
118:                   case PEQ:
119:                     b0 = 1 + (alpha * A);
120:                     b1 = -2 * cs;
121:                     b2 = 1 - (alpha * A);
122:                     a0 = 1 + (alpha /A);
123:                     a1 = -2 * cs;
124:                     a2 = 1 - (alpha /A);
125:                     break;
126:                   case LSH:
127:                     b0 = A * ((A + 1) - (A - 1) * cs + beta * sn);
128:                     b1 = 2 * A * ((A - 1) - (A + 1) * cs);
129:                     b2 = A * ((A + 1) - (A - 1) * cs - beta * sn);
130:                     a0 = (A + 1) + (A - 1) * cs + beta * sn;
131:                     a1 = -2 * ((A - 1) + (A + 1) * cs);
132:                     a2 = (A + 1) + (A - 1) * cs - beta * sn;
133:                     break;
134:                   case HSH:
135:                     b0 = A * ((A + 1) + (A - 1) * cs + beta * sn);
136:                     b1 = -2 * A * ((A - 1) + (A + 1) * cs);
137:                     b2 = A * ((A + 1) + (A - 1) * cs - beta * sn);
138:                     a0 = (A + 1) - (A - 1) * cs + beta * sn;
139:                     a1 = 2 * ((A - 1) - (A + 1) * cs);
140:                     a2 = (A + 1) - (A - 1) * cs - beta * sn;
141:                     break;
142:                   }
143:                 
144:                   /* precompute the coefficients */
145:                   b->a0 = b0 /a0;
146:                   b->a1 = b1 /a0;
147:                   b->a2 = b2 /a0;
148:                   b->a3 = a1 /a0;
149:                   b->a4 = a2 /a0;
150:                 
151:                 }
152:                 
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D006664  27BDFF88   ADDIU SP, SP, -120
9D006668  AFBF0074   SW RA, 116(SP)
9D00666C  AFBE0070   SW FP, 112(SP)
9D006670  03A0F025   OR FP, SP, ZERO
9D006674  AFC40078   SW A0, 120(FP)
9D006678  AFC5007C   SW A1, 124(FP)
9D00667C  AFC60080   SW A2, 128(FP)
9D006680  AFC70084   SW A3, 132(FP)
9D006684  D7C10080   LDC1 F1, 128(FP)
9D006688  3C029D01   LUI V0, -25343
9D00668C  D4400F70   LDC1 F0, 3952(V0)
9D006690  46200843   DIV.D F1, F1, F0
9D006694  3C029D01   LUI V0, -25343
9D006698  D4400F78   LDC1 F0, 3960(V0)
9D00669C  46200B86   MOV.D F14, F1
9D0066A0  46200306   MOV.D F12, F0
9D0066A4  0F401378   JAL pow
9D0066A8  00000000   NOP
9D0066AC  F7C00040   SDC1 F0, 64(FP)
9D0066B0  D7C10088   LDC1 F1, 136(FP)
9D0066B4  3C029D01   LUI V0, -25343
9D0066B8  D4400F80   LDC1 F0, 3968(V0)
9D0066BC  46200842   MUL.D F1, F1, F0
9D0066C0  D7C00090   LDC1 F0, 144(FP)
9D0066C4  46200803   DIV.D F0, F1, F0
9D0066C8  F7C00048   SDC1 F0, 72(FP)
9D0066CC  D7CC0048   LDC1 F12, 72(FP)
9D0066D0  0F40355F   JAL sin
9D0066D4  00000000   NOP
9D0066D8  F7C00050   SDC1 F0, 80(FP)
9D0066DC  D7CC0048   LDC1 F12, 72(FP)
9D0066E0  0F4037B3   JAL cos
9D0066E4  00000000   NOP
9D0066E8  F7C00058   SDC1 F0, 88(FP)
9D0066EC  D7C00098   LDC1 F0, 152(FP)
9D0066F0  46200000   ADD.D F0, F0, F0
9D0066F4  D7C10050   LDC1 F1, 80(FP)
9D0066F8  46200803   DIV.D F0, F1, F0
9D0066FC  F7C00060   SDC1 F0, 96(FP)
9D006700  D7C00040   LDC1 F0, 64(FP)
9D006704  46200000   ADD.D F0, F0, F0
9D006708  46200306   MOV.D F12, F0
9D00670C  0F402B36   JAL sqrt
9D006710  00000000   NOP
9D006714  F7C00068   SDC1 F0, 104(FP)
9D006718  8FC2007C   LW V0, 124(FP)
9D00671C  2C420007   SLTIU V0, V0, 7
9D006720  10400187   BEQ V0, ZERO, 0x9D006D40
9D006724  00000000   NOP
9D006728  8FC2007C   LW V0, 124(FP)
9D00672C  00021880   SLL V1, V0, 2
9D006730  3C029D00   LUI V0, -25344
9D006734  24426748   ADDIU V0, V0, 26440
9D006738  00621021   ADDU V0, V1, V0
9D00673C  8C420000   LW V0, 0(V0)
9D006740  00400008   JR V0
9D006744  00000000   NOP
9D006764  3C029D01   LUI V0, -25343
9D006774  3C029D01   LUI V0, -25343
9D006778  D4400F90   LDC1 F0, 3984(V0)
9D00677C  46200803   DIV.D F0, F1, F0
9D006780  F7C00028   SDC1 F0, 40(FP)
9D006784  3C029D01   LUI V0, -25343
9D006788  D4410F88   LDC1 F1, 3976(V0)
9D00678C  D7C00058   LDC1 F0, 88(FP)
9D006790  46200801   SUB.D F0, F1, F0
9D006794  F7C00030   SDC1 F0, 48(FP)
9D006798  3C029D01   LUI V0, -25343
9D00679C  D4410F88   LDC1 F1, 3976(V0)
9D0067A0  D7C00058   LDC1 F0, 88(FP)
9D0067A4  46200841   SUB.D F1, F1, F0
9D0067A8  3C029D01   LUI V0, -25343
9D0067AC  D4400F90   LDC1 F0, 3984(V0)
9D0067B0  46200803   DIV.D F0, F1, F0
9D0067B4  F7C00038   SDC1 F0, 56(FP)
9D0067B8  D7C10060   LDC1 F1, 96(FP)
9D0067BC  3C029D01   LUI V0, -25343
9D0067C0  D4400F88   LDC1 F0, 3976(V0)
9D0067C4  46200800   ADD.D F0, F1, F0
9D0067C8  F7C00010   SDC1 F0, 16(FP)
9D0067CC  D7C10058   LDC1 F1, 88(FP)
9D0067D0  3C029D01   LUI V0, -25343
9D0067D4  D4400F98   LDC1 F0, 3992(V0)
9D0067D8  46200802   MUL.D F0, F1, F0
9D0067DC  F7C00018   SDC1 F0, 24(FP)
9D0067E0  3C029D01   LUI V0, -25343
9D0067E4  D4410F88   LDC1 F1, 3976(V0)
9D0067E8  D7C00060   LDC1 F0, 96(FP)
9D0067EC  46200801   SUB.D F0, F1, F0
9D0067F0  F7C00020   SDC1 F0, 32(FP)
9D0067F4  10000152   BEQ ZERO, ZERO, 0x9D006D40
9D0067F8  00000000   NOP
9D0067FC  D7C10058   LDC1 F1, 88(FP)
9D006800  3C029D01   LUI V0, -25343
9D006804  D4400F88   LDC1 F0, 3976(V0)
9D006808  46200840   ADD.D F1, F1, F0
9D00680C  3C029D01   LUI V0, -25343
9D006810  D4400F90   LDC1 F0, 3984(V0)
9D006814  46200803   DIV.D F0, F1, F0
9D006818  F7C00028   SDC1 F0, 40(FP)
9D00681C  D7C10058   LDC1 F1, 88(FP)
9D006820  3C029D01   LUI V0, -25343
9D006824  D4400F88   LDC1 F0, 3976(V0)
9D006828  46200800   ADD.D F0, F1, F0
9D00682C  44020000   MFC1 V0, F0
9D006830  44630000   MFHC1 V1, F0
9D006834  AFC20030   SW V0, 48(FP)
9D006838  3C048000   LUI A0, -32768
9D00683C  00641026   XOR V0, V1, A0
9D006840  AFC20034   SW V0, 52(FP)
9D006844  D7C10058   LDC1 F1, 88(FP)
9D006848  3C029D01   LUI V0, -25343
9D00684C  D4400F88   LDC1 F0, 3976(V0)
9D006850  46200840   ADD.D F1, F1, F0
9D006854  3C029D01   LUI V0, -25343
9D006858  D4400F90   LDC1 F0, 3984(V0)
9D00685C  46200803   DIV.D F0, F1, F0
9D006860  F7C00038   SDC1 F0, 56(FP)
9D006864  D7C10060   LDC1 F1, 96(FP)
9D006868  3C029D01   LUI V0, -25343
9D00686C  D4400F88   LDC1 F0, 3976(V0)
9D006870  46200800   ADD.D F0, F1, F0
9D006874  F7C00010   SDC1 F0, 16(FP)
9D006878  D7C10058   LDC1 F1, 88(FP)
9D00687C  3C029D01   LUI V0, -25343
9D006880  D4400F98   LDC1 F0, 3992(V0)
9D006884  46200802   MUL.D F0, F1, F0
9D006888  F7C00018   SDC1 F0, 24(FP)
9D00688C  3C029D01   LUI V0, -25343
9D006890  D4410F88   LDC1 F1, 3976(V0)
9D006894  D7C00060   LDC1 F0, 96(FP)
9D006898  46200801   SUB.D F0, F1, F0
9D00689C  F7C00020   SDC1 F0, 32(FP)
9D0068A0  10000127   BEQ ZERO, ZERO, 0x9D006D40
9D0068A4  00000000   NOP
9D0068A8  D7C00060   LDC1 F0, 96(FP)
9D0068AC  F7C00028   SDC1 F0, 40(FP)
9D0068B0  AFC00030   SW ZERO, 48(FP)
9D0068B4  AFC00034   SW ZERO, 52(FP)
9D0068B8  8FC20060   LW V0, 96(FP)
9D0068BC  AFC20038   SW V0, 56(FP)
9D0068C0  8FC30064   LW V1, 100(FP)
9D0068C4  3C028000   LUI V0, -32768
9D0068C8  00621026   XOR V0, V1, V0
9D0068CC  AFC2003C   SW V0, 60(FP)
9D0068D0  D7C10060   LDC1 F1, 96(FP)
9D0068D4  3C029D01   LUI V0, -25343
9D0068D8  D4400F88   LDC1 F0, 3976(V0)
9D0068DC  46200800   ADD.D F0, F1, F0
9D0068E0  F7C00010   SDC1 F0, 16(FP)
9D0068E4  D7C10058   LDC1 F1, 88(FP)
9D0068E8  3C029D01   LUI V0, -25343
9D0068EC  D4400F98   LDC1 F0, 3992(V0)
9D0068F0  46200802   MUL.D F0, F1, F0
9D0068F4  F7C00018   SDC1 F0, 24(FP)
9D0068F8  3C029D01   LUI V0, -25343
9D0068FC  D4410F88   LDC1 F1, 3976(V0)
9D006900  D7C00060   LDC1 F0, 96(FP)
9D006904  46200801   SUB.D F0, F1, F0
9D006908  F7C00020   SDC1 F0, 32(FP)
9D00690C  1000010C   BEQ ZERO, ZERO, 0x9D006D40
9D006910  00000000   NOP
9D006914  3C029D01   LUI V0, -25343
9D006918  D4400F88   LDC1 F0, 3976(V0)
9D00691C  F7C00028   SDC1 F0, 40(FP)
9D006920  D7C10058   LDC1 F1, 88(FP)
9D006924  3C029D01   LUI V0, -25343
9D006928  D4400F98   LDC1 F0, 3992(V0)
9D00692C  46200802   MUL.D F0, F1, F0
9D006930  F7C00030   SDC1 F0, 48(FP)
9D006934  3C029D01   LUI V0, -25343
9D006938  D4400F88   LDC1 F0, 3976(V0)
9D00693C  F7C00038   SDC1 F0, 56(FP)
9D006940  D7C10060   LDC1 F1, 96(FP)
9D006944  3C029D01   LUI V0, -25343
9D006948  D4400F88   LDC1 F0, 3976(V0)
9D00694C  46200800   ADD.D F0, F1, F0
9D006950  F7C00010   SDC1 F0, 16(FP)
9D006954  D7C10058   LDC1 F1, 88(FP)
9D006958  3C029D01   LUI V0, -25343
9D00695C  D4400F98   LDC1 F0, 3992(V0)
9D006960  46200802   MUL.D F0, F1, F0
9D006964  F7C00018   SDC1 F0, 24(FP)
9D006968  3C029D01   LUI V0, -25343
9D00696C  D4410F88   LDC1 F1, 3976(V0)
9D006970  D7C00060   LDC1 F0, 96(FP)
9D006974  46200801   SUB.D F0, F1, F0
9D006978  F7C00020   SDC1 F0, 32(FP)
9D00697C  100000F0   BEQ ZERO, ZERO, 0x9D006D40
9D006980  00000000   NOP
9D006984  D7C10060   LDC1 F1, 96(FP)
9D006988  D7C00040   LDC1 F0, 64(FP)
9D00698C  46200842   MUL.D F1, F1, F0
9D006990  3C029D01   LUI V0, -25343
9D006994  D4400F88   LDC1 F0, 3976(V0)
9D006998  46200800   ADD.D F0, F1, F0
9D00699C  F7C00028   SDC1 F0, 40(FP)
9D0069A0  D7C10058   LDC1 F1, 88(FP)
9D0069A4  3C029D01   LUI V0, -25343
9D0069A8  D4400F98   LDC1 F0, 3992(V0)
9D0069AC  46200802   MUL.D F0, F1, F0
9D0069B0  F7C00030   SDC1 F0, 48(FP)
9D0069B4  D7C10060   LDC1 F1, 96(FP)
9D0069B8  D7C00040   LDC1 F0, 64(FP)
9D0069BC  46200802   MUL.D F0, F1, F0
9D0069C0  3C029D01   LUI V0, -25343
9D0069C4  D4410F88   LDC1 F1, 3976(V0)
9D0069C8  46200801   SUB.D F0, F1, F0
9D0069CC  F7C00038   SDC1 F0, 56(FP)
9D0069D0  D7C10060   LDC1 F1, 96(FP)
9D0069D4  D7C00040   LDC1 F0, 64(FP)
9D0069D8  46200843   DIV.D F1, F1, F0
9D0069DC  3C029D01   LUI V0, -25343
9D0069E0  D4400F88   LDC1 F0, 3976(V0)
9D0069E4  46200800   ADD.D F0, F1, F0
9D0069E8  F7C00010   SDC1 F0, 16(FP)
9D0069EC  D7C10058   LDC1 F1, 88(FP)
9D0069F0  3C029D01   LUI V0, -25343
9D0069F4  D4400F98   LDC1 F0, 3992(V0)
9D0069F8  46200802   MUL.D F0, F1, F0
9D0069FC  F7C00018   SDC1 F0, 24(FP)
9D006A00  D7C10060   LDC1 F1, 96(FP)
9D006A04  D7C00040   LDC1 F0, 64(FP)
9D006A08  46200803   DIV.D F0, F1, F0
9D006A0C  3C029D01   LUI V0, -25343
9D006A10  D4410F88   LDC1 F1, 3976(V0)
9D006A14  46200801   SUB.D F0, F1, F0
9D006A18  F7C00020   SDC1 F0, 32(FP)
9D006A1C  100000C8   BEQ ZERO, ZERO, 0x9D006D40
9D006A20  00000000   NOP
9D006A24  D7C10040   LDC1 F1, 64(FP)
9D006A28  3C029D01   LUI V0, -25343
9D006A2C  D4400F88   LDC1 F0, 3976(V0)
9D006A30  46200840   ADD.D F1, F1, F0
9D006A34  D7C20040   LDC1 F2, 64(FP)
9D006A38  3C029D01   LUI V0, -25343
9D006A3C  D4400F88   LDC1 F0, 3976(V0)
9D006A40  46201081   SUB.D F2, F2, F0
9D006A44  D7C00058   LDC1 F0, 88(FP)
9D006A48  46201002   MUL.D F0, F2, F0
9D006A4C  46200841   SUB.D F1, F1, F0
9D006A50  D7C20068   LDC1 F2, 104(FP)
9D006A54  D7C00050   LDC1 F0, 80(FP)
9D006A58  46201002   MUL.D F0, F2, F0
9D006A5C  46200800   ADD.D F0, F1, F0
9D006A60  D7C10040   LDC1 F1, 64(FP)
9D006A64  46200802   MUL.D F0, F1, F0
9D006A68  F7C00028   SDC1 F0, 40(FP)
9D006A6C  D7C00040   LDC1 F0, 64(FP)
9D006A70  46200040   ADD.D F1, F0, F0
9D006A74  D7C20040   LDC1 F2, 64(FP)
9D006A78  3C029D01   LUI V0, -25343
9D006A7C  D4400F88   LDC1 F0, 3976(V0)
9D006A80  46201081   SUB.D F2, F2, F0
9D006A84  D7C30040   LDC1 F3, 64(FP)
9D006A88  3C029D01   LUI V0, -25343
9D006A8C  D4400F88   LDC1 F0, 3976(V0)
9D006A90  462018C0   ADD.D F3, F3, F0
9D006A94  D7C00058   LDC1 F0, 88(FP)
9D006A98  46201802   MUL.D F0, F3, F0
9D006A9C  46201001   SUB.D F0, F2, F0
9D006AA0  46200802   MUL.D F0, F1, F0
9D006AA4  F7C00030   SDC1 F0, 48(FP)
9D006AA8  D7C10040   LDC1 F1, 64(FP)
9D006AAC  3C029D01   LUI V0, -25343
9D006AB0  D4400F88   LDC1 F0, 3976(V0)
9D006AB4  46200840   ADD.D F1, F1, F0
9D006AB8  D7C20040   LDC1 F2, 64(FP)
9D006ABC  3C029D01   LUI V0, -25343
9D006AC0  D4400F88   LDC1 F0, 3976(V0)
9D006AC4  46201081   SUB.D F2, F2, F0
9D006AC8  D7C00058   LDC1 F0, 88(FP)
9D006ACC  46201002   MUL.D F0, F2, F0
9D006AD0  46200841   SUB.D F1, F1, F0
9D006AD4  D7C20068   LDC1 F2, 104(FP)
9D006AD8  D7C00050   LDC1 F0, 80(FP)
9D006ADC  46201002   MUL.D F0, F2, F0
9D006AE0  46200801   SUB.D F0, F1, F0
9D006AE4  D7C10040   LDC1 F1, 64(FP)
9D006AE8  46200802   MUL.D F0, F1, F0
9D006AEC  F7C00038   SDC1 F0, 56(FP)
9D006AF0  D7C10040   LDC1 F1, 64(FP)
9D006AF4  3C029D01   LUI V0, -25343
9D006AF8  D4400F88   LDC1 F0, 3976(V0)
9D006AFC  46200840   ADD.D F1, F1, F0
9D006B00  D7C20040   LDC1 F2, 64(FP)
9D006B04  3C029D01   LUI V0, -25343
9D006B08  D4400F88   LDC1 F0, 3976(V0)
9D006B0C  46201081   SUB.D F2, F2, F0
9D006B10  D7C00058   LDC1 F0, 88(FP)
9D006B14  46201002   MUL.D F0, F2, F0
9D006B18  46200840   ADD.D F1, F1, F0
9D006B1C  D7C20068   LDC1 F2, 104(FP)
9D006B20  D7C00050   LDC1 F0, 80(FP)
9D006B24  46201002   MUL.D F0, F2, F0
9D006B28  46200800   ADD.D F0, F1, F0
9D006B2C  F7C00010   SDC1 F0, 16(FP)
9D006B30  D7C10040   LDC1 F1, 64(FP)
9D006B34  3C029D01   LUI V0, -25343
9D006B38  D4400F88   LDC1 F0, 3976(V0)
9D006B3C  46200841   SUB.D F1, F1, F0
9D006B40  D7C20040   LDC1 F2, 64(FP)
9D006B44  3C029D01   LUI V0, -25343
9D006B48  D4400F88   LDC1 F0, 3976(V0)
9D006B4C  46201080   ADD.D F2, F2, F0
9D006B50  D7C00058   LDC1 F0, 88(FP)
9D006B54  46201002   MUL.D F0, F2, F0
9D006B58  46200840   ADD.D F1, F1, F0
9D006B5C  3C029D01   LUI V0, -25343
9D006B60  D4400F98   LDC1 F0, 3992(V0)
9D006B64  46200802   MUL.D F0, F1, F0
9D006B68  F7C00018   SDC1 F0, 24(FP)
9D006B6C  D7C10040   LDC1 F1, 64(FP)
9D006B70  3C029D01   LUI V0, -25343
9D006B74  D4400F88   LDC1 F0, 3976(V0)
9D006B78  46200840   ADD.D F1, F1, F0
9D006B7C  D7C20040   LDC1 F2, 64(FP)
9D006B80  3C029D01   LUI V0, -25343
9D006B84  D4400F88   LDC1 F0, 3976(V0)
9D006B88  46201081   SUB.D F2, F2, F0
9D006B8C  D7C00058   LDC1 F0, 88(FP)
9D006B90  46201002   MUL.D F0, F2, F0
9D006B94  46200840   ADD.D F1, F1, F0
9D006B98  D7C20068   LDC1 F2, 104(FP)
9D006B9C  D7C00050   LDC1 F0, 80(FP)
9D006BA0  46201002   MUL.D F0, F2, F0
9D006BA4  46200801   SUB.D F0, F1, F0
9D006BA8  F7C00020   SDC1 F0, 32(FP)
9D006BAC  10000064   BEQ ZERO, ZERO, 0x9D006D40
9D006BB0  00000000   NOP
9D006BB4  D7C10040   LDC1 F1, 64(FP)
9D006BB8  3C029D01   LUI V0, -25343
9D006BBC  D4400F88   LDC1 F0, 3976(V0)
9D006BC0  46200840   ADD.D F1, F1, F0
9D006BC4  D7C20040   LDC1 F2, 64(FP)
9D006BC8  3C029D01   LUI V0, -25343
9D006BCC  D4400F88   LDC1 F0, 3976(V0)
9D006BD0  46201081   SUB.D F2, F2, F0
9D006BD4  D7C00058   LDC1 F0, 88(FP)
9D006BD8  46201002   MUL.D F0, F2, F0
9D006BDC  46200840   ADD.D F1, F1, F0
9D006BE0  D7C20068   LDC1 F2, 104(FP)
9D006BE4  D7C00050   LDC1 F0, 80(FP)
9D006BE8  46201002   MUL.D F0, F2, F0
9D006BEC  46200800   ADD.D F0, F1, F0
9D006BF0  D7C10040   LDC1 F1, 64(FP)
9D006BF4  46200802   MUL.D F0, F1, F0
9D006BF8  F7C00028   SDC1 F0, 40(FP)
9D006BFC  D7C10040   LDC1 F1, 64(FP)
9D006C00  3C029D01   LUI V0, -25343
9D006C04  D4400F98   LDC1 F0, 3992(V0)
9D006C08  46200842   MUL.D F1, F1, F0
9D006C0C  D7C20040   LDC1 F2, 64(FP)
9D006C10  3C029D01   LUI V0, -25343
9D006C14  D4400F88   LDC1 F0, 3976(V0)
9D006C18  46201081   SUB.D F2, F2, F0
9D006C1C  D7C30040   LDC1 F3, 64(FP)
9D006C20  3C029D01   LUI V0, -25343
9D006C24  D4400F88   LDC1 F0, 3976(V0)
9D006C28  462018C0   ADD.D F3, F3, F0
9D006C2C  D7C00058   LDC1 F0, 88(FP)
9D006C30  46201802   MUL.D F0, F3, F0
9D006C34  46201000   ADD.D F0, F2, F0
9D006C38  46200802   MUL.D F0, F1, F0
9D006C3C  F7C00030   SDC1 F0, 48(FP)
9D006C40  D7C10040   LDC1 F1, 64(FP)
9D006C44  3C029D01   LUI V0, -25343
9D006C48  D4400F88   LDC1 F0, 3976(V0)
9D006C4C  46200840   ADD.D F1, F1, F0
9D006C50  D7C20040   LDC1 F2, 64(FP)
9D006C54  3C029D01   LUI V0, -25343
9D006C58  D4400F88   LDC1 F0, 3976(V0)
9D006C5C  46201081   SUB.D F2, F2, F0
9D006C60  D7C00058   LDC1 F0, 88(FP)
9D006C64  46201002   MUL.D F0, F2, F0
9D006C68  46200840   ADD.D F1, F1, F0
9D006C6C  D7C20068   LDC1 F2, 104(FP)
9D006C70  D7C00050   LDC1 F0, 80(FP)
9D006C74  46201002   MUL.D F0, F2, F0
9D006C78  46200801   SUB.D F0, F1, F0
9D006C7C  D7C10040   LDC1 F1, 64(FP)
9D006C80  46200802   MUL.D F0, F1, F0
9D006C84  F7C00038   SDC1 F0, 56(FP)
9D006C88  D7C10040   LDC1 F1, 64(FP)
9D006C8C  3C029D01   LUI V0, -25343
9D006C90  D4400F88   LDC1 F0, 3976(V0)
9D006C94  46200840   ADD.D F1, F1, F0
9D006C98  D7C20040   LDC1 F2, 64(FP)
9D006C9C  3C029D01   LUI V0, -25343
9D006CA0  D4400F88   LDC1 F0, 3976(V0)
9D006CA4  46201081   SUB.D F2, F2, F0
9D006CA8  D7C00058   LDC1 F0, 88(FP)
9D006CAC  46201002   MUL.D F0, F2, F0
9D006CB0  46200841   SUB.D F1, F1, F0
9D006CB4  D7C20068   LDC1 F2, 104(FP)
9D006CB8  D7C00050   LDC1 F0, 80(FP)
9D006CBC  46201002   MUL.D F0, F2, F0
9D006CC0  46200800   ADD.D F0, F1, F0
9D006CC4  F7C00010   SDC1 F0, 16(FP)
9D006CC8  D7C10040   LDC1 F1, 64(FP)
9D006CCC  3C029D01   LUI V0, -25343
9D006CD0  D4400F88   LDC1 F0, 3976(V0)
9D006CD4  46200841   SUB.D F1, F1, F0
9D006CD8  D7C20040   LDC1 F2, 64(FP)
9D006CDC  3C029D01   LUI V0, -25343
9D006CE0  D4400F88   LDC1 F0, 3976(V0)
9D006CE4  46201080   ADD.D F2, F2, F0
9D006CE8  D7C00058   LDC1 F0, 88(FP)
9D006CEC  46201002   MUL.D F0, F2, F0
9D006CF0  46200801   SUB.D F0, F1, F0
9D006CF4  46200000   ADD.D F0, F0, F0
9D006CF8  F7C00018   SDC1 F0, 24(FP)
9D006CFC  D7C10040   LDC1 F1, 64(FP)
9D006D00  3C029D01   LUI V0, -25343
9D006D04  D4400F88   LDC1 F0, 3976(V0)
9D006D08  46200840   ADD.D F1, F1, F0
9D006D0C  D7C20040   LDC1 F2, 64(FP)
9D006D10  3C029D01   LUI V0, -25343
9D006D14  D4400F88   LDC1 F0, 3976(V0)
9D006D18  46201081   SUB.D F2, F2, F0
9D006D1C  D7C00058   LDC1 F0, 88(FP)
9D006D20  46201002   MUL.D F0, F2, F0
9D006D24  46200841   SUB.D F1, F1, F0
9D006D28  D7C20068   LDC1 F2, 104(FP)
9D006D2C  D7C00050   LDC1 F0, 80(FP)
9D006D30  46201002   MUL.D F0, F2, F0
9D006D34  46200801   SUB.D F0, F1, F0
9D006D38  F7C00020   SDC1 F0, 32(FP)
9D006D3C  00000000   NOP
9D006D40  D7C10028   LDC1 F1, 40(FP)
9D006D44  D7C00010   LDC1 F0, 16(FP)
9D006D48  46200803   DIV.D F0, F1, F0
9D006D4C  8FC20078   LW V0, 120(FP)
9D006D50  F4400000   SDC1 F0, 0(V0)
9D006D54  D7C10030   LDC1 F1, 48(FP)
9D006D58  D7C00010   LDC1 F0, 16(FP)
9D006D5C  46200803   DIV.D F0, F1, F0
9D006D60  8FC20078   LW V0, 120(FP)
9D006D64  F4400008   SDC1 F0, 8(V0)
9D006D68  D7C10038   LDC1 F1, 56(FP)
9D006D6C  D7C00010   LDC1 F0, 16(FP)
9D006D70  46200803   DIV.D F0, F1, F0
9D006D74  8FC20078   LW V0, 120(FP)
9D006D78  F4400010   SDC1 F0, 16(V0)
9D006D7C  D7C10018   LDC1 F1, 24(FP)
9D006D80  D7C00010   LDC1 F0, 16(FP)
9D006D84  46200803   DIV.D F0, F1, F0
9D006D88  8FC20078   LW V0, 120(FP)
9D006D8C  F4400018   SDC1 F0, 24(V0)
9D006D90  D7C10020   LDC1 F1, 32(FP)
9D006D94  D7C00010   LDC1 F0, 16(FP)
9D006D98  46200803   DIV.D F0, F1, F0
9D006D9C  8FC20078   LW V0, 120(FP)
9D006DA0  F4400020   SDC1 F0, 32(V0)
9D006DA4  00000000   NOP
9D006DA8  03C0E825   OR SP, FP, ZERO
9D006DAC  8FBF0074   LW RA, 116(SP)
9D006DB0  8FBE0070   LW FP, 112(SP)
9D006DB4  27BD0078   ADDIU SP, SP, 120
9D006DB8  03E00008   JR RA
9D006DBC  00000000   NOP
9D00E818  27BDFFF0   ADDIU SP, SP, -16
9D00E81C  AFBE000C   SW FP, 12(SP)
9D00E820  03A0F025   OR FP, SP, ZERO
9D00E824  F7CC0010   SDC1 F12, 16(FP)
9D00E828  AFC60018   SW A2, 24(FP)
9D00E82C  8FC20018   LW V0, 24(FP)
9D00E830  D4410000   LDC1 F1, 0(V0)
9D00E834  D7C00010   LDC1 F0, 16(FP)
9D00E838  46200842   MUL.D F1, F1, F0
9D00E83C  8FC20018   LW V0, 24(FP)
9D00E840  D4420008   LDC1 F2, 8(V0)
9D00E844  8FC20018   LW V0, 24(FP)
9D00E848  D4400028   LDC1 F0, 40(V0)
9D00E84C  46201002   MUL.D F0, F2, F0
9D00E850  46200840   ADD.D F1, F1, F0
9D00E854  8FC20018   LW V0, 24(FP)
9D00E858  D4420010   LDC1 F2, 16(V0)
9D00E85C  8FC20018   LW V0, 24(FP)
9D00E860  D4400030   LDC1 F0, 48(V0)
9D00E864  46201002   MUL.D F0, F2, F0
9D00E868  46200840   ADD.D F1, F1, F0
9D00E86C  8FC20018   LW V0, 24(FP)
9D00E870  D4420018   LDC1 F2, 24(V0)
9D00E874  8FC20018   LW V0, 24(FP)
9D00E878  D4400038   LDC1 F0, 56(V0)
9D00E87C  46201002   MUL.D F0, F2, F0
9D00E880  46200841   SUB.D F1, F1, F0
9D00E884  8FC20018   LW V0, 24(FP)
9D00E888  D4420020   LDC1 F2, 32(V0)
9D00E88C  8FC20018   LW V0, 24(FP)
9D00E890  D4400040   LDC1 F0, 64(V0)
9D00E894  46201002   MUL.D F0, F2, F0
9D00E898  46200801   SUB.D F0, F1, F0
9D00E89C  F7C00000   SDC1 F0, 0(FP)
9D00E8A0  8FC20018   LW V0, 24(FP)
9D00E8A4  D4400028   LDC1 F0, 40(V0)
9D00E8A8  8FC20018   LW V0, 24(FP)
9D00E8AC  F4400030   SDC1 F0, 48(V0)
9D00E8B0  8FC20018   LW V0, 24(FP)
9D00E8B4  D7C00010   LDC1 F0, 16(FP)
9D00E8B8  F4400028   SDC1 F0, 40(V0)
9D00E8BC  8FC20018   LW V0, 24(FP)
9D00E8C0  D4400038   LDC1 F0, 56(V0)
9D00E8C4  8FC20018   LW V0, 24(FP)
9D00E8C8  F4400040   SDC1 F0, 64(V0)
9D00E8CC  8FC20018   LW V0, 24(FP)
9D00E8D0  D7C00000   LDC1 F0, 0(FP)
9D00E8D4  F4400038   SDC1 F0, 56(V0)
9D00E8D8  D7C00000   LDC1 F0, 0(FP)
9D00E8DC  03C0E825   OR SP, FP, ZERO
9D00E8E0  8FBE000C   LW FP, 12(SP)
9D00E8E4  27BD0010   ADDIU SP, SP, 16
9D00E8E8  03E00008   JR RA
9D00E8EC  00000000   NOP
9D00E8F0  27BDFFC8   ADDIU SP, SP, -56
9D00E8F4  AFBF0034   SW RA, 52(SP)
9D00E8F8  AFBE0030   SW FP, 48(SP)
9D00E8FC  03A0F025   OR FP, SP, ZERO
9D00E900  AFC40038   SW A0, 56(FP)
9D00E904  AFC60040   SW A2, 64(FP)
9D00E908  AFC70044   SW A3, 68(FP)
9D00E90C  24040048   ADDIU A0, ZERO, 72
9D00E910  0F4028A3   JAL malloc
9D00E914  00000000   NOP
9D00E918  AFC20028   SW V0, 40(FP)
9D00E91C  8FC20028   LW V0, 40(FP)
9D00E920  14400008   BNE V0, ZERO, 0x9D00E944
9D00E924  00000000   NOP
9D00E928  3C029D01   LUI V0, -25343
9D00E92C  24440F48   ADDIU A0, V0, 3912
9D00E930  0F404466   JAL PrintString
9D00E934  00000000   NOP
9D00E938  00001025   OR V0, ZERO, ZERO
9D00E93C  1000001C   BEQ ZERO, ZERO, 0x9D00E9B0
9D00E940  00000000   NOP
9D00E944  D7C00058   LDC1 F0, 88(FP)
9D00E948  F7A00020   SDC1 F0, 32(SP)
9D00E94C  D7C00050   LDC1 F0, 80(FP)
9D00E950  F7A00018   SDC1 F0, 24(SP)
9D00E954  D7C00048   LDC1 F0, 72(FP)
9D00E958  F7A00010   SDC1 F0, 16(SP)
9D00E95C  8FC60040   LW A2, 64(FP)
9D00E960  8FC70044   LW A3, 68(FP)
9D00E964  8FC50038   LW A1, 56(FP)
9D00E968  8FC40028   LW A0, 40(FP)
9D00E96C  0F401999   JAL BiQuad_modify
9D00E970  00000000   NOP
9D00E974  8FC20028   LW V0, 40(FP)
9D00E978  AC400030   SW ZERO, 48(V0)
9D00E97C  AC400034   SW ZERO, 52(V0)
9D00E980  8FC20028   LW V0, 40(FP)
9D00E984  D4400030   LDC1 F0, 48(V0)
9D00E988  8FC20028   LW V0, 40(FP)
9D00E98C  F4400028   SDC1 F0, 40(V0)
9D00E990  8FC20028   LW V0, 40(FP)
9D00E994  AC400040   SW ZERO, 64(V0)
9D00E998  AC400044   SW ZERO, 68(V0)
9D00E99C  8FC20028   LW V0, 40(FP)
9D00E9A0  D4400040   LDC1 F0, 64(V0)
9D00E9A4  8FC20028   LW V0, 40(FP)
9D00E9A8  F4400038   SDC1 F0, 56(V0)
9D00E9AC  8FC20028   LW V0, 40(FP)
9D00E9B0  03C0E825   OR SP, FP, ZERO
9D00E9B4  8FBF0034   LW RA, 52(SP)
9D00E9B8  8FBE0030   LW FP, 48(SP)
9D00E9BC  27BD0038   ADDIU SP, SP, 56
9D00E9C0  03E00008   JR RA
9D00E9C4  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/baudotuart.c  ---------------
1:                   // BaudotUart
2:                   
3:                   #include "BaudotUart.h"
4:                   #include "main.h"
5:                   #include "UserConfig.h"
6:                   
7:                   uint32_t CharCount=0;   // How many good start bits we got
8:                   uint32_t BadStopBitCount=0; // How many bad stop bits we got
9:                   
10:                  char BaudotLtrs[]="~E\nA SIU\rDRJNFCKTZLWHYPQOBG~MXV~";  // 0x03 to shift to figs, 0x0f to ltrs
11:                  char BaudotFigs[]="~3\n- \a87\r$4',!:(5\")2#6019?&~./;~"; // ~ characters not translated
12:                  
13:                  
14:                  //TODO: Change timing to use BaudRate
15:                  char BaudotUartRx(bool MS){
16:                    // Receives Baudot and translate to ASCII. Returns ASCII character when available. Otherwise
17:                    // returns null. Call at 8 kHz sample rate (every 125 us). Uses LOOP_SAMPLE_IN_Get()  to get a
18:                    // sample of both transmit and receive data
19:                    #define mark 1==MS // 
20:                    #define space 0==MS //   
21:                    static int state=0, CallCounter=0;
22:                    static uint8_t RxChar=0;
23:                    static bool FIGS=false;
24:                    char result=0;
25:                    if(CallCounter!=0){        // Not time yet
26:                      CallCounter--;           // decrement and get out
27:                    }else{                     // CallCounter==0, time to do something
28:                      switch(state){
29:                          default:
30:                          case 0:             // Waiting for start bit
31:                            if(space){     //  We have a space
32:                              state++;        // Go to next state, checking mid-start bit
33:                              CallCounter=88; // Come back in 11ms, middle of start bit
34:                            }
35:                            break;
36:                          case 1:             // Check middle of start bit  
37:                            if(space){     //  We have a space, so start bit is valid
38:                              RxChar=0;       // Clear the character 
39:                              CharCount++;    // Count the character
40:                              state++;        // Go to next state, get lsb
41:                              CallCounter=176; // Come back in 22ms, middle of lsb
42:                            }else{
43:                              state=0;         // false start bit. Go back to waiting for start of start bit  
44:                            }
45:                            break;
46:                          case 2:             // Pick up the LSB
47:                            if(mark){
48:                              RxChar|=1;      // Set the lsb    
49:                            }
50:                            state++;        // Go to next state, get next bit
51:                            CallCounter=176; // Come back in 22ms, middle of bit 1
52:                            break;
53:                          case 3:             // Pick up bit 1
54:                            if(mark){
55:                              RxChar|=2;      // Set bit 1    
56:                            }
57:                            state++;        // Go to next state, get next bit
58:                            CallCounter=176; // Come back in 22ms, middle of bit 2
59:                            break;
60:                          case 4:             // Pick up bit 2
61:                            if(mark){
62:                              RxChar|=4;      // Set bit 2    
63:                            }
64:                            state++;        // Go to next state, get next bit
65:                            CallCounter=176; // Come back in 22ms, middle of bit 3
66:                            break;
67:                          case 5:             // Pick up the bit 3
68:                            if(mark){
69:                              RxChar|=8;      // Set the bit 3    
70:                            }
71:                            state++;        // Go to next state, get next bit
72:                            CallCounter=176; // Come back in 22ms, middle of bit 4
73:                            break;
74:                          case 6:             // Pick up the bit 4
75:                            if(mark){
76:                              RxChar|=0x10;      // Set bit 4    
77:                            }
78:                            state++;        // Go to next state, get next bit
79:                            CallCounter=176; // Come back in 22ms, middle of stop bit
80:                            break;
81:                          case 7:             // Check stop bit
82:                            if(space){
83:                              BadStopBitCount++;  // Should be mark. Count error if not
84:                              state=9;            // go wait for mark instead of running open
85:                            }
86:                            RxChar&=31;       // Mask to make sure we do not go off end of decode array
87:                            switch(RxChar){
88:                                case 27: FIGS=true; break;
89:                                case 31: FIGS=false; break;
90:                                case  0: break;        // do nothing with baudot blank key
91:                                case  4: FIGS=false;   // Unshift on space. No break. Drop into decode
92:                                default: 
93:                                    if(FIGS){
94:                                        result=BaudotFigs[RxChar];
95:                                    }else{
96:                                        result=BaudotLtrs[RxChar]; 
97:                                    }    
98:                                    break;
99:                            }
100:                           if(UartDest==modem){          // Send received data to UART/USN
101:                             PrintChar(result);          // Print it
102:                           }  
103:                           state=0;          // Go back to waiting for start
104:                           break;
105:                         case 8:         // Got framing error. Wait here for mark
106:                           if(mark) state=0; // Got mark after framing error. Go back to waitinf for start
107:                           break;
108:                       }    
109:                   }
110:                   return result;
111:                 }
112:                 
113:                 const uint8_t AsciiToBaudotTable[]={
114:                 // Index is ASCII code (0..127). 5 LSB of data is Baudot code, transmitted
115:                 // LSB first. MSB is set if FIGS is required.
116:                   0x00,       // ASCII null. Send blank key
117:                   0x00,       // ASCII SOH, send blank key 
118:                   0x00,       // ASCII STX, send blank key
119:                   0x00,       // ASCII ETX, send blank key
120:                   0x00,       // ASCII EOT
121:                   0x00,       // ASCII ENQ. semd blank key
122:                   0x00,       // ASCII ACK, send blank key
123:                   0x85,       // ASCII Bell.FIGS S
124:                   0x00,       // ASCII BS, send blank key
125:                   0x00,       // ASCII HT, send blank key
126:                   0x02,       // Line feed
127:                   0x00,       // ASCII VT, send blank key
128:                   0x00,       // ASCII FF, send blank key
129:                   0x08,       // Carriage return
130:                   0x00,       // ASCII SO, send blank key
131:                   0x00,       // ASCII SI, send blank key
132:                   0x00,       // ASCII DLE, send blank key
133:                   0x00,       // ASCII DC1, send blank key
134:                   0x00,       // ASCII DC2, send blank key
135:                   0x00,       // ASCII DC3, send blank key
136:                   0x00,       // ASCII DC4, send blank key
137:                   0x00,       // ASCII NAK, send blank key
138:                   0x00,       // ASCII SYN, send blank key
139:                   0x00,       // ASCII ETB, send blank key
140:                   0x00,       // ASCII CAN, send blank key
141:                   0x00,       // ASCII EM, send blank key
142:                   0x00,       // ASCII SUB, send blank key
143:                   0x00,       // ASCII ESC, send blank key, but will be trapped to change UartDest back to CLI
144:                   0x00,       // ASCII FS, send blank key
145:                   0x00,       // ASCII GS, send blank key
146:                   0x00,       // ASCII RS, send blank key
147:                   0x00,       // ASCII US, send blank key
148:                   0x04,       // Space
149:                   0x8d,       // Exclamation point, FIGS 0x0d
150:                   0x91,       // Quote, FIGS 0x81
151:                   0x94,       // #, FIGS 0x84
152:                   0x89,       // $, FIGS 0x09
153:                   0x00,       // ASCII percent sign, send blank key
154:                   0x9a,       // &, FIGS 0x8a
155:                   0x8b,       // Apostrophe, FIGS 0x0b
156:                   0x8f,       // Open paren
157:                   0x92,       // Close paren
158:                   0x00,       // ASCII *, send blank key
159:                   0x00,       // ASCII plus, send blank key
160:                   0x8c,       // comma, FIGS 0x0c
161:                   0x83,       // hyphen
162:                   0x9c,       // period
163:                   0x9d,       // slash
164:                   0x96,       // zero
165:                   0x97,       // one
166:                   0x93,       // two
167:                   0x81,       // three
168:                   0x8a,       // four
169:                   0x90,       // five
170:                   0x95,       // six
171:                   0x87,       // seven
172:                   0x86,       // eight
173:                   0x98,       // nine
174:                   0x8e,       // colon
175:                   0x9e,       // semicolon
176:                   0x00,       // < Send blank key
177:                   0x00,       // = Send blank key
178:                   0x00,       // > Send blank key
179:                   0x99,       // ? FIGS 0x18
180:                   0x00,       // @ Send blank key
181:                   0x03,       // A
182:                   0x19,       // B
183:                   0x0e,       // C
184:                   0x09,       // D
185:                   0x01,       // E
186:                   0x0d,       // F
187:                   0x1a,       // G
188:                   0x14,       // H
189:                   0x06,       // I
190:                   0x0b,       // J
191:                   0x0f,       // K
192:                   0x12,       // L
193:                   0x1c,       // M
194:                   0x0c,       // N
195:                   0x18,       // O
196:                   0x16,       // P
197:                   0x17,       // Q
198:                   0x0a,       // R
199:                   0x05,       // S
200:                   0x10,       // T
201:                   0x07,       // U
202:                   0x1e,       // V
203:                   0x13,       // W
204:                   0x1d,       // X
205:                   0x15,       // Y
206:                   0x11        // Z
207:                 };        
208:                         
209:                        
210:                 int BaudotUartTxOut=1;
211:                 
212:                 void BaudotUartTx(void){
213:                   // If UartDest is modem, pull ASCII characters from the UART FIFO, convert to 
214:                   // Baudot, and make available to AFSK Generator. Call 8,000 times per second.
215:                   static int state=0;
216:                   uint8_t AsciiChar;
217:                   static uint8_t BaudotChar;
218:                   static uint32_t CallCount=0;
219:                   static uint32_t BitTimeCallCount;
220:                   static int Figs=0;          // non-zero if we are in FIGS
221:                   if(UartDest==modem){         // Use UART RX data here instead of command interp
222:                     if(CallCount>0){
223:                       CallCount--;            // Count down at 8,000 per second
224:                     }else{                    // Time to do something!
225:                       switch(state){
226:                         default:
227:                         case 0:                 // See if there is a character to send
228:                           if(0!=UART1_ReadCountGet()){  // There is something to transmit
229:                             BitTimeCallCount=(uint32_t)(8000.0/UserConfig.BaudRate);    // How many calls for one bit time
230:                             UART1_Read(&AsciiChar,1);    // Get 1 character to AsciiChar
231:                             if(AsciiChar>0x60) AsciiChar-=0x20; // Shift lower case to upper case
232:                             if(AsciiChar<sizeof(AsciiToBaudotTable)){    // Prevent running off end of array
233:                               if(AsciiChar==0x1b){                      // Escape
234:                                 UartDest=CLI;                           // Go back to command interpreter
235:                                 PrintString("\r\n\nReturning to CLI\r\n\n>");
236:                               }else{
237:                                 BaudotChar=AsciiToBaudotTable[AsciiChar]; // Get baudot code
238:                                 if(BaudotChar!=0){        // Valid character
239:                                   if((0x80==(0x80 & BaudotChar))  && (Figs==0)){
240:                                     state=200;      // Go send FIGS
241:                                   }else{
242:                                     if((0== (0x80 & BaudotChar)) && (Figs==1)){
243:                                       state=300;      // Go send LTRS
244:                                     }else{
245:                                       state=100;       // Go send character
246:                                     }  
247:                                   }
248:                                 } // end char!=0  
249:                               } // end else not escape
250:                             }
251:                           }// end if have character
252:                           break;
253:                         case 100:                 // Send BaudotChar
254:                           if(BaudotChar==4){      // Space character
255:                             Figs=0;               // Assume printer does unshift on space
256:                           }
257:                           BaudotUartTxOut=0;      // Begin start bit
258:                           state++;                // Come to send D0
259:                           CallCount=BitTimeCallCount; // Come back in one bit time
260:                           break;
261:                         case 101:                 // Send D0
262:                           BaudotUartTxOut = (1 & BaudotChar); // Output non-zero if D0 high
263:                           state++;
264:                           CallCount=BitTimeCallCount;
265:                           break;
266:                         case 102:                 // Send D1
267:                           BaudotUartTxOut = (2 & BaudotChar);
268:                           state++;
269:                           CallCount=BitTimeCallCount;
270:                           break;
271:                         case 103:                 // Send D2
272:                           BaudotUartTxOut = (4 & BaudotChar);
273:                           state++;
274:                           CallCount=BitTimeCallCount;
275:                           break;
276:                         case 104:                 // Send D3
277:                           BaudotUartTxOut = (8 & BaudotChar);
278:                           state++;
279:                           CallCount=BitTimeCallCount;
280:                           break;
281:                         case 105:                 // Send D4
282:                           BaudotUartTxOut = (0x10 & BaudotChar);
283:                           state++;
284:                           CallCount=BitTimeCallCount;
285:                           break;
286:                         case 106:                // Send stop bit
287:                           BaudotUartTxOut = 1;
288:                           if(BaudotChar==0x08){   // It was CR, append LF
289:                             PrintChar('\n');      // Send newline to terminal
290:                             BaudotChar=2;         // Baudot line feed
291:                             state=100;            // Go send it
292:                           }else{
293:                             state=0;              // Go back to waiting for next character
294:                           }  
295:                           CallCount = 3 * BitTimeCallCount / 2; // 1.5 stop bits
296:                           break;
297:                         case 200:               // Send FIGS
298:                           BaudotUartTxOut=0;      // Begin start bit
299:                           state++;                // Come to send D0
300:                           CallCount=BitTimeCallCount; // Come back in one bit time
301:                           break;
302:                         case 201:  
303:                           BaudotUartTxOut=1;      // D0
304:                           state++;                // Come to send D1
305:                           CallCount=BitTimeCallCount; // Come back in one bit time
306:                           break;
307:                         case 202:  
308:                           BaudotUartTxOut=1;      // D1
309:                           state++;                // Come to send D2
310:                           CallCount=BitTimeCallCount; // Come back in one bit time
311:                           break;
312:                         case 203:  
313:                           BaudotUartTxOut=0;      // D2
314:                           state++;                // Come to send D3
315:                           CallCount=BitTimeCallCount; // Come back in one bit time
316:                           break;
317:                         case 204:  
318:                           BaudotUartTxOut=1;      // D3
319:                           state++;                // Come to send D4
320:                           CallCount=BitTimeCallCount; // Come back in one bit time
321:                           break;
322:                         case 205:  
323:                           BaudotUartTxOut=1;      // D4
324:                           state++;                // Come to send stop bit
325:                           CallCount=BitTimeCallCount; // Come back in one bit time
326:                           break;
327:                         case 206:               // Send stop bit
328:                           BaudotUartTxOut = 1;
329:                           Figs=1;               // Flag that we are in figs
330:                           state=100;              // Go send the character needing FIGS
331:                           CallCount = 13 * BitTimeCallCount / 2; // 5 data, 1.5 stop  = 3/2 bit times
332:                           break;     
333:                         case 300:               // Send LTRS  
334:                           BaudotUartTxOut=0;      // Begin start bit
335:                           state++;                // Come to send D0
336:                           CallCount=BitTimeCallCount; // Come back in one bit time
337:                           break;
338:                         case 301:  
339:                           BaudotUartTxOut=1;      // D0 through D4 and stop, all mark
340:                           state=100;              // Bo send character that needed LTRS
341:                           Figs=0;                 // Flag that we are in LTRS
342:                           CallCount=13*BitTimeCallCount/2; // Come back in one bit time
343:                           break;
344:                       } // end switch
345:                     } // End else CallCount timeout
346:                   }  // End destination check
347:                 }  
348:                   
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D007AF8  27BDFFE0   ADDIU SP, SP, -32
9D007AFC  AFBF001C   SW RA, 28(SP)
9D007B00  AFBE0018   SW FP, 24(SP)
9D007B04  03A0F025   OR FP, SP, ZERO
9D007B08  8F838078   LW V1, -32648(GP)
9D007B0C  24020001   ADDIU V0, ZERO, 1
9D007B10  14620154   BNE V1, V0, 0x9D008064
9D007B14  00000000   NOP
9D007B18  8F828090   LW V0, -32624(GP)
9D007B1C  10400006   BEQ V0, ZERO, 0x9D007B38
9D007B20  00000000   NOP
9D007B24  8F828090   LW V0, -32624(GP)
9D007B28  2442FFFF   ADDIU V0, V0, -1
9D007B2C  AF828090   SW V0, -32624(GP)
9D007B30  10000150   BEQ ZERO, ZERO, 0x9D008074
9D007B34  00000000   NOP
9D007B38  8F828094   LW V0, -32620(GP)
9D007B3C  240300C8   ADDIU V1, ZERO, 200
9D007B40  104300ED   BEQ V0, V1, 0x9D007EF8
9D007B44  00000000   NOP
9D007B48  284300C9   SLTI V1, V0, 201
9D007B4C  1060001D   BEQ V1, ZERO, 0x9D007BC4
9D007B50  00000000   NOP
9D007B54  24030067   ADDIU V1, ZERO, 103
9D007B58  104300B1   BEQ V0, V1, 0x9D007E20
9D007B5C  00000000   NOP
9D007B60  28430068   SLTI V1, V0, 104
9D007B64  1060000C   BEQ V1, ZERO, 0x9D007B98
9D007B68  00000000   NOP
9D007B6C  24030065   ADDIU V1, ZERO, 101
9D007B70  10430097   BEQ V0, V1, 0x9D007DD0
9D007B74  00000000   NOP
9D007B78  28430066   SLTI V1, V0, 102
9D007B7C  1060009E   BEQ V1, ZERO, 0x9D007DF8
9D007B80  00000000   NOP
9D007B84  24030064   ADDIU V1, ZERO, 100
9D007B88  10430084   BEQ V0, V1, 0x9D007D9C
9D007B8C  00000000   NOP
9D007B90  10000026   BEQ ZERO, ZERO, 0x9D007C2C
9D007B94  00000000   NOP
9D007B98  24030069   ADDIU V1, ZERO, 105
9D007B9C  104300B4   BEQ V0, V1, 0x9D007E70
9D007BA0  00000000   NOP
9D007BA4  28430069   SLTI V1, V0, 105
9D007BA8  146000A7   BNE V1, ZERO, 0x9D007E48
9D007BAC  00000000   NOP
9D007BB0  2403006A   ADDIU V1, ZERO, 106
9D007BB4  104300B8   BEQ V0, V1, 0x9D007E98
9D007BB8  00000000   NOP
9D007BBC  1000001B   BEQ ZERO, ZERO, 0x9D007C2C
9D007BC0  00000000   NOP
9D007BC4  240300CC   ADDIU V1, ZERO, 204
9D007BC8  104300ED   BEQ V0, V1, 0x9D007F80
9D007BCC  00000000   NOP
9D007BD0  284300CD   SLTI V1, V0, 205
9D007BD4  10600009   BEQ V1, ZERO, 0x9D007BFC
9D007BD8  00000000   NOP
9D007BDC  240300CA   ADDIU V1, ZERO, 202
9D007BE0  104300D6   BEQ V0, V1, 0x9D007F3C
9D007BE4  00000000   NOP
9D007BE8  284200CB   SLTI V0, V0, 203
9D007BEC  104000DC   BEQ V0, ZERO, 0x9D007F60
9D007BF0  00000000   NOP
9D007BF4  100000C8   BEQ ZERO, ZERO, 0x9D007F18
9D007BF8  00000000   NOP
9D007BFC  240300CE   ADDIU V1, ZERO, 206
9D007C00  104300F1   BEQ V0, V1, 0x9D007FC8
9D007C04  00000000   NOP
9D007C08  284300CE   SLTI V1, V0, 206
9D007C0C  146000E5   BNE V1, ZERO, 0x9D007FA4
9D007C10  00000000   NOP
9D007C14  2403012C   ADDIU V1, ZERO, 300
9D007C18  104300FB   BEQ V0, V1, 0x9D008008
9D007C1C  00000000   NOP
9D007C20  2403012D   ADDIU V1, ZERO, 301
9D007C24  10430100   BEQ V0, V1, 0x9D008028
9D007C28  00000000   NOP
9D007C2C  0F403FC1   JAL UART1_ReadCountGet
9D007C30  00000000   NOP
9D007C34  1040010E   BEQ V0, ZERO, 0x9D008070
9D007C38  00000000   NOP
9D007C3C  3C028000   LUI V0, -32768
9D007C40  24420230   ADDIU V0, V0, 560
9D007C44  D4400020   LDC1 F0, 32(V0)
9D007C48  3C029D01   LUI V0, -25343
9D007C4C  D44103E8   LDC1 F1, 1000(V0)
9D007C50  46200803   DIV.D F0, F1, F0
9D007C54  3C029D01   LUI V0, -25343
9D007C58  D44103F0   LDC1 F1, 1008(V0)
9D007C5C  4620083E   C.LE.D F1, F0
9D007C60  45010005   BC1T 0x9D007C78
9D007C64  00000000   NOP
9D007C68  4620000D   TRUNC.W.D F0, F0
9D007C6C  44020000   MFC1 V0, F0
9D007C70  10000006   BEQ ZERO, ZERO, 0x9D007C8C
9D007C74  00000000   NOP
9D007C78  46210001   SUB.D F0, F0, F1
9D007C7C  3C038000   LUI V1, -32768
9D007C80  4620000D   TRUNC.W.D F0, F0
9D007C84  44020000   MFC1 V0, F0
9D007C88  00431025   OR V0, V0, V1
9D007C8C  AF828098   SW V0, -32616(GP)
9D007C90  24050001   ADDIU A1, ZERO, 1
9D007C94  27C20010   ADDIU V0, FP, 16
9D007C98  00402025   OR A0, V0, ZERO
9D007C9C  0F403346   JAL UART1_Read
9D007CA0  00000000   NOP
9D007CA4  93C20010   LBU V0, 16(FP)
9D007CA8  2C420061   SLTIU V0, V0, 97
9D007CAC  14400005   BNE V0, ZERO, 0x9D007CC4
9D007CB0  00000000   NOP
9D007CB4  93C20010   LBU V0, 16(FP)
9D007CB8  2442FFE0   ADDIU V0, V0, -32
9D007CBC  304200FF   ANDI V0, V0, 255
9D007CC0  A3C20010   SB V0, 16(FP)
9D007CC4  93C20010   LBU V0, 16(FP)
9D007CC8  2C42005B   SLTIU V0, V0, 91
9D007CCC  104000E8   BEQ V0, ZERO, 0x9D008070
9D007CD0  00000000   NOP
9D007CD4  93C30010   LBU V1, 16(FP)
9D007CD8  2402001B   ADDIU V0, ZERO, 27
9D007CDC  14620008   BNE V1, V0, 0x9D007D00
9D007CE0  00000000   NOP
9D007CE4  AF808078   SW ZERO, -32648(GP)
9D007CE8  3C029D01   LUI V0, -25343
9D007CEC  244403CC   ADDIU A0, V0, 972
9D007CF0  0F404466   JAL PrintString
9D007CF4  00000000   NOP
9D007CF8  100000DD   BEQ ZERO, ZERO, 0x9D008070
9D007CFC  00000000   NOP
9D007D00  93C20010   LBU V0, 16(FP)
9D007D04  00401825   OR V1, V0, ZERO
9D007D08  3C029D01   LUI V0, -25343
9D007D0C  24420370   ADDIU V0, V0, 880
9D007D10  00621021   ADDU V0, V1, V0
9D007D14  90420000   LBU V0, 0(V0)
9D007D18  A382809C   SB V0, -32612(GP)
9D007D1C  9382809C   LBU V0, -32612(GP)
9D007D20  104000D3   BEQ V0, ZERO, 0x9D008070
9D007D24  00000000   NOP
9D007D28  9382809C   LBU V0, -32612(GP)
9D007D2C  7C021420   SEB V0, V0
9D007D30  04410008   BGEZ V0, 0x9D007D54
9D007D34  00000000   NOP
9D007D38  8F8280A0   LW V0, -32608(GP)
9D007D3C  14400005   BNE V0, ZERO, 0x9D007D54
9D007D40  00000000   NOP
9D007D44  240200C8   ADDIU V0, ZERO, 200
9D007D48  AF828094   SW V0, -32620(GP)
9D007D4C  10000011   BEQ ZERO, ZERO, 0x9D007D94
9D007D50  00000000   NOP
9D007D54  9382809C   LBU V0, -32612(GP)
9D007D58  7C021420   SEB V0, V0
9D007D5C  04400009   BLTZ V0, 0x9D007D84
9D007D60  00000000   NOP
9D007D64  8F8380A0   LW V1, -32608(GP)
9D007D68  24020001   ADDIU V0, ZERO, 1
9D007D6C  14620005   BNE V1, V0, 0x9D007D84
9D007D70  00000000   NOP
9D007D74  2402012C   ADDIU V0, ZERO, 300
9D007D78  AF828094   SW V0, -32620(GP)
9D007D7C  10000005   BEQ ZERO, ZERO, 0x9D007D94
9D007D80  00000000   NOP
9D007D84  24020064   ADDIU V0, ZERO, 100
9D007D88  AF828094   SW V0, -32620(GP)
9D007D8C  100000B8   BEQ ZERO, ZERO, 0x9D008070
9D007D90  00000000   NOP
9D007D94  100000B6   BEQ ZERO, ZERO, 0x9D008070
9D007D98  00000000   NOP
9D007D9C  9383809C   LBU V1, -32612(GP)
9D007DA0  24020004   ADDIU V0, ZERO, 4
9D007DA4  14620002   BNE V1, V0, 0x9D007DB0
9D007DA8  00000000   NOP
9D007DAC  AF8080A0   SW ZERO, -32608(GP)
9D007DB0  AF808014   SW ZERO, -32748(GP)
9D007DB4  8F828094   LW V0, -32620(GP)
9D007DB8  24420001   ADDIU V0, V0, 1
9D007DBC  AF828094   SW V0, -32620(GP)
9D007DC0  8F828098   LW V0, -32616(GP)
9D007DC4  AF828090   SW V0, -32624(GP)
9D007DC8  100000AA   BEQ ZERO, ZERO, 0x9D008074
9D007DCC  00000000   NOP
9D007DD0  9382809C   LBU V0, -32612(GP)
9D007DD4  30420001   ANDI V0, V0, 1
9D007DD8  AF828014   SW V0, -32748(GP)
9D007DDC  8F828094   LW V0, -32620(GP)
9D007DE0  24420001   ADDIU V0, V0, 1
9D007DE4  AF828094   SW V0, -32620(GP)
9D007DE8  8F828098   LW V0, -32616(GP)
9D007DEC  AF828090   SW V0, -32624(GP)
9D007DF0  100000A0   BEQ ZERO, ZERO, 0x9D008074
9D007DF4  00000000   NOP
9D007DF8  9382809C   LBU V0, -32612(GP)
9D007DFC  30420002   ANDI V0, V0, 2
9D007E00  AF828014   SW V0, -32748(GP)
9D007E04  8F828094   LW V0, -32620(GP)
9D007E08  24420001   ADDIU V0, V0, 1
9D007E0C  AF828094   SW V0, -32620(GP)
9D007E10  8F828098   LW V0, -32616(GP)
9D007E14  AF828090   SW V0, -32624(GP)
9D007E18  10000096   BEQ ZERO, ZERO, 0x9D008074
9D007E1C  00000000   NOP
9D007E20  9382809C   LBU V0, -32612(GP)
9D007E24  30420004   ANDI V0, V0, 4
9D007E28  AF828014   SW V0, -32748(GP)
9D007E2C  8F828094   LW V0, -32620(GP)
9D007E30  24420001   ADDIU V0, V0, 1
9D007E34  AF828094   SW V0, -32620(GP)
9D007E38  8F828098   LW V0, -32616(GP)
9D007E3C  AF828090   SW V0, -32624(GP)
9D007E40  1000008C   BEQ ZERO, ZERO, 0x9D008074
9D007E44  00000000   NOP
9D007E48  9382809C   LBU V0, -32612(GP)
9D007E4C  30420008   ANDI V0, V0, 8
9D007E50  AF828014   SW V0, -32748(GP)
9D007E54  8F828094   LW V0, -32620(GP)
9D007E58  24420001   ADDIU V0, V0, 1
9D007E5C  AF828094   SW V0, -32620(GP)
9D007E60  8F828098   LW V0, -32616(GP)
9D007E64  AF828090   SW V0, -32624(GP)
9D007E68  10000082   BEQ ZERO, ZERO, 0x9D008074
9D007E6C  00000000   NOP
9D007E70  9382809C   LBU V0, -32612(GP)
9D007E74  30420010   ANDI V0, V0, 16
9D007E78  AF828014   SW V0, -32748(GP)
9D007E7C  8F828094   LW V0, -32620(GP)
9D007E80  24420001   ADDIU V0, V0, 1
9D007E84  AF828094   SW V0, -32620(GP)
9D007E88  8F828098   LW V0, -32616(GP)
9D007E8C  AF828090   SW V0, -32624(GP)
9D007E90  10000078   BEQ ZERO, ZERO, 0x9D008074
9D007E94  00000000   NOP
9D007E98  24020001   ADDIU V0, ZERO, 1
9D007E9C  AF828014   SW V0, -32748(GP)
9D007EA0  9383809C   LBU V1, -32612(GP)
9D007EA4  24020008   ADDIU V0, ZERO, 8
9D007EA8  1462000A   BNE V1, V0, 0x9D007ED4
9D007EAC  00000000   NOP
9D007EB0  2404000A   ADDIU A0, ZERO, 10
9D007EB4  0F4044E7   JAL PrintChar
9D007EB8  00000000   NOP
9D007EBC  24020002   ADDIU V0, ZERO, 2
9D007EC0  A382809C   SB V0, -32612(GP)
9D007EC4  24020064   ADDIU V0, ZERO, 100
9D007EC8  AF828094   SW V0, -32620(GP)
9D007ECC  10000002   BEQ ZERO, ZERO, 0x9D007ED8
9D007ED0  00000000   NOP
9D007ED4  AF808094   SW ZERO, -32620(GP)
9D007ED8  8F838098   LW V1, -32616(GP)
9D007EDC  00601025   OR V0, V1, ZERO
9D007EE0  00021040   SLL V0, V0, 1
9D007EE4  00431021   ADDU V0, V0, V1
9D007EE8  00021042   SRL V0, V0, 1
9D007EEC  AF828090   SW V0, -32624(GP)
9D007EF0  10000060   BEQ ZERO, ZERO, 0x9D008074
9D007EF4  00000000   NOP
9D007EF8  AF808014   SW ZERO, -32748(GP)
9D007EFC  8F828094   LW V0, -32620(GP)
9D007F00  24420001   ADDIU V0, V0, 1
9D007F04  AF828094   SW V0, -32620(GP)
9D007F08  8F828098   LW V0, -32616(GP)
9D007F0C  AF828090   SW V0, -32624(GP)
9D007F10  10000058   BEQ ZERO, ZERO, 0x9D008074
9D007F14  00000000   NOP
9D007F18  24020001   ADDIU V0, ZERO, 1
9D007F1C  AF828014   SW V0, -32748(GP)
9D007F20  8F828094   LW V0, -32620(GP)
9D007F24  24420001   ADDIU V0, V0, 1
9D007F28  AF828094   SW V0, -32620(GP)
9D007F2C  8F828098   LW V0, -32616(GP)
9D007F30  AF828090   SW V0, -32624(GP)
9D007F34  1000004F   BEQ ZERO, ZERO, 0x9D008074
9D007F38  00000000   NOP
9D007F3C  24020001   ADDIU V0, ZERO, 1
9D007F40  AF828014   SW V0, -32748(GP)
9D007F44  8F828094   LW V0, -32620(GP)
9D007F48  24420001   ADDIU V0, V0, 1
9D007F4C  AF828094   SW V0, -32620(GP)
9D007F50  8F828098   LW V0, -32616(GP)
9D007F54  AF828090   SW V0, -32624(GP)
9D007F58  10000046   BEQ ZERO, ZERO, 0x9D008074
9D007F5C  00000000   NOP
9D007F60  AF808014   SW ZERO, -32748(GP)
9D007F64  8F828094   LW V0, -32620(GP)
9D007F68  24420001   ADDIU V0, V0, 1
9D007F6C  AF828094   SW V0, -32620(GP)
9D007F70  8F828098   LW V0, -32616(GP)
9D007F74  AF828090   SW V0, -32624(GP)
9D007F78  1000003E   BEQ ZERO, ZERO, 0x9D008074
9D007F7C  00000000   NOP
9D007F80  24020001   ADDIU V0, ZERO, 1
9D007F84  AF828014   SW V0, -32748(GP)
9D007F88  8F828094   LW V0, -32620(GP)
9D007F8C  24420001   ADDIU V0, V0, 1
9D007F90  AF828094   SW V0, -32620(GP)
9D007F94  8F828098   LW V0, -32616(GP)
9D007F98  AF828090   SW V0, -32624(GP)
9D007F9C  10000035   BEQ ZERO, ZERO, 0x9D008074
9D007FA0  00000000   NOP
9D007FA4  24020001   ADDIU V0, ZERO, 1
9D007FA8  AF828014   SW V0, -32748(GP)
9D007FAC  8F828094   LW V0, -32620(GP)
9D007FB0  24420001   ADDIU V0, V0, 1
9D007FB4  AF828094   SW V0, -32620(GP)
9D007FB8  8F828098   LW V0, -32616(GP)
9D007FBC  AF828090   SW V0, -32624(GP)
9D007FC0  1000002C   BEQ ZERO, ZERO, 0x9D008074
9D007FC4  00000000   NOP
9D007FC8  24020001   ADDIU V0, ZERO, 1
9D007FCC  AF828014   SW V0, -32748(GP)
9D007FD0  24020001   ADDIU V0, ZERO, 1
9D007FD4  AF8280A0   SW V0, -32608(GP)
9D007FD8  24020064   ADDIU V0, ZERO, 100
9D007FDC  AF828094   SW V0, -32620(GP)
9D007FE0  8F838098   LW V1, -32616(GP)
9D007FE4  00601025   OR V0, V1, ZERO
9D007FE8  00021040   SLL V0, V0, 1
9D007FEC  00431021   ADDU V0, V0, V1
9D007FF0  00021080   SLL V0, V0, 2
9D007FF4  00431021   ADDU V0, V0, V1
9D007FF8  00021042   SRL V0, V0, 1
9D007FFC  AF828090   SW V0, -32624(GP)
9D008000  1000001C   BEQ ZERO, ZERO, 0x9D008074
9D008004  00000000   NOP
9D008008  AF808014   SW ZERO, -32748(GP)
9D00800C  8F828094   LW V0, -32620(GP)
9D008010  24420001   ADDIU V0, V0, 1
9D008014  AF828094   SW V0, -32620(GP)
9D008018  8F828098   LW V0, -32616(GP)
9D00801C  AF828090   SW V0, -32624(GP)
9D008020  10000014   BEQ ZERO, ZERO, 0x9D008074
9D008024  00000000   NOP
9D008028  24020001   ADDIU V0, ZERO, 1
9D00802C  AF828014   SW V0, -32748(GP)
9D008030  24020064   ADDIU V0, ZERO, 100
9D008034  AF828094   SW V0, -32620(GP)
9D008038  AF8080A0   SW ZERO, -32608(GP)
9D00803C  8F838098   LW V1, -32616(GP)
9D008040  00601025   OR V0, V1, ZERO
9D008044  00021040   SLL V0, V0, 1
9D008048  00431021   ADDU V0, V0, V1
9D00804C  00021080   SLL V0, V0, 2
9D008050  00431021   ADDU V0, V0, V1
9D008054  00021042   SRL V0, V0, 1
9D008058  AF828090   SW V0, -32624(GP)
9D00805C  10000005   BEQ ZERO, ZERO, 0x9D008074
9D008060  00000000   NOP
9D008064  00000000   NOP
9D008068  10000002   BEQ ZERO, ZERO, 0x9D008074
9D00806C  00000000   NOP
9D008070  00000000   NOP
9D008074  00000000   NOP
9D008078  03C0E825   OR SP, FP, ZERO
9D00807C  8FBF001C   LW RA, 28(SP)
9D008080  8FBE0018   LW FP, 24(SP)
9D008084  27BD0020   ADDIU SP, SP, 32
9D008088  03E00008   JR RA
9D00808C  00000000   NOP
9D00960C  27BDFFE0   ADDIU SP, SP, -32
9D009610  AFBF001C   SW RA, 28(SP)
9D009614  AFBE0018   SW FP, 24(SP)
9D009618  03A0F025   OR FP, SP, ZERO
9D00961C  00801025   OR V0, A0, ZERO
9D009620  A3C20020   SB V0, 32(FP)
9D009624  A3C00010   SB ZERO, 16(FP)
9D009628  8F828084   LW V0, -32636(GP)
9D00962C  10400006   BEQ V0, ZERO, 0x9D009648
9D009630  00000000   NOP
9D009634  8F828084   LW V0, -32636(GP)
9D009638  2442FFFF   ADDIU V0, V0, -1
9D00963C  AF828084   SW V0, -32636(GP)
9D009640  100000CE   BEQ ZERO, ZERO, 0x9D00997C
9D009644  00000000   NOP
9D009648  8F828088   LW V0, -32632(GP)
9D00964C  2C430009   SLTIU V1, V0, 9
9D009650  10600011   BEQ V1, ZERO, __jend_BaudotUartRx_6
9D009654  00000000   NOP
9D009658  00021880   SLL V1, V0, 2
9D00965C  3C029D01   LUI V0, -25343
9D009660  24429674   ADDIU V0, V0, -27020
9D009664  00621021   ADDU V0, V1, V0
9D009668  8C420000   LW V0, 0(V0)
9D00966C  00400008   JR V0
9D009670  00000000   NOP
9D009698  93C20020   LBU V0, 32(FP)
9D0096A4  104000B1   BEQ V0, ZERO, 0x9D00996C
9D0096A8  00000000   NOP
9D0096AC  8F828088   LW V0, -32632(GP)
9D0096B0  24420001   ADDIU V0, V0, 1
9D0096B4  AF828088   SW V0, -32632(GP)
9D0096B8  24020058   ADDIU V0, ZERO, 88
9D0096BC  AF828084   SW V0, -32636(GP)
9D0096C0  100000AA   BEQ ZERO, ZERO, 0x9D00996C
9D0096C4  00000000   NOP
9D0096C8  93C20020   LBU V0, 32(FP)
9D0096CC  38420001   XORI V0, V0, 1
9D0096D0  304200FF   ANDI V0, V0, 255
9D0096D4  1040000C   BEQ V0, ZERO, 0x9D009708
9D0096D8  00000000   NOP
9D0096DC  A380808C   SB ZERO, -32628(GP)
9D0096E0  8F82807C   LW V0, -32644(GP)
9D0096E4  24420001   ADDIU V0, V0, 1
9D0096E8  AF82807C   SW V0, -32644(GP)
9D0096EC  8F828088   LW V0, -32632(GP)
9D0096F0  24420001   ADDIU V0, V0, 1
9D0096F4  AF828088   SW V0, -32632(GP)
9D0096F8  240200B0   ADDIU V0, ZERO, 176
9D0096FC  AF828084   SW V0, -32636(GP)
9D009700  1000009E   BEQ ZERO, ZERO, 0x9D00997C
9D009704  00000000   NOP
9D009708  AF808088   SW ZERO, -32632(GP)
9D00970C  1000009B   BEQ ZERO, ZERO, 0x9D00997C
9D009710  00000000   NOP
9D009714  93C20020   LBU V0, 32(FP)
9D009718  10400005   BEQ V0, ZERO, 0x9D009730
9D00971C  00000000   NOP
9D009720  9382808C   LBU V0, -32628(GP)
9D009724  34420001   ORI V0, V0, 1
9D009728  304200FF   ANDI V0, V0, 255
9D00972C  A382808C   SB V0, -32628(GP)
9D009730  8F828088   LW V0, -32632(GP)
9D009734  24420001   ADDIU V0, V0, 1
9D009738  AF828088   SW V0, -32632(GP)
9D00973C  240200B0   ADDIU V0, ZERO, 176
9D009740  AF828084   SW V0, -32636(GP)
9D009744  1000008D   BEQ ZERO, ZERO, 0x9D00997C
9D009748  00000000   NOP
9D00974C  93C20020   LBU V0, 32(FP)
9D009750  10400005   BEQ V0, ZERO, 0x9D009768
9D009754  00000000   NOP
9D009758  9382808C   LBU V0, -32628(GP)
9D00975C  34420002   ORI V0, V0, 2
9D009760  304200FF   ANDI V0, V0, 255
9D009764  A382808C   SB V0, -32628(GP)
9D009768  8F828088   LW V0, -32632(GP)
9D00976C  24420001   ADDIU V0, V0, 1
9D009770  AF828088   SW V0, -32632(GP)
9D009774  240200B0   ADDIU V0, ZERO, 176
9D009778  AF828084   SW V0, -32636(GP)
9D00977C  1000007F   BEQ ZERO, ZERO, 0x9D00997C
9D009780  00000000   NOP
9D009784  93C20020   LBU V0, 32(FP)
9D009788  10400005   BEQ V0, ZERO, 0x9D0097A0
9D00978C  00000000   NOP
9D009790  9382808C   LBU V0, -32628(GP)
9D009794  34420004   ORI V0, V0, 4
9D009798  304200FF   ANDI V0, V0, 255
9D00979C  A382808C   SB V0, -32628(GP)
9D0097A0  8F828088   LW V0, -32632(GP)
9D0097A4  24420001   ADDIU V0, V0, 1
9D0097A8  AF828088   SW V0, -32632(GP)
9D0097AC  240200B0   ADDIU V0, ZERO, 176
9D0097B0  AF828084   SW V0, -32636(GP)
9D0097B4  10000071   BEQ ZERO, ZERO, 0x9D00997C
9D0097B8  00000000   NOP
9D0097BC  93C20020   LBU V0, 32(FP)
9D0097C0  10400005   BEQ V0, ZERO, 0x9D0097D8
9D0097C4  00000000   NOP
9D0097C8  9382808C   LBU V0, -32628(GP)
9D0097CC  34420008   ORI V0, V0, 8
9D0097D0  304200FF   ANDI V0, V0, 255
9D0097D4  A382808C   SB V0, -32628(GP)
9D0097D8  8F828088   LW V0, -32632(GP)
9D0097DC  24420001   ADDIU V0, V0, 1
9D0097E0  AF828088   SW V0, -32632(GP)
9D0097E4  240200B0   ADDIU V0, ZERO, 176
9D0097E8  AF828084   SW V0, -32636(GP)
9D0097EC  10000063   BEQ ZERO, ZERO, 0x9D00997C
9D0097F0  00000000   NOP
9D0097F4  93C20020   LBU V0, 32(FP)
9D0097F8  10400005   BEQ V0, ZERO, 0x9D009810
9D0097FC  00000000   NOP
9D009800  9382808C   LBU V0, -32628(GP)
9D009804  34420010   ORI V0, V0, 16
9D009808  304200FF   ANDI V0, V0, 255
9D00980C  A382808C   SB V0, -32628(GP)
9D009810  8F828088   LW V0, -32632(GP)
9D009814  24420001   ADDIU V0, V0, 1
9D009818  AF828088   SW V0, -32632(GP)
9D00981C  240200B0   ADDIU V0, ZERO, 176
9D009820  AF828084   SW V0, -32636(GP)
9D009824  10000055   BEQ ZERO, ZERO, 0x9D00997C
9D009828  00000000   NOP
9D00982C  93C20020   LBU V0, 32(FP)
9D009830  38420001   XORI V0, V0, 1
9D009834  304200FF   ANDI V0, V0, 255
9D009838  10400006   BEQ V0, ZERO, 0x9D009854
9D00983C  00000000   NOP
9D009840  8F828080   LW V0, -32640(GP)
9D009844  24420001   ADDIU V0, V0, 1
9D009848  AF828080   SW V0, -32640(GP)
9D00984C  24020009   ADDIU V0, ZERO, 9
9D009850  AF828088   SW V0, -32632(GP)
9D009854  9382808C   LBU V0, -32628(GP)
9D009858  3042001F   ANDI V0, V0, 31
9D00985C  304200FF   ANDI V0, V0, 255
9D009860  A382808C   SB V0, -32628(GP)
9D009864  9382808C   LBU V0, -32628(GP)
9D009868  24030004   ADDIU V1, ZERO, 4
9D00986C  10430017   BEQ V0, V1, 0x9D0098CC
9D009870  00000000   NOP
9D009874  28430005   SLTI V1, V0, 5
9D009878  10600005   BEQ V1, ZERO, 0x9D009890
9D00987C  00000000   NOP
9D009880  10400028   BEQ V0, ZERO, 0x9D009924
9D009884  00000000   NOP
9D009888  10000011   BEQ ZERO, ZERO, 0x9D0098D0
9D00988C  00000000   NOP
9D009890  2403001B   ADDIU V1, ZERO, 27
9D009894  10430006   BEQ V0, V1, 0x9D0098B0
9D009898  00000000   NOP
9D00989C  2403001F   ADDIU V1, ZERO, 31
9D0098A0  10430007   BEQ V0, V1, 0x9D0098C0
9D0098A4  00000000   NOP
9D0098A8  10000009   BEQ ZERO, ZERO, 0x9D0098D0
9D0098AC  00000000   NOP
9D0098B0  24020001   ADDIU V0, ZERO, 1
9D0098B4  A382808D   SB V0, -32627(GP)
9D0098B8  1000001B   BEQ ZERO, ZERO, 0x9D009928
9D0098BC  00000000   NOP
9D0098C0  A380808D   SB ZERO, -32627(GP)
9D0098C4  10000018   BEQ ZERO, ZERO, 0x9D009928
9D0098C8  00000000   NOP
9D0098CC  A380808D   SB ZERO, -32627(GP)
9D0098D0  9382808D   LBU V0, -32627(GP)
9D0098D4  1040000A   BEQ V0, ZERO, 0x9D009900
9D0098D8  00000000   NOP
9D0098DC  9382808C   LBU V0, -32628(GP)
9D0098E0  00401825   OR V1, V0, ZERO
9D0098E4  3C028000   LUI V0, -32768
9D0098E8  2442354C   ADDIU V0, V0, 13644
9D0098EC  00621021   ADDU V0, V1, V0
9D0098F0  90420000   LBU V0, 0(V0)
9D0098F4  A3C20010   SB V0, 16(FP)
9D0098F8  1000000B   BEQ ZERO, ZERO, 0x9D009928
9D0098FC  00000000   NOP
9D009900  9382808C   LBU V0, -32628(GP)
9D009904  00401825   OR V1, V0, ZERO
9D009908  3C028000   LUI V0, -32768
9D00990C  24423528   ADDIU V0, V0, 13608
9D009910  00621021   ADDU V0, V1, V0
9D009914  90420000   LBU V0, 0(V0)
9D009918  A3C20010   SB V0, 16(FP)
9D00991C  10000002   BEQ ZERO, ZERO, 0x9D009928
9D009920  00000000   NOP
9D009924  00000000   NOP
9D009928  8F838078   LW V1, -32648(GP)
9D00992C  24020001   ADDIU V0, ZERO, 1
9D009930  14620005   BNE V1, V0, 0x9D009948
9D009934  00000000   NOP
9D009938  83C20010   LB V0, 16(FP)
9D00993C  00402025   OR A0, V0, ZERO
9D009940  0F4044E7   JAL PrintChar
9D009944  00000000   NOP
9D009948  AF808088   SW ZERO, -32632(GP)
9D00994C  1000000B   BEQ ZERO, ZERO, 0x9D00997C
9D009950  00000000   NOP
9D009954  93C20020   LBU V0, 32(FP)
9D009958  10400007   BEQ V0, ZERO, 0x9D009978
9D00995C  00000000   NOP
9D009960  AF808088   SW ZERO, -32632(GP)
9D009964  10000004   BEQ ZERO, ZERO, 0x9D009978
9D009968  00000000   NOP
9D00996C  00000000   NOP
9D009970  10000002   BEQ ZERO, ZERO, 0x9D00997C
9D009974  00000000   NOP
9D009978  00000000   NOP
9D00997C  83C20010   LB V0, 16(FP)
9D009980  03C0E825   OR SP, FP, ZERO
9D009984  8FBF001C   LW RA, 28(SP)
9D009988  8FBE0018   LW FP, 24(SP)
9D00998C  27BD0020   ADDIU SP, SP, 32
9D009990  03E00008   JR RA
9D009994  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/autostartkos.c  -------------
1:                   // AutostartKos.c
2:                   
3:                   // Handle autostart and Keyboard Operated Send. Call this 8,000 times per second
4:                   
5:                   #include <stdint.h>
6:                   #include "UserConfig.h"
7:                   #include "AutostartKos.h"
8:                   #include "main.h"     // UartDest
9:                   #include "BaudotUart.h"// Access to BaudotUartTxOut
10:                  
11:                  
12:                  
13:                  
14:                  
15:                  void AutostartKos(double discrim){
16:                    // Pass in discriminator level. We will start motor if discrim is above threshold for
17:                    // at least 80% of a bit time. For KOS, a lockout timer is set whenever the loop is
18:                    // keyed by the demodulator. This prevents triggering KOS on loop current interruptions 
19:                    // due to received data. A lockout timer is required instead of just ignoring loop current
20:                    // interruptions when the demodulator keys the loop since there is a slight delay between
21:                    // the loop being keyed and it being sensed (probably mostly due to the opto isolator).
22:                    static uint32_t AutostartCounter=8000;
23:                    static uint32_t KosCounter=8000;
24:                    static uint32_t KosLockout=0;       // Ignore loop sensor for a period of time after loop keyer sends space
25:                    if(1==TX_LED_Get()){                // We're transmitting. Turn on motor and reload autostart counter
26:                      MOTOR_LED_Set();                  // Front panel motor LED on
27:                      AutostartCounter=8000*UserConfig.AutostartShutdownSeconds;
28:                    }else{                              // Not transmitting        
29:                      if(1==AUTOSTART_LED_Get()){         // Autostart is enabled
30:                        if(1==MOTOR_LED_Get()){           // Motor is on. Figure out when to drop out
31:                          if(discrim>UserConfig.AutostartThresh){ // above threshold, reload counter
32:                            AutostartCounter=8000*UserConfig.AutostartShutdownSeconds;
33:                          }else{
34:                            if(0!=AutostartCounter){
35:                              AutostartCounter--;       // Decrement the counter
36:                            }else{  
37:                              MOTOR_LED_Clear();      // Turn off the front panel LED
38:                            }
39:                          }
40:                        }else{                        // Motor LED off. See if we should start motor
41:                          if(discrim>UserConfig.AutostartThresh){   // Mark present, let counter drop
42:                            if(0==AutostartCounter){  // Mark has been present for 80% of bit time, start motor
43:                              MOTOR_LED_Set();
44:                            }else{                    // Not timed out yet
45:                              AutostartCounter--;
46:                            }
47:                          }else{                      // Mark not present, reload counter with 80% of a bit time
48:                            AutostartCounter=8000*(uint32_t)(0.8/UserConfig.BaudRate); // Require continuous space for 80% of bit time   
49:                          }
50:                        }  
51:                      }
52:                    }
53:                    if(1==MOTOR_LED_Get()){           // LED is on
54:                      AUTOSTARTn_Clear();             // turn on autostart output
55:                    }else{
56:                      AUTOSTARTn_Set();               // Turn off autostart output
57:                    }
58:                    if(1==KOS_LED_Get()){                // Keyboard operated send enabled
59:                      if(1==TX_LED_Get()){              // We are transmitting
60:                        if(((0==UserConfig.NoLoop) && (1==LOOP_SENSE_Get())) || (0==BaudotUartTxOut)){  // Space detected on loop or sw buart
61:                                                        // Ignore loop sense if NoLoop nonzero
62:                          KosCounter=8000*UserConfig.KosDropSeconds;  // Reset counter to drop out later
63:                        }else{                        // mark detected
64:                          if(0==KosCounter){          // We timed out
65:                            TX_LED_Clear();             // Stop transmitting
66:                          }else{                      // have not timed out
67:                            KosCounter--;             // Decrement towards zero
68:                          }
69:                        }  
70:                      }else{                          // Not transmitting, look for space not from keying SSR for 80% of bit time
71:                        if(0==LOOP_KEY_Get()){        // Loop keyed by demod, ignore loop sense for a while
72:                          KosLockout=800;            // Lockout for 100 ms
73:                        }else{
74:                          if(0!=KosLockout) KosLockout--; // Decrement if loop key is mark
75:                        }  
76:                        if(0==KosLockout){            // Loop not keyed by demod recently
77:                          if(0==UserConfig.NoLoop){   // Don't check for space on loop if NoLoop
78:                            if(1==LOOP_SENSE_Get()){  // Got a space  
79:                              TX_LED_Set();         // Start transmitting
80:                            }
81:                          }  
82:                          if(0==BaudotUartTxOut){ // Start transmitting based on data from UART
83:                            TX_LED_Set();
84:                          }
85:                        }  
86:                      }
87:                    }
88:                    if(1==TX_LED_Get()){               // Transmit LED lit
89:                      PTT_Set();                      // Close PTT
90:                    }else{
91:                      PTT_Clear();                    // Open PTT
92:                    }  
93:                  }
94:                  
95:                  
96:                  
97:                   
98:                  /*
99:                    if(discrim<UserConfig.AutostartThresh){
100:                     AutostartCounter=SamplesRequired;   // Below threshold, reload counter
101:                   }else{
102:                     AutostartCounter--;           // Above threshold, decrement counter
103:                     if(0==AutostartCounter){      // We have had a good mark for 80% of a bit time
104:                       MOTOR_LED_Set();            // Turn on the motor front panel LED
105:                     }
106:                   }
107:                   
108:                 }
109:                 
110:                 
111:                 
112:                      if(1==AUTOSTART_LED_Get()){   // Autostart is enabled
113:                         if(DiscrimOut>UserConfig.AutostartThresh){
114:                           AutostartTimer=8000*UserConfig.AutostartShutdownSeconds;
115:                           MOTOR_LED_Set();          // Light the front panel LED
116:                         }else{
117:                           if(AutostartTimer>0){
118:                             AutostartTimer--;   // Decrement towards zero
119:                           }else{
120:                             MOTOR_LED_Clear();  // autostart timed out. Turn off the motor front panel LED
121:                           }
122:                         }
123:                       }
124:                       if(1==MOTOR_LED_Get()){   // The motor LED is on
125:                         AUTOSTARTn_Clear();       // Turn on the motor
126:                       }else{
127:                         AUTOSTARTn_Set();     // Turn off the motor
128:                       }
129:                       if(1==KOS_LED_Get()){     // Keyboard operated send enabled
130:                         if((1==LOOP_KEY_Get()) && (1==LOOP_SENSE_Get()) && (0==TX_LED_Get())){ // Loop key SSR closed, but opto not sensing current
131:                           KosTimer=8000*UserConfig.KosDropSeconds;      // Set dropout timer
132:                           TX_LED_Set();         // Turn on the TX led
133:                           PTT_Set();            // Turn on the PTT LED
134:                         }else{                  // No external device (keyboard) keying loop
135:                           if(KosTimer>0){
136:                             KosTimer--;         // Decrement the timer
137:                           }else{                // It timed out, drop out of tx
138:                             TX_LED_Clear();     // Turn off the LED
139:                             PTT_Clear();        // Turn off PTT
140:                           }
141:                         }
142:                       }
143:                 */
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D009228  27BDFFF8   ADDIU SP, SP, -8
9D00922C  AFBE0004   SW FP, 4(SP)
9D009230  03A0F025   OR FP, SP, ZERO
9D009234  F7CC0008   SDC1 F12, 8(FP)
9D009238  3C02BF86   LUI V0, -16506
9D00923C  8C420120   LW V0, 288(V0)
9D009240  00021202   SRL V0, V0, 8
9D009244  30430001   ANDI V1, V0, 1
9D009248  24020001   ADDIU V0, ZERO, 1
9D00924C  14620010   BNE V1, V0, 0x9D009290
9D009250  00000000   NOP
9D009254  3C02BF86   LUI V0, -16506
9D009258  24030008   ADDIU V1, ZERO, 8
9D00925C  AC430338   SW V1, 824(V0)
9D009260  3C028000   LUI V0, -32768
9D009264  24420230   ADDIU V0, V0, 560
9D009268  8C430040   LW V1, 64(V0)
9D00926C  00601025   OR V0, V1, ZERO
9D009270  00021140   SLL V0, V0, 5
9D009274  00431023   SUBU V0, V0, V1
9D009278  00021080   SLL V0, V0, 2
9D00927C  00431021   ADDU V0, V0, V1
9D009280  00021180   SLL V0, V0, 6
9D009284  AF828038   SW V0, -32712(GP)
9D009288  1000005E   BEQ ZERO, ZERO, 0x9D009404
9D00928C  00000000   NOP
9D009290  3C02BF86   LUI V0, -16506
9D009294  8C420220   LW V0, 544(V0)
9D009298  000213C2   SRL V0, V0, 15
9D00929C  30430001   ANDI V1, V0, 1
9D0092A0  24020001   ADDIU V0, ZERO, 1
9D0092A4  14620057   BNE V1, V0, 0x9D009404
9D0092A8  00000000   NOP
9D0092AC  3C02BF86   LUI V0, -16506
9D0092B0  8C420320   LW V0, 800(V0)
9D0092B4  000210C2   SRL V0, V0, 3
9D0092B8  30430001   ANDI V1, V0, 1
9D0092BC  24020001   ADDIU V0, ZERO, 1
9D0092C0  14620021   BNE V1, V0, 0x9D009348
9D0092C4  00000000   NOP
9D0092C8  3C028000   LUI V0, -32768
9D0092CC  24420230   ADDIU V0, V0, 560
9D0092D0  D4400038   LDC1 F0, 56(V0)
9D0092D4  D7C10008   LDC1 F1, 8(FP)
9D0092D8  4621003C   C.LT.D F0, F1
9D0092DC  4500000D   BC1F 0x9D009314
9D0092E0  00000000   NOP
9D0092E4  3C028000   LUI V0, -32768
9D0092E8  24420230   ADDIU V0, V0, 560
9D0092EC  8C430040   LW V1, 64(V0)
9D0092F0  00601025   OR V0, V1, ZERO
9D0092F4  00021140   SLL V0, V0, 5
9D0092F8  00431023   SUBU V0, V0, V1
9D0092FC  00021080   SLL V0, V0, 2
9D009300  00431021   ADDU V0, V0, V1
9D009304  00021180   SLL V0, V0, 6
9D009308  AF828038   SW V0, -32712(GP)
9D00930C  1000003D   BEQ ZERO, ZERO, 0x9D009404
9D009310  00000000   NOP
9D009314  8F828038   LW V0, -32712(GP)
9D009318  10400006   BEQ V0, ZERO, 0x9D009334
9D00931C  00000000   NOP
9D009320  8F828038   LW V0, -32712(GP)
9D009324  2442FFFF   ADDIU V0, V0, -1
9D009328  AF828038   SW V0, -32712(GP)
9D00932C  10000035   BEQ ZERO, ZERO, 0x9D009404
9D009330  00000000   NOP
9D009334  3C02BF86   LUI V0, -16506
9D009338  24030008   ADDIU V1, ZERO, 8
9D00933C  AC430334   SW V1, 820(V0)
9D009340  10000030   BEQ ZERO, ZERO, 0x9D009404
9D009344  00000000   NOP
9D009348  3C028000   LUI V0, -32768
9D00934C  24420230   ADDIU V0, V0, 560
9D009350  D4400038   LDC1 F0, 56(V0)
9D009354  D7C10008   LDC1 F1, 8(FP)
9D009358  4621013C   C.LT.D 1, F0, F1
9D00935C  4504000E   BC1F 1, 0x9D009398
9D009360  00000000   NOP
9D009364  8F828038   LW V0, -32712(GP)
9D009368  14400006   BNE V0, ZERO, 0x9D009384
9D00936C  00000000   NOP
9D009370  3C02BF86   LUI V0, -16506
9D009374  24030008   ADDIU V1, ZERO, 8
9D009378  AC430338   SW V1, 824(V0)
9D00937C  10000021   BEQ ZERO, ZERO, 0x9D009404
9D009380  00000000   NOP
9D009384  8F828038   LW V0, -32712(GP)
9D009388  2442FFFF   ADDIU V0, V0, -1
9D00938C  AF828038   SW V0, -32712(GP)
9D009390  1000001C   BEQ ZERO, ZERO, 0x9D009404
9D009394  00000000   NOP
9D009398  3C028000   LUI V0, -32768
9D00939C  24420230   ADDIU V0, V0, 560
9D0093A0  D4400020   LDC1 F0, 32(V0)
9D0093A4  3C029D01   LUI V0, -25343
9D0093A8  D4411D50   LDC1 F1, 7504(V0)
9D0093AC  46200803   DIV.D F0, F1, F0
9D0093B0  3C029D01   LUI V0, -25343
9D0093B4  D4411D58   LDC1 F1, 7512(V0)
9D0093B8  46200A3E   C.LE.D 2, F1, F0
9D0093BC  45090005   BC1T 2, 0x9D0093D4
9D0093C0  00000000   NOP
9D0093C4  4620000D   TRUNC.W.D F0, F0
9D0093C8  44030000   MFC1 V1, F0
9D0093CC  10000006   BEQ ZERO, ZERO, 0x9D0093E8
9D0093D0  00000000   NOP
9D0093D4  46210001   SUB.D F0, F0, F1
9D0093D8  3C028000   LUI V0, -32768
9D0093DC  4620000D   TRUNC.W.D F0, F0
9D0093E0  44030000   MFC1 V1, F0
9D0093E4  00621825   OR V1, V1, V0
9D0093E8  00601025   OR V0, V1, ZERO
9D0093EC  00021140   SLL V0, V0, 5
9D0093F0  00431023   SUBU V0, V0, V1
9D0093F4  00021080   SLL V0, V0, 2
9D0093F8  00431021   ADDU V0, V0, V1
9D0093FC  00021180   SLL V0, V0, 6
9D009400  AF828038   SW V0, -32712(GP)
9D009404  3C02BF86   LUI V0, -16506
9D009408  8C420320   LW V0, 800(V0)
9D00940C  000210C2   SRL V0, V0, 3
9D009410  30430001   ANDI V1, V0, 1
9D009414  24020001   ADDIU V0, ZERO, 1
9D009418  14620006   BNE V1, V0, 0x9D009434
9D00941C  00000000   NOP
9D009420  3C02BF86   LUI V0, -16506
9D009424  24030400   ADDIU V1, ZERO, 1024
9D009428  AC430334   SW V1, 820(V0)
9D00942C  10000004   BEQ ZERO, ZERO, 0x9D009440
9D009430  00000000   NOP
9D009434  3C02BF86   LUI V0, -16506
9D009438  24030400   ADDIU V1, ZERO, 1024
9D00943C  AC430338   SW V1, 824(V0)
9D009440  3C02BF86   LUI V0, -16506
9D009444  8C420320   LW V0, 800(V0)
9D009448  00021142   SRL V0, V0, 5
9D00944C  30430001   ANDI V1, V0, 1
9D009450  24020001   ADDIU V0, ZERO, 1
9D009454  14620058   BNE V1, V0, 0x9D0095B8
9D009458  00000000   NOP
9D00945C  3C02BF86   LUI V0, -16506
9D009460  8C420120   LW V0, 288(V0)
9D009464  00021202   SRL V0, V0, 8
9D009468  30430001   ANDI V1, V0, 1
9D00946C  24020001   ADDIU V0, ZERO, 1
9D009470  14620029   BNE V1, V0, 0x9D009518
9D009474  00000000   NOP
9D009478  3C028000   LUI V0, -32768
9D00947C  24420230   ADDIU V0, V0, 560
9D009480  8C420064   LW V0, 100(V0)
9D009484  14400008   BNE V0, ZERO, 0x9D0094A8
9D009488  00000000   NOP
9D00948C  3C02BF86   LUI V0, -16506
9D009490  8C420420   LW V0, 1056(V0)
9D009494  00021182   SRL V0, V0, 6
9D009498  30430001   ANDI V1, V0, 1
9D00949C  24020001   ADDIU V0, ZERO, 1
9D0094A0  10620004   BEQ V1, V0, 0x9D0094B4
9D0094A4  00000000   NOP
9D0094A8  8F828014   LW V0, -32748(GP)
9D0094AC  1440000D   BNE V0, ZERO, 0x9D0094E4
9D0094B0  00000000   NOP
9D0094B4  3C028000   LUI V0, -32768
9D0094B8  24420230   ADDIU V0, V0, 560
9D0094BC  8C430044   LW V1, 68(V0)
9D0094C0  00601025   OR V0, V1, ZERO
9D0094C4  00021140   SLL V0, V0, 5
9D0094C8  00431023   SUBU V0, V0, V1
9D0094CC  00021080   SLL V0, V0, 2
9D0094D0  00431021   ADDU V0, V0, V1
9D0094D4  00021180   SLL V0, V0, 6
9D0094D8  AF82803C   SW V0, -32708(GP)
9D0094DC  10000036   BEQ ZERO, ZERO, 0x9D0095B8
9D0094E0  00000000   NOP
9D0094E4  8F82803C   LW V0, -32708(GP)
9D0094E8  14400006   BNE V0, ZERO, 0x9D009504
9D0094EC  00000000   NOP
9D0094F0  3C02BF86   LUI V0, -16506
9D0094F4  24030100   ADDIU V1, ZERO, 256
9D0094F8  AC430134   SW V1, 308(V0)
9D0094FC  1000002E   BEQ ZERO, ZERO, 0x9D0095B8
9D009500  00000000   NOP
9D009504  8F82803C   LW V0, -32708(GP)
9D009508  2442FFFF   ADDIU V0, V0, -1
9D00950C  AF82803C   SW V0, -32708(GP)
9D009510  10000029   BEQ ZERO, ZERO, 0x9D0095B8
9D009514  00000000   NOP
9D009518  3C02BF86   LUI V0, -16506
9D00951C  8C420420   LW V0, 1056(V0)
9D009520  00021142   SRL V0, V0, 5
9D009524  30420001   ANDI V0, V0, 1
9D009528  14400005   BNE V0, ZERO, 0x9D009540
9D00952C  00000000   NOP
9D009530  24020320   ADDIU V0, ZERO, 800
9D009534  AF8280F8   SW V0, -32520(GP)
9D009538  10000007   BEQ ZERO, ZERO, 0x9D009558
9D00953C  00000000   NOP
9D009540  8F8280F8   LW V0, -32520(GP)
9D009544  10400004   BEQ V0, ZERO, 0x9D009558
9D009548  00000000   NOP
9D00954C  8F8280F8   LW V0, -32520(GP)
9D009550  2442FFFF   ADDIU V0, V0, -1
9D009554  AF8280F8   SW V0, -32520(GP)
9D009558  8F8280F8   LW V0, -32520(GP)
9D00955C  14400016   BNE V0, ZERO, 0x9D0095B8
9D009560  00000000   NOP
9D009564  3C028000   LUI V0, -32768
9D009568  24420230   ADDIU V0, V0, 560
9D00956C  8C420064   LW V0, 100(V0)
9D009570  1440000B   BNE V0, ZERO, 0x9D0095A0
9D009574  00000000   NOP
9D009578  3C02BF86   LUI V0, -16506
9D00957C  8C420420   LW V0, 1056(V0)
9D009580  00021182   SRL V0, V0, 6
9D009584  30430001   ANDI V1, V0, 1
9D009588  24020001   ADDIU V0, ZERO, 1
9D00958C  14620004   BNE V1, V0, 0x9D0095A0
9D009590  00000000   NOP
9D009594  3C02BF86   LUI V0, -16506
9D009598  24030100   ADDIU V1, ZERO, 256
9D00959C  AC430138   SW V1, 312(V0)
9D0095A0  8F828014   LW V0, -32748(GP)
9D0095A4  14400004   BNE V0, ZERO, 0x9D0095B8
9D0095A8  00000000   NOP
9D0095AC  3C02BF86   LUI V0, -16506
9D0095B0  24030100   ADDIU V1, ZERO, 256
9D0095B4  AC430138   SW V1, 312(V0)
9D0095B8  3C02BF86   LUI V0, -16506
9D0095BC  8C420120   LW V0, 288(V0)
9D0095C0  00021202   SRL V0, V0, 8
9D0095C4  30430001   ANDI V1, V0, 1
9D0095C8  24020001   ADDIU V0, ZERO, 1
9D0095CC  14620006   BNE V1, V0, 0x9D0095E8
9D0095D0  00000000   NOP
9D0095D4  3C02BF86   LUI V0, -16506
9D0095D8  24030010   ADDIU V1, ZERO, 16
9D0095DC  AC430138   SW V1, 312(V0)
9D0095E0  10000004   BEQ ZERO, ZERO, 0x9D0095F4
9D0095E4  00000000   NOP
9D0095E8  3C02BF86   LUI V0, -16506
9D0095EC  24030010   ADDIU V1, ZERO, 16
9D0095F0  AC430134   SW V1, 308(V0)
9D0095F4  00000000   NOP
9D0095F8  03C0E825   OR SP, FP, ZERO
9D0095FC  8FBE0004   LW FP, 4(SP)
9D009600  27BD0008   ADDIU SP, SP, 8
9D009604  03E00008   JR RA
9D009608  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/agc.c  ----------------------
1:                   // agc.c
2:                   
3:                   // Pass in a sample and get a normalized sample out
4:                   
5:                   #include <math.h>
6:                   #include "biquad.h"
7:                   #include "main.h"   // typedef smp_type
8:                   #include "UserConfig.h"
9:                   
10:                  
11:                  biquad *AgcLpf;    
12:                  
13:                  void AgcInit(void){
14:                    AgcLpf=BiQuad_new(LPF, 0.0, UserConfig.AgcLpfF, 8000.0, 0.707 );    
15:                  }
16:                  
17:                  double agc(double sample){
18:                  // Pass in a sample and get a sample out normalized to TargetLevel.
19:                  static double gain=1.0;        // What to multiply the input sample by  
20:                  double level;
21:                  level=fabs(sample);            // full wave rectified sample
22:                  level=BiQuad(level, AgcLpf);  // Filtered fw rect.
23:                  if(level==0.0) level=UserConfig.AgcTargetLevel;   // Avoid divide by zero
24:                  gain=UserConfig.AgcTargetLevel/level; 
25:                  if(gain>UserConfig.AgcMaxGain) gain=UserConfig.AgcMaxGain;  // limit gain
26:                  return(sample*gain);
27:                  }
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00EC4C  27BDFFE0   ADDIU SP, SP, -32
9D00EC50  AFBF001C   SW RA, 28(SP)
9D00EC54  AFBE0018   SW FP, 24(SP)
9D00EC58  03A0F025   OR FP, SP, ZERO
9D00EC5C  F7CC0020   SDC1 F12, 32(FP)
9D00EC60  8FC20020   LW V0, 32(FP)
9D00EC64  AFC20010   SW V0, 16(FP)
9D00EC68  8FC20024   LW V0, 36(FP)
9D00EC6C  7C42F000   EXT V0, V0, 0, 31
9D00EC70  AFC20014   SW V0, 20(FP)
9D00EC74  8F82815C   LW V0, -32420(GP)
9D00EC78  00403025   OR A2, V0, ZERO
9D00EC7C  D7CC0010   LDC1 F12, 16(FP)
9D00EC80  0F403A06   JAL BiQuad
9D00EC84  00000000   NOP
9D00EC88  F7C00010   SDC1 F0, 16(FP)
9D00EC8C  D7C00010   LDC1 F0, 16(FP)
9D00EC90  44800800   MTC1 ZERO, F1
9D00EC94  44E00800   MTHC1 ZERO, F1
9D00EC98  46210032   C.EQ.D F0, F1
9D00EC9C  45000005   BC1F 0x9D00ECB4
9D00ECA0  00000000   NOP
9D00ECA4  3C028000   LUI V0, -32768
9D00ECA8  24420230   ADDIU V0, V0, 560
9D00ECAC  D4400048   LDC1 F0, 72(V0)
9D00ECB0  F7C00010   SDC1 F0, 16(FP)
9D00ECB4  3C028000   LUI V0, -32768
9D00ECB8  24420230   ADDIU V0, V0, 560
9D00ECBC  D4410048   LDC1 F1, 72(V0)
9D00ECC0  D7C00010   LDC1 F0, 16(FP)
9D00ECC4  46200803   DIV.D F0, F1, F0
9D00ECC8  F7808018   SDC1 F0, -32744(GP)
9D00ECCC  3C028000   LUI V0, -32768
9D00ECD0  24420230   ADDIU V0, V0, 560
9D00ECD4  D4410068   LDC1 F1, 104(V0)
9D00ECD8  D7808018   LDC1 F0, -32744(GP)
9D00ECDC  4620093C   C.LT.D 1, F1, F0
9D00ECE0  45040005   BC1F 1, 0x9D00ECF8
9D00ECE4  00000000   NOP
9D00ECE8  3C028000   LUI V0, -32768
9D00ECEC  24420230   ADDIU V0, V0, 560
9D00ECF0  D4400068   LDC1 F0, 104(V0)
9D00ECF4  F7808018   SDC1 F0, -32744(GP)
9D00ECF8  D7818018   LDC1 F1, -32744(GP)
9D00ECFC  D7C00020   LDC1 F0, 32(FP)
9D00ED00  46200802   MUL.D F0, F1, F0
9D00ED04  03C0E825   OR SP, FP, ZERO
9D00ED08  8FBF001C   LW RA, 28(SP)
9D00ED0C  8FBE0018   LW FP, 24(SP)
9D00ED10  27BD0020   ADDIU SP, SP, 32
9D00ED14  03E00008   JR RA
9D00ED18  00000000   NOP
9D010A58  27BDFFD0   ADDIU SP, SP, -48
9D010A5C  AFBF002C   SW RA, 44(SP)
9D010A60  AFBE0028   SW FP, 40(SP)
9D010A64  03A0F025   OR FP, SP, ZERO
9D010A68  3C028000   LUI V0, -32768
9D010A6C  24420230   ADDIU V0, V0, 560
9D010A70  D4400050   LDC1 F0, 80(V0)
9D010A74  3C029D01   LUI V0, -25343
9D010A78  D4411D40   LDC1 F1, 7488(V0)
9D010A7C  F7A10020   SDC1 F1, 32(SP)
9D010A80  3C029D01   LUI V0, -25343
9D010A84  D4411D48   LDC1 F1, 7496(V0)
9D010A88  F7A10018   SDC1 F1, 24(SP)
9D010A8C  F7A00010   SDC1 F0, 16(SP)
9D010A90  00003025   OR A2, ZERO, ZERO
9D010A94  00003825   OR A3, ZERO, ZERO
9D010A98  00002025   OR A0, ZERO, ZERO
9D010A9C  0F403A3C   JAL BiQuad_new
9D010AA0  00000000   NOP
9D010AA4  AF82815C   SW V0, -32420(GP)
9D010AA8  00000000   NOP
9D010AAC  03C0E825   OR SP, FP, ZERO
9D010AB0  8FBF002C   LW RA, 44(SP)
9D010AB4  8FBE0028   LW FP, 40(SP)
9D010AB8  27BD0030   ADDIU SP, SP, 48
9D010ABC  03E00008   JR RA
9D010AC0  00000000   NOP
---  c:/users/harold_win7/documents/microchip/projects/dsp_tu2/firmware/src/afskgen.c  ------------------
1:                   // AfskGen.c
2:                   
3:                   // Samples loop and switches DDS to proper frequency
4:                   
5:                   #include <stdint.h>     // int_t types defined here
6:                   #include "main.h"
7:                   #include "dds.h"
8:                   #include "biquad.h"                     // biquad filters. Includes typedef for smp_type
9:                   #include "AfskGen.h"  
10:                  #include "definitions.h"                // SYS function prototypes like peripheral library
11:                  #include "filters.h"                    // Mark and space frequencies specified here
12:                  
13:                  
14:                  
15:                  void AfskGenInit(void){
16:                    // Initialize a low pass filter between loop current sample and DDS.
17:                     DdsFreqSet(MarkFreq);
18:                  }
19:                  
20:                  void AfskGen(bool MarkSpacen){
21:                    // Check loop current sample and adjust DDS frequency as appropriate. Pass thru 100 Hz LPF to reduce key clicks
22:                    if(MarkSpacen){  // Loop is in mark condition
23:                      DdsFreqSet(MarkFreq);
24:                    }else{
25:                      DdsFreqSet(SpaceFreq);
26:                    }    
27:                  }
28:                  
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D010AC4  27BDFFE8   ADDIU SP, SP, -24
9D010AC8  AFBF0014   SW RA, 20(SP)
9D010ACC  AFBE0010   SW FP, 16(SP)
9D010AD0  03A0F025   OR FP, SP, ZERO
9D010AD4  00801025   OR V0, A0, ZERO
9D010AD8  A3C20018   SB V0, 24(FP)
9D010ADC  93C20018   LBU V0, 24(FP)
9D010AE0  10400007   BEQ V0, ZERO, 0x9D010B00
9D010AE4  00000000   NOP
9D010AE8  D7808180   LDC1 F0, -32384(GP)
9D010AEC  46200306   MOV.D F12, F0
9D010AF0  0F4044C3   JAL DdsFreqSet
9D010AF4  00000000   NOP
9D010AF8  10000005   BEQ ZERO, ZERO, 0x9D010B10
9D010AFC  00000000   NOP
9D010B00  D7808168   LDC1 F0, -32408(GP)
9D010B04  46200306   MOV.D F12, F0
9D010B08  0F4044C3   JAL DdsFreqSet
9D010B0C  00000000   NOP
9D010B10  00000000   NOP
9D010B14  03C0E825   OR SP, FP, ZERO
9D010B18  8FBF0014   LW RA, 20(SP)
9D010B1C  8FBE0010   LW FP, 16(SP)
9D010B20  27BD0018   ADDIU SP, SP, 24
9D010B24  03E00008   JR RA
9D010B28  00000000   NOP
9D011564  27BDFFE8   ADDIU SP, SP, -24
9D011568  AFBF0014   SW RA, 20(SP)
9D01156C  AFBE0010   SW FP, 16(SP)
9D011570  03A0F025   OR FP, SP, ZERO
9D011574  D7808180   LDC1 F0, -32384(GP)
9D011578  46200306   MOV.D F12, F0
9D01157C  0F4044C3   JAL DdsFreqSet
9D011580  00000000   NOP
9D011584  00000000   NOP
9D011588  03C0E825   OR SP, FP, ZERO
9D01158C  8FBF0014   LW RA, 20(SP)
9D011590  8FBE0010   LW FP, 16(SP)
9D011594  27BD0018   ADDIU SP, SP, 24
9D011598  03E00008   JR RA
9D01159C  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/string/xc32/stpcpy.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D011B80  24A50001   ADDIU A1, A1, 1
9D011B84  80A3FFFF   LB V1, -1(A1)
9D011B88  00801025   OR V0, A0, ZERO
9D011B8C  24840001   ADDIU A0, A0, 1
9D011B90  1460FFFB   BNE V1, ZERO, stpcpy
9D011B94  A083FFFF   SB V1, -1(A0)
9D011B98  03E00008   JR RA
9D011B9C  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/string/xc32/memset.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D011B1C  00801025   OR V0, A0, ZERO
9D011B20  00863021   ADDU A2, A0, A2
9D011B24  00801825   OR V1, A0, ZERO
9D011B28  14660003   BNE V1, A2, 0x9D011B38
9D011B2C  24630001   ADDIU V1, V1, 1
9D011B30  03E00008   JR RA
9D011B34  00000000   NOP
9D011B38  1000FFFB   BEQ ZERO, ZERO, 0x9D011B28
9D011B3C  A065FFFF   SB A1, -1(V1)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/string/strtok.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00FADC  27BDFFE0   ADDIU SP, SP, -32
9D00FAE0  AFB20018   SW S2, 24(SP)
9D00FAE4  AFB10014   SW S1, 20(SP)
9D00FAE8  AFB00010   SW S0, 16(SP)
9D00FAEC  AFBF001C   SW RA, 28(SP)
9D00FAF0  00A09025   OR S2, A1, ZERO
9D00FAF4  3C118000   LUI S1, -32768
9D00FAF8  14800004   BNE A0, ZERO, 0x9D00FB0C
9D00FAFC  00808025   OR S0, A0, ZERO
9D00FB00  8E303594   LW S0, 13716(S1)
9D00FB04  1200000B   BEQ S0, ZERO, 0x9D00FB34
9D00FB08  8FBF001C   LW RA, 28(SP)
9D00FB0C  02002025   OR A0, S0, ZERO
9D00FB10  0F4039CF   JAL strspn
9D00FB14  02402825   OR A1, S2, ZERO
9D00FB18  02028021   ADDU S0, S0, V0
9D00FB1C  82020000   LB V0, 0(S0)
9D00FB20  5440000A   BNEL V0, ZERO, 0x9D00FB4C
9D00FB24  02402825   OR A1, S2, ZERO
9D00FB28  AE203594   SW ZERO, 13716(S1)
9D00FB2C  00008025   OR S0, ZERO, ZERO
9D00FB30  8FBF001C   LW RA, 28(SP)
9D00FB34  02001025   OR V0, S0, ZERO
9D00FB38  8FB20018   LW S2, 24(SP)
9D00FB3C  8FB10014   LW S1, 20(SP)
9D00FB40  8FB00010   LW S0, 16(SP)
9D00FB44  03E00008   JR RA
9D00FB48  27BD0020   ADDIU SP, SP, 32
9D00FB4C  0F403ADE   JAL strcspn
9D00FB50  02002025   OR A0, S0, ZERO
9D00FB54  02021021   ADDU V0, S0, V0
9D00FB58  80430000   LB V1, 0(V0)
9D00FB5C  10600005   BEQ V1, ZERO, 0x9D00FB74
9D00FB60  AE223594   SW V0, 13716(S1)
9D00FB64  24430001   ADDIU V1, V0, 1
9D00FB68  AE233594   SW V1, 13716(S1)
9D00FB6C  1000FFF0   BEQ ZERO, ZERO, 0x9D00FB30
9D00FB70  A0400000   SB ZERO, 0(V0)
9D00FB74  1000FFEE   BEQ ZERO, ZERO, 0x9D00FB30
9D00FB78  AE203594   SW ZERO, 13716(S1)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/string/strspn.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00E73C  27BDFFC0   ADDIU SP, SP, -64
9D00E740  AFB10038   SW S1, 56(SP)
9D00E744  AFB00034   SW S0, 52(SP)
9D00E748  00808825   OR S1, A0, ZERO
9D00E74C  00A08025   OR S0, A1, ZERO
9D00E750  24060020   ADDIU A2, ZERO, 32
9D00E754  00002825   OR A1, ZERO, ZERO
9D00E758  AFBF003C   SW RA, 60(SP)
9D00E75C  0F4046C7   JAL memset
9D00E760  27A40010   ADDIU A0, SP, 16
9D00E764  82030000   LB V1, 0(S0)
9D00E768  10600009   BEQ V1, ZERO, 0x9D00E790
9D00E76C  00001025   OR V0, ZERO, ZERO
9D00E770  82020001   LB V0, 1(S0)
9D00E774  1440000B   BNE V0, ZERO, 0x9D00E7A4
9D00E778  24050001   ADDIU A1, ZERO, 1
9D00E77C  02201025   OR V0, S1, ZERO
9D00E780  80440000   LB A0, 0(V0)
9D00E784  5083FFFE   BEQL A0, V1, 0x9D00E780
9D00E788  24420001   ADDIU V0, V0, 1
9D00E78C  00511023   SUBU V0, V0, S1
9D00E790  8FBF003C   LW RA, 60(SP)
9D00E794  8FB10038   LW S1, 56(SP)
9D00E798  8FB00034   LW S0, 52(SP)
9D00E79C  03E00008   JR RA
9D00E7A0  27BD0040   ADDIU SP, SP, 64
9D00E7A4  92030000   LBU V1, 0(S0)
9D00E7A8  27A40010   ADDIU A0, SP, 16
9D00E7AC  26100001   ADDIU S0, S0, 1
9D00E7B0  00031142   SRL V0, V1, 5
9D00E7B4  00021080   SLL V0, V0, 2
9D00E7B8  00821021   ADDU V0, A0, V0
9D00E7BC  8C440000   LW A0, 0(V0)
9D00E7C0  00651804   SLLV V1, A1, V1
9D00E7C4  00641825   OR V1, V1, A0
9D00E7C8  AC430000   SW V1, 0(V0)
9D00E7CC  82020000   LB V0, 0(S0)
9D00E7D0  5440FFF5   BNEL V0, ZERO, 0x9D00E7A8
9D00E7D4  92030000   LBU V1, 0(S0)
9D00E7D8  02201025   OR V0, S1, ZERO
9D00E7DC  24050001   ADDIU A1, ZERO, 1
9D00E7E0  80430000   LB V1, 0(V0)
9D00E7E4  1060FFE9   BEQ V1, ZERO, 0x9D00E78C
9D00E7E8  27A60010   ADDIU A2, SP, 16
9D00E7EC  306300FF   ANDI V1, V1, 255
9D00E7F0  00032142   SRL A0, V1, 5
9D00E7F4  00042080   SLL A0, A0, 2
9D00E7F8  00C42021   ADDU A0, A2, A0
9D00E7FC  8C840000   LW A0, 0(A0)
9D00E800  00651804   SLLV V1, A1, V1
9D00E804  00641824   AND V1, V1, A0
9D00E808  5060FFE1   BEQL V1, ZERO, 0x9D00E790
9D00E80C  00511023   SUBU V0, V0, S1
9D00E810  1000FFF3   BEQ ZERO, ZERO, 0x9D00E7E0
9D00E814  24420001   ADDIU V0, V0, 1
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/string/strcspn.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00EB78  27BDFFC0   ADDIU SP, SP, -64
9D00EB7C  AFB10038   SW S1, 56(SP)
9D00EB80  AFB00034   SW S0, 52(SP)
9D00EB84  AFBF003C   SW RA, 60(SP)
9D00EB88  00A08825   OR S1, A1, ZERO
9D00EB8C  80A50000   LB A1, 0(A1)
9D00EB90  10A00004   BEQ A1, ZERO, 0x9D00EBA4
9D00EB94  00808025   OR S0, A0, ZERO
9D00EB98  82220001   LB V0, 1(S1)
9D00EB9C  54400009   BNEL V0, ZERO, 0x9D00EBC4
9D00EBA0  00002825   OR A1, ZERO, ZERO
9D00EBA4  0F403CD4   JAL __strchrnul
9D00EBA8  02002025   OR A0, S0, ZERO
9D00EBAC  8FBF003C   LW RA, 60(SP)
9D00EBB0  00501023   SUBU V0, V0, S0
9D00EBB4  8FB10038   LW S1, 56(SP)
9D00EBB8  8FB00034   LW S0, 52(SP)
9D00EBBC  03E00008   JR RA
9D00EBC0  27BD0040   ADDIU SP, SP, 64
9D00EBC4  24060020   ADDIU A2, ZERO, 32
9D00EBC8  0F4046C7   JAL memset
9D00EBCC  27A40010   ADDIU A0, SP, 16
9D00EBD0  24050001   ADDIU A1, ZERO, 1
9D00EBD4  82220000   LB V0, 0(S1)
9D00EBD8  10400019   BEQ V0, ZERO, 0x9D00EC40
9D00EBDC  92230000   LBU V1, 0(S1)
9D00EBE0  00031142   SRL V0, V1, 5
9D00EBE4  27A40010   ADDIU A0, SP, 16
9D00EBE8  00021080   SLL V0, V0, 2
9D00EBEC  00821021   ADDU V0, A0, V0
9D00EBF0  8C440000   LW A0, 0(V0)
9D00EBF4  00651804   SLLV V1, A1, V1
9D00EBF8  26310001   ADDIU S1, S1, 1
9D00EBFC  00641825   OR V1, V1, A0
9D00EC00  1000FFF4   BEQ ZERO, ZERO, 0x9D00EBD4
9D00EC04  AC430000   SW V1, 0(V0)
9D00EC08  80430000   LB V1, 0(V0)
9D00EC0C  1060FFE7   BEQ V1, ZERO, 0x9D00EBAC
9D00EC10  306300FF   ANDI V1, V1, 255
9D00EC14  00032142   SRL A0, V1, 5
9D00EC18  00042080   SLL A0, A0, 2
9D00EC1C  27A60010   ADDIU A2, SP, 16
9D00EC20  00C42021   ADDU A0, A2, A0
9D00EC24  8C840000   LW A0, 0(A0)
9D00EC28  00651804   SLLV V1, A1, V1
9D00EC2C  00641824   AND V1, V1, A0
9D00EC30  5060FFF5   BEQL V1, ZERO, 0x9D00EC08
9D00EC34  24420001   ADDIU V0, V0, 1
9D00EC38  1000FFDD   BEQ ZERO, ZERO, 0x9D00EBB0
9D00EC3C  8FBF003C   LW RA, 60(SP)
9D00EC40  02001025   OR V0, S0, ZERO
9D00EC44  1000FFF0   BEQ ZERO, ZERO, 0x9D00EC08
9D00EC48  24050001   ADDIU A1, ZERO, 1
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/string/strcpy.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D011A84  27BDFFE8   ADDIU SP, SP, -24
9D011A88  AFB00010   SW S0, 16(SP)
9D011A8C  AFBF0014   SW RA, 20(SP)
9D011A90  0F4046E0   JAL stpcpy
9D011A94  00808025   OR S0, A0, ZERO
9D011A98  8FBF0014   LW RA, 20(SP)
9D011A9C  02001025   OR V0, S0, ZERO
9D011AA0  8FB00010   LW S0, 16(SP)
9D011AA4  03E00008   JR RA
9D011AA8  27BD0018   ADDIU SP, SP, 24
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/string/strchrnul.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00F350  27BDFFE8   ADDIU SP, SP, -24
9D00F358  AFB00010   SW S0, 16(SP)
9D00F35C  AFBF0014   SW RA, 20(SP)
9D00F360  14A0000E   BNE A1, ZERO, __strchrnul, strchrnul
9D00F364  00808025   OR S0, A0, ZERO
9D00F368  0F403196   JAL strlen
9D00F370  02028021   ADDU S0, S0, V0
9D00F374  8FBF0014   LW RA, 20(SP)
9D00F378  02001025   OR V0, S0, ZERO
9D00F37C  8FB00010   LW S0, 16(SP)
9D00F380  03E00008   JR RA
9D00F384  27BD0018   ADDIU SP, SP, 24
9D00F388  1040FFFA   BEQ V0, ZERO, __strchrnul, strchrnul
9D00F38C  304200FF   ANDI V0, V0, 255
9D00F390  1045FFF9   BEQ V0, A1, __strchrnul, strchrnul
9D00F394  8FBF0014   LW RA, 20(SP)
9D00F398  26100001   ADDIU S0, S0, 1
9D00F39C  32020003   ANDI V0, S0, 3
9D00F3A0  5440FFF9   BNEL V0, ZERO, __strchrnul, strchrnul
9D00F3A4  82020000   LB V0, 0(S0)
9D00F3A8  3C040101   LUI A0, 257
9D00F3AC  24840101   ADDIU A0, A0, 257
9D00F3B0  70A42002   MUL A0, A1, A0
9D00F3B4  3C07FEFE   LUI A3, -258
9D00F3B8  3C088080   LUI T0, -32640
9D00F3BC  34E7FEFF   ORI A3, A3, -257
9D00F3C0  35088080   ORI T0, T0, -32640
9D00F3C4  8E030000   LW V1, 0(S0)
9D00F3C8  00643026   XOR A2, V1, A0
9D00F3CC  00671021   ADDU V0, V1, A3
9D00F3D0  00031827   NOR V1, ZERO, V1
9D00F3D4  00431024   AND V0, V0, V1
9D00F3D8  00C71821   ADDU V1, A2, A3
9D00F3DC  00063027   NOR A2, ZERO, A2
9D00F3E0  00663024   AND A2, V1, A2
9D00F3E4  00461025   OR V0, V0, A2
9D00F3E8  00481024   AND V0, V0, T0
9D00F3EC  5040FFF5   BEQL V0, ZERO, __strchrnul, strchrnul
9D00F3F0  26100004   ADDIU S0, S0, 4
9D00F3F4  82020000   LB V0, 0(S0)
9D00F3F8  1040FFDE   BEQ V0, ZERO, __strchrnul, strchrnul
9D00F3FC  304200FF   ANDI V0, V0, 255
9D00F400  1045FFDD   BEQ V0, A1, __strchrnul, strchrnul
9D00F404  8FBF0014   LW RA, 20(SP)
9D00F408  1000FFFA   BEQ ZERO, ZERO, __strchrnul, strchrnul
9D00F40C  26100001   ADDIU S0, S0, 1
9D00F410  40038000   MFC0 V1, Config
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdlib/mchp/strtod.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
00000008  00000000   NOP
00000010  00000000   NOP
9D00FCB0  27BDFF78   ADDIU SP, SP, -136
9D00FCB4  AFB20080   SW S2, 128(SP)
9D00FCB8  AFB1007C   SW S1, 124(SP)
9D00FCBC  AFB00078   SW S0, 120(SP)
9D00FCC0  00A08825   OR S1, A1, ZERO
9D00FCC4  00808025   OR S0, A0, ZERO
9D00FCC8  00002825   OR A1, ZERO, ZERO
9D00FCCC  00C09025   OR S2, A2, ZERO
9D00FCD0  27A40010   ADDIU A0, SP, 16
9D00FCD4  AFBF0084   SW RA, 132(SP)
9D00FCD8  0F4046C7   JAL memset
9D00FCDC  24060068   ADDIU A2, ZERO, 104
9D00FCE0  2402FFFF   ADDIU V0, ZERO, -1
9D00FCE4  00003025   OR A2, ZERO, ZERO
9D00FCE8  27A40010   ADDIU A0, SP, 16
9D00FCEC  00003825   OR A3, ZERO, ZERO
9D00FCF0  AFB00018   SW S0, 24(SP)
9D00FCF4  AFB0004C   SW S0, 76(SP)
9D00FCF8  0F40448C   JAL __shlim
9D00FCFC  AFA20050   SW V0, 80(SP)
9D00FD00  24060001   ADDIU A2, ZERO, 1
9D00FD04  02402825   OR A1, S2, ZERO
9D00FD08  0F400EB4   JAL __floatscan
9D00FD0C  27A40010   ADDIU A0, SP, 16
9D00FD10  12200007   BEQ S1, ZERO, strtox
9D00FD14  8FA30050   LW V1, 80(SP)
9D00FD18  8FA2004C   LW V0, 76(SP)
9D00FD1C  00431023   SUBU V0, V0, V1
9D00FD20  8FA30068   LW V1, 104(SP)
9D00FD24  00431021   ADDU V0, V0, V1
9D00FD28  02028021   ADDU S0, S0, V0
9D00FD2C  AE300000   SW S0, 0(S1)
9D00FD30  8FBF0084   LW RA, 132(SP)
9D00FD34  8FB20080   LW S2, 128(SP)
9D00FD38  8FB1007C   LW S1, 124(SP)
9D00FD3C  8FB00078   LW S0, 120(SP)
9D00FD40  03E00008   JR RA
9D00FD44  27BD0088   ADDIU SP, SP, 136
9D011BDC  27BDFFE8   ADDIU SP, SP, -24
9D011BE0  AFBF0014   SW RA, 20(SP)
9D011BE4  0F403F2C   JAL strtox
9D011BE8  24060001   ADDIU A2, ZERO, 1
9D011BEC  8FBF0014   LW RA, 20(SP)
9D011BF0  03E00008   JR RA
9D011BF4  27BD0018   ADDIU SP, SP, 24
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdlib/atoi.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D01070C  24050020   ADDIU A1, ZERO, 32
9D010710  80820000   LB V0, 0(A0)
9D010728  2403002B   ADDIU V1, ZERO, 43
9D01072C  1043000A   BEQ V0, V1, 0x9D010758
9D010730  2403002D   ADDIU V1, ZERO, 45
9D010734  14430003   BNE V0, V1, 0x9D010744
9D010738  00002825   OR A1, ZERO, ZERO
9D01073C  24050001   ADDIU A1, ZERO, 1
9D010740  24840001   ADDIU A0, A0, 1
9D010744  00001025   OR V0, ZERO, ZERO
9D010748  10000007   BEQ ZERO, ZERO, 0x9D010768
9D01074C  2407000A   ADDIU A3, ZERO, 10
9D010750  1000FFEF   BEQ ZERO, ZERO, 0x9D010710
9D010754  24840001   ADDIU A0, A0, 1
9D010758  1000FFF9   BEQ ZERO, ZERO, 0x9D010740
9D01075C  00002825   OR A1, ZERO, ZERO
9D010760  24840001   ADDIU A0, A0, 1
9D010764  00431023   SUBU V0, V0, V1
9D010768  80830000   LB V1, 0(A0)
9D01076C  2463FFD0   ADDIU V1, V1, -48
9D010770  2C66000A   SLTIU A2, V1, 10
9D010774  54C0FFFA   BNEL A2, ZERO, 0x9D010760
9D010778  70471002   MUL V0, V0, A3
9D01077C  50A00001   BEQL A1, ZERO, 0x9D010784
9D010780  00021023   SUBU V0, ZERO, V0
9D010784  03E00008   JR RA
9D010788  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdlib/atof.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D011BC0  27BDFFE8   ADDIU SP, SP, -24
9D011BC4  AFBF0014   SW RA, 20(SP)
9D011BC8  0F4046F7   JAL strtod
9D011BCC  00002825   OR A1, ZERO, ZERO
9D011BD0  8FBF0014   LW RA, 20(SP)
9D011BD4  03E00008   JR RA
9D011BD8  27BD0018   ADDIU SP, SP, 24
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/mchp/__stdio_exit.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
00000008  00000000   NOP
00000010  00000000   NOP
00000020  00000000   NOP
00000030  00000000   NOP
00000040  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/mchp/__printf_core.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
9D008090  27BDFF18   ADDIU SP, SP, -232
9D008094  AFB500D8   SW S5, 216(SP)
9D008098  3C159D01   LUI S5, -25343
9D00809C  AFB600DC   SW S6, 220(SP)
9D0080A0  AFB400D4   SW S4, 212(SP)
9D0080A4  AFB300D0   SW S3, 208(SP)
9D0080A8  AFB200CC   SW S2, 204(SP)
9D0080AC  AFB100C8   SW S1, 200(SP)
9D0080B0  AFBF00E4   SW RA, 228(SP)
9D0080B4  AFB700E0   SW S7, 224(SP)
9D0080B8  AFB000C4   SW S0, 196(SP)
9D0080BC  00809025   OR S2, A0, ZERO
9D0080C0  00C08825   OR S1, A2, ZERO
9D0080C4  AFA500B0   SW A1, 176(SP)
9D0080C8  00009825   OR S3, ZERO, ZERO
9D0080CC  27B60010   ADDIU S6, SP, 16
9D0080D0  24140025   ADDIU S4, ZERO, 37
9D0080D4  26B51DE8   ADDIU S5, S5, 7656
9D0080D8  8FA500B0   LW A1, 176(SP)
9D0080DC  80A20000   LB V0, 0(A1)
9D0080E0  104000E5   BEQ V0, ZERO, 0x9D008478
9D0080E4  2402FFFF   ADDIU V0, ZERO, -1
9D0080E8  AFA20094   SW V0, 148(SP)
9D0080EC  24020080   ADDIU V0, ZERO, 128
9D0080F0  AFA00090   SW ZERO, 144(SP)
9D0080F4  AFA00098   SW ZERO, 152(SP)
9D0080F8  AFB6009C   SW S6, 156(SP)
9D0080FC  AFA200A0   SW V0, 160(SP)
9D008100  00008025   OR S0, ZERO, ZERO
9D008104  00B01021   ADDU V0, A1, S0
9D008108  80420000   LB V0, 0(V0)
9D00810C  10400003   BEQ V0, ZERO, 0x9D00811C
9D008110  00000000   NOP
9D008114  5454FFFB   BNEL V0, S4, 0x9D008104
9D008118  26100001   ADDIU S0, S0, 1
9D00811C  12000008   BEQ S0, ZERO, 0x9D008140
9D008120  8FB700B0   LW S7, 176(SP)
9D008124  02003025   OR A2, S0, ZERO
9D008128  0F404377   JAL __string_out
9D00812C  02402025   OR A0, S2, ZERO
9D008130  8FA200B0   LW V0, 176(SP)
9D008134  00501021   ADDU V0, V0, S0
9D008138  AFA200B0   SW V0, 176(SP)
9D00813C  8FB700B0   LW S7, 176(SP)
9D008140  82E20000   LB V0, 0(S7)
9D008144  545400C5   BNEL V0, S4, 0x9D00845C
9D008148  02708021   ADDU S0, S3, S0
9D00814C  26F70001   ADDIU S7, S7, 1
9D008150  AFB700B0   SW S7, 176(SP)
9D008154  2405002B   ADDIU A1, ZERO, 43
9D008158  2406002D   ADDIU A2, ZERO, 45
9D00815C  24030030   ADDIU V1, ZERO, 48
9D008160  24070020   ADDIU A3, ZERO, 32
9D008164  24080023   ADDIU T0, ZERO, 35
9D008168  8FA400B0   LW A0, 176(SP)
9D00816C  80820000   LB V0, 0(A0)
9D008170  5045001B   BEQL V0, A1, 0x9D0081E0
9D008174  8FA20090   LW V0, 144(SP)
9D008178  2849002C   SLTI T1, V0, 44
9D00817C  1120001E   BEQ T1, ZERO, __printf_core::vfpfcnvrt
9D008180  00000000   NOP
9D008184  50470018   BEQL V0, A3, 0x9D0081E8
9D008188  8FA20090   LW V0, 144(SP)
9D00818C  50480018   BEQL V0, T0, 0x9D0081F0
9D008190  8FA20090   LW V0, 144(SP)
9D008194  2403002A   ADDIU V1, ZERO, 42
9D008198  5043001E   BEQL V0, V1, __printf_core::vfpfcnvrt
9D00819C  8E220000   LW V0, 0(S1)
9D0081A0  0F4041C3   JAL atoi
9D0081A4  00000000   NOP
9D0081A8  AFA20098   SW V0, 152(SP)
9D0081AC  8FA300B0   LW V1, 176(SP)
9D0081B0  80620000   LB V0, 0(V1)
9D0081B4  2442FFD0   ADDIU V0, V0, -48
9D0081B8  2C42000A   SLTIU V0, V0, 10
9D0081BC  10400021   BEQ V0, ZERO, 0x9D008244
9D0081C0  24630001   ADDIU V1, V1, 1
9D0081C4  1000FFF9   BEQ ZERO, ZERO, 0x9D0081AC
9D0081C8  AFA300B0   SW V1, 176(SP)
9D0081CC  34420001   ORI V0, V0, 1
9D0081D0  24840001   ADDIU A0, A0, 1
9D0081D4  AFA20090   SW V0, 144(SP)
9D0081D8  1000FFE3   BEQ ZERO, ZERO, 0x9D008168
9D0081DC  AFA400B0   SW A0, 176(SP)
9D0081E0  1000FFFB   BEQ ZERO, ZERO, 0x9D0081D0
9D0081E4  34420004   ORI V0, V0, 4
9D0081E8  1000FFF9   BEQ ZERO, ZERO, 0x9D0081D0
9D0081EC  34420008   ORI V0, V0, 8
9D0081F0  1000FFF7   BEQ ZERO, ZERO, 0x9D0081D0
9D0081F4  34420010   ORI V0, V0, 16
9D0081F8  5046FFF4   BEQL V0, A2, __printf_core::vfpfcnvrt
9D0081FC  8FA20090   LW V0, 144(SP)
9D008200  5443FFE5   BNEL V0, V1, 0x9D008198
9D008204  2403002A   ADDIU V1, ZERO, 42
9D008208  8FA20090   LW V0, 144(SP)
9D00820C  1000FFF0   BEQ ZERO, ZERO, 0x9D0081D0
9D008210  34420002   ORI V0, V0, 2
9D008214  24840001   ADDIU A0, A0, 1
9D008218  AFA400B0   SW A0, 176(SP)
9D00821C  24430004   ADDIU V1, V0, 4
9D008220  8C420000   LW V0, 0(V0)
9D008224  AE230000   SW V1, 0(S1)
9D008228  04410006   BGEZ V0, 0x9D008244
9D00822C  AFA20098   SW V0, 152(SP)
9D008230  8FA30090   LW V1, 144(SP)
9D008234  00021023   SUBU V0, ZERO, V0
9D008238  AFA20098   SW V0, 152(SP)
9D00823C  38630001   XORI V1, V1, 1
9D008240  AFA30090   SW V1, 144(SP)
9D008244  8FA20090   LW V0, 144(SP)
9D008248  30430001   ANDI V1, V0, 1
9D00824C  50600004   BEQL V1, ZERO, 0x9D008260
9D008250  8FA200B0   LW V0, 176(SP)
9D008254  7C020844   INS V0, ZERO, 1, 1
9D008258  AFA20090   SW V0, 144(SP)
9D00825C  8FA200B0   LW V0, 176(SP)
9D008260  2403002E   ADDIU V1, ZERO, 46
9D008264  80440000   LB A0, 0(V0)
9D008268  1483000D   BNE A0, V1, 0x9D0082A0
9D00826C  24440001   ADDIU A0, V0, 1
9D008270  AFA00094   SW ZERO, 148(SP)
9D008274  AFA400B0   SW A0, 176(SP)
9D008278  80450001   LB A1, 1(V0)
9D00827C  2403002A   ADDIU V1, ZERO, 42
9D008280  14A30024   BNE A1, V1, __printf_core::vfpfcnvrt
9D008284  24420002   ADDIU V0, V0, 2
9D008288  AFA200B0   SW V0, 176(SP)
9D00828C  8E220000   LW V0, 0(S1)
9D008290  24430004   ADDIU V1, V0, 4
9D008294  8C420000   LW V0, 0(V0)
9D008298  AE230000   SW V1, 0(S1)
9D00829C  AFA20094   SW V0, 148(SP)
9D0082A0  0F40438E   JAL __fmt_state
9D0082A4  27A400B0   ADDIU A0, SP, 176
9D0082A8  AFA200B8   SW V0, 184(SP)
9D0082AC  8FA200B0   LW V0, 176(SP)
9D0082B0  0F4046FE   JAL tolower
9D0082B4  80440000   LB A0, 0(V0)
9D0082B8  24030069   ADDIU V1, ZERO, 105
9D0082BC  1043007A   BEQ V0, V1, __printf_core::vfpfcnvrt
9D0082C0  8FA500B8   LW A1, 184(SP)
9D0082C4  2843006A   SLTI V1, V0, 106
9D0082C8  1060002F   BEQ V1, ZERO, __printf_core::vfpfcnvrt
9D0082CC  24030070   ADDIU V1, ZERO, 112
9D0082D0  24030063   ADDIU V1, ZERO, 99
9D0082D4  104300BC   BEQ V0, V1, __printf_core::vfpfcnvrt
9D0082D8  28430064   SLTI V1, V0, 100
9D0082DC  10600018   BEQ V1, ZERO, __printf_core::vfpfcnvrt
9D0082E0  24030064   ADDIU V1, ZERO, 100
9D0082E4  105400C5   BEQ V0, S4, __printf_core::vfpfcnvrt
9D0082E8  24030061   ADDIU V1, ZERO, 97
9D0082EC  5043004E   BEQL V0, V1, __printf_core::vfpfcnvrt
9D0082F0  02203025   OR A2, S1, ZERO
9D0082F4  24020025   ADDIU V0, ZERO, 37
9D0082F8  A3A200A8   SB V0, 168(SP)
9D0082FC  2402FFFF   ADDIU V0, ZERO, -1
9D008300  AFB700B0   SW S7, 176(SP)
9D008304  AFA00090   SW ZERO, 144(SP)
9D008308  AFA00098   SW ZERO, 152(SP)
9D00830C  100000B8   BEQ ZERO, ZERO, 0x9D0085F0
9D008310  AFA20094   SW V0, 148(SP)
9D008314  0F4041C3   JAL atoi
9D008318  00000000   NOP
9D00831C  AFA20094   SW V0, 148(SP)
9D008320  8FA300B0   LW V1, 176(SP)
9D008324  80620000   LB V0, 0(V1)
9D008328  2442FFD0   ADDIU V0, V0, -48
9D00832C  2C42000A   SLTIU V0, V0, 10
9D008330  1040FFDB   BEQ V0, ZERO, 0x9D0082A0
9D008334  24630001   ADDIU V1, V1, 1
9D008338  1000FFF9   BEQ ZERO, ZERO, 0x9D008320
9D00833C  AFA300B0   SW V1, 176(SP)
9D008340  10430059   BEQ V0, V1, __printf_core::vfpfcnvrt
9D008344  28420068   SLTI V0, V0, 104
9D008348  1040FFEB   BEQ V0, ZERO, 0x9D0082F8
9D00834C  24020025   ADDIU V0, ZERO, 37
9D008350  02203025   OR A2, S1, ZERO
9D008354  0F4044D5   JAL __pop_float
9D008358  27A400A8   ADDIU A0, SP, 168
9D00835C  10400097   BEQ V0, ZERO, 0x9D0085BC
9D008360  8FA200B0   LW V0, 176(SP)
9D008364  27A600A8   ADDIU A2, SP, 168
9D008368  27A50090   ADDIU A1, SP, 144
9D00836C  24430001   ADDIU V1, V0, 1
9D008370  AFA300B0   SW V1, 176(SP)
9D008374  80470000   LB A3, 0(V0)
9D008378  0F401B70   JAL __fmt_fp
9D00837C  02402025   OR A0, S2, ZERO
9D008380  10000035   BEQ ZERO, ZERO, 0x9D008458
9D008384  02028021   ADDU S0, S0, V0
9D008388  10430072   BEQ V0, V1, __printf_core::vfpfcnvrt
9D00838C  28430071   SLTI V1, V0, 113
9D008390  10600014   BEQ V1, ZERO, __printf_core::vfpfcnvrt
9D008394  24030075   ADDIU V1, ZERO, 117
9D008398  2403006E   ADDIU V1, ZERO, 110
9D00839C  10430082   BEQ V0, V1, __printf_core::vfpfcnvrt
9D0083A0  2403006F   ADDIU V1, ZERO, 111
9D0083A4  1443FFD4   BNE V0, V1, 0x9D0082F8
9D0083A8  24020025   ADDIU V0, ZERO, 37
9D0083AC  02203825   OR A3, S1, ZERO
9D0083B0  00003025   OR A2, ZERO, ZERO
9D0083B4  0F4030DA   JAL __pop_int
9D0083B8  27A400A8   ADDIU A0, SP, 168
9D0083BC  1040007F   BEQ V0, ZERO, 0x9D0085BC
9D0083C0  8FA200B0   LW V0, 176(SP)
9D0083C4  27A600A8   ADDIU A2, SP, 168
9D0083C8  27A50090   ADDIU A1, SP, 144
9D0083CC  24420001   ADDIU V0, V0, 1
9D0083D0  02402025   OR A0, S2, ZERO
9D0083D4  0F403832   JAL __fmt_o
9D0083D8  AFA200B0   SW V0, 176(SP)
9D0083DC  1000001E   BEQ ZERO, ZERO, 0x9D008458
9D0083E0  02028021   ADDU S0, S0, V0
9D0083E4  1043003E   BEQ V0, V1, __printf_core::vfpfcnvrt
9D0083E8  24030078   ADDIU V1, ZERO, 120
9D0083EC  1043004A   BEQ V0, V1, __printf_core::vfpfcnvrt
9D0083F0  24030073   ADDIU V1, ZERO, 115
9D0083F4  1443FFC0   BNE V0, V1, 0x9D0082F8
9D0083F8  24020025   ADDIU V0, ZERO, 37
9D0083FC  24020080   ADDIU V0, ZERO, 128
9D008400  14A2006E   BNE A1, V0, 0x9D0085BC
9D008404  8FA200B0   LW V0, 176(SP)
9D008408  00003825   OR A3, ZERO, ZERO
9D00840C  24420001   ADDIU V0, V0, 1
9D008410  AFA200B0   SW V0, 176(SP)
9D008414  8E220000   LW V0, 0(S1)
9D008418  24430004   ADDIU V1, V0, 4
9D00841C  AE230000   SW V1, 0(S1)
9D008420  1000005C   BEQ ZERO, ZERO, 0x9D008594
9D008424  8C460000   LW A2, 0(V0)
9D008428  0F4044D5   JAL __pop_float
9D00842C  27A400A8   ADDIU A0, SP, 168
9D008430  10400062   BEQ V0, ZERO, 0x9D0085BC
9D008434  8FA200B0   LW V0, 176(SP)
9D008438  27A600A8   ADDIU A2, SP, 168
9D00843C  27A50090   ADDIU A1, SP, 144
9D008440  24430001   ADDIU V1, V0, 1
9D008444  AFA300B0   SW V1, 176(SP)
9D008448  80470000   LB A3, 0(V0)
9D00844C  0F404778   JAL __dummy_fmt4
9D008450  02402025   OR A0, S2, ZERO
9D008454  02028021   ADDU S0, S0, V0
9D008458  02708021   ADDU S0, S3, S0
9D00845C  0213982A   SLT S3, S0, S3
9D008460  1260FF1D   BEQ S3, ZERO, 0x9D0080D8
9D008464  02009825   OR S3, S0, ZERO
9D008468  3C028000   LUI V0, -32768
9D00846C  2403004F   ADDIU V1, ZERO, 79
9D008470  AC433598   SW V1, 13720(V0)
9D008474  2413FFFF   ADDIU S3, ZERO, -1
9D008478  8FBF00E4   LW RA, 228(SP)
9D00847C  02601025   OR V0, S3, ZERO
9D008480  8FB700E0   LW S7, 224(SP)
9D008484  8FB600DC   LW S6, 220(SP)
9D008488  8FB500D8   LW S5, 216(SP)
9D00848C  8FB400D4   LW S4, 212(SP)
9D008490  8FB300D0   LW S3, 208(SP)
9D008494  8FB200CC   LW S2, 204(SP)
9D008498  8FB100C8   LW S1, 200(SP)
9D00849C  8FB000C4   LW S0, 196(SP)
9D0084A0  03E00008   JR RA
9D0084A4  27BD00E8   ADDIU SP, SP, 232
9D0084A8  02203825   OR A3, S1, ZERO
9D0084AC  24060001   ADDIU A2, ZERO, 1
9D0084B0  0F4030DA   JAL __pop_int
9D0084B4  27A400A8   ADDIU A0, SP, 168
9D0084B8  10400040   BEQ V0, ZERO, 0x9D0085BC
9D0084BC  8FA200B0   LW V0, 176(SP)
9D0084C0  27A600A8   ADDIU A2, SP, 168
9D0084C4  27A50090   ADDIU A1, SP, 144
9D0084C8  24420001   ADDIU V0, V0, 1
9D0084CC  02402025   OR A0, S2, ZERO
9D0084D0  0F4031F0   JAL __fmt_d
9D0084D4  AFA200B0   SW V0, 176(SP)
9D0084D8  1000FFDF   BEQ ZERO, ZERO, 0x9D008458
9D0084DC  02028021   ADDU S0, S0, V0
9D0084E0  02203825   OR A3, S1, ZERO
9D0084E4  00003025   OR A2, ZERO, ZERO
9D0084E8  0F4030DA   JAL __pop_int
9D0084EC  27A400A8   ADDIU A0, SP, 168
9D0084F0  10400032   BEQ V0, ZERO, 0x9D0085BC
9D0084F4  8FA200B0   LW V0, 176(SP)
9D0084F8  27A600A8   ADDIU A2, SP, 168
9D0084FC  27A50090   ADDIU A1, SP, 144
9D008500  24420001   ADDIU V0, V0, 1
9D008504  02402025   OR A0, S2, ZERO
9D008508  0F403D33   JAL __fmt_u
9D00850C  AFA200B0   SW V0, 176(SP)
9D008510  1000FFD1   BEQ ZERO, ZERO, 0x9D008458
9D008514  02028021   ADDU S0, S0, V0
9D008518  02203825   OR A3, S1, ZERO
9D00851C  00003025   OR A2, ZERO, ZERO
9D008520  0F4030DA   JAL __pop_int
9D008524  27A400A8   ADDIU A0, SP, 168
9D008528  10400024   BEQ V0, ZERO, 0x9D0085BC
9D00852C  8FA200B0   LW V0, 176(SP)
9D008530  24430001   ADDIU V1, V0, 1
9D008534  AFA300B0   SW V1, 176(SP)
9D008538  80470000   LB A3, 0(V0)
9D00853C  27A600A8   ADDIU A2, SP, 168
9D008540  27A50090   ADDIU A1, SP, 144
9D008544  0F402C57   JAL __fmt_x
9D008548  02402025   OR A0, S2, ZERO
9D00854C  1000FFC2   BEQ ZERO, ZERO, 0x9D008458
9D008550  02028021   ADDU S0, S0, V0
9D008554  02203825   OR A3, S1, ZERO
9D008558  00003025   OR A2, ZERO, ZERO
9D00855C  240500F0   ADDIU A1, ZERO, 240
9D008560  0F4030DA   JAL __pop_int
9D008564  27A400A8   ADDIU A0, SP, 168
9D008568  10400014   BEQ V0, ZERO, 0x9D0085BC
9D00856C  8FA200B0   LW V0, 176(SP)
9D008570  8FA300AC   LW V1, 172(SP)
9D008574  24420001   ADDIU V0, V0, 1
9D008578  AFA200B0   SW V0, 176(SP)
9D00857C  8FA200A8   LW V0, 168(SP)
9D008580  00431025   OR V0, V0, V1
9D008584  1440FFED   BNE V0, ZERO, 0x9D00853C
9D008588  24070078   ADDIU A3, ZERO, 120
9D00858C  00003825   OR A3, ZERO, ZERO
9D008590  02A03025   OR A2, S5, ZERO
9D008594  27A50090   ADDIU A1, SP, 144
9D008598  0F403E3B   JAL __fmt_s
9D00859C  02402025   OR A0, S2, ZERO
9D0085A0  1000FFAD   BEQ ZERO, ZERO, 0x9D008458
9D0085A4  02028021   ADDU S0, S0, V0
9D0085A8  02203825   OR A3, S1, ZERO
9D0085AC  02703021   ADDU A2, S3, S0
9D0085B0  0F403927   JAL __pop_ptr
9D0085B4  27A400A8   ADDIU A0, SP, 168
9D0085B8  8FA200B0   LW V0, 176(SP)
9D0085BC  24420001   ADDIU V0, V0, 1
9D0085C0  1000FFA5   BEQ ZERO, ZERO, 0x9D008458
9D0085C4  AFA200B0   SW V0, 176(SP)
9D0085C8  24020080   ADDIU V0, ZERO, 128
9D0085CC  14A2FFFB   BNE A1, V0, 0x9D0085BC
9D0085D0  8FA200B0   LW V0, 176(SP)
9D0085D4  24420001   ADDIU V0, V0, 1
9D0085D8  AFA200B0   SW V0, 176(SP)
9D0085DC  8E220000   LW V0, 0(S1)
9D0085E0  24430004   ADDIU V1, V0, 4
9D0085E4  8C420000   LW V0, 0(V0)
9D0085E8  AE230000   SW V1, 0(S1)
9D0085EC  A3A200A8   SB V0, 168(SP)
9D0085F0  24070001   ADDIU A3, ZERO, 1
9D0085F4  1000FFE7   BEQ ZERO, ZERO, 0x9D008594
9D0085F8  27A600A8   ADDIU A2, SP, 168
9D0085FC  24020080   ADDIU V0, ZERO, 128
9D008600  14A2FFEE   BNE A1, V0, 0x9D0085BC
9D008604  8FA200B0   LW V0, 176(SP)
9D008608  A3B400A8   SB S4, 168(SP)
9D00860C  24420001   ADDIU V0, V0, 1
9D008610  1000FFF7   BEQ ZERO, ZERO, 0x9D0085F0
9D008614  AFA200B0   SW V0, 176(SP)
9D008618  27BDFFB0   ADDIU SP, SP, -80
9D00DBC8  27BDFFC0   ADDIU SP, SP, -64
9D00DBCC  AFB40030   SW S4, 48(SP)
9D00DBD0  8FB40050   LW S4, 80(SP)
9D00DBD4  AFB50034   SW S5, 52(SP)
9D00DBD8  AFB3002C   SW S3, 44(SP)
9D00DBDC  32940001   ANDI S4, S4, 1
9D00DBE0  AFB20028   SW S2, 40(SP)
9D00DBE4  AFB10024   SW S1, 36(SP)
9D00DBE8  AFB00020   SW S0, 32(SP)
9D00DBEC  AFBF003C   SW RA, 60(SP)
9D00DBF0  AFB60038   SW S6, 56(SP)
9D00DBF4  00809825   OR S3, A0, ZERO
9D00DBF8  00A0A825   OR S5, A1, ZERO
9D00DBFC  00C08825   OR S1, A2, ZERO
9D00DC00  00E09025   OR S2, A3, ZERO
9D00DC04  16800024   BNE S4, ZERO, 0x9D00DC98
9D00DC08  00C7802A   SLT S0, A2, A3
9D00DC0C  12000023   BEQ S0, ZERO, 0x9D00DC9C
9D00DC10  02203025   OR A2, S1, ZERO
9D00DC14  02518023   SUBU S0, S2, S1
9D00DC18  2E060011   SLTIU A2, S0, 17
9D00DC1C  24020010   ADDIU V0, ZERO, 16
9D00DC20  0206100B   MOVN V0, S0, A2
9D00DC24  00403025   OR A2, V0, ZERO
9D00DC28  24050020   ADDIU A1, ZERO, 32
9D00DC2C  27A40010   ADDIU A0, SP, 16
9D00DC30  0F4046C7   JAL memset
9D00DC34  0200B025   OR S6, S0, ZERO
9D00DC38  2A020010   SLTI V0, S0, 16
9D00DC3C  1040001E   BEQ V0, ZERO, 0x9D00DCB8
9D00DC40  24060010   ADDIU A2, ZERO, 16
9D00DC44  32C6000F   ANDI A2, S6, 15
9D00DC48  27A50010   ADDIU A1, SP, 16
9D00DC4C  0F404377   JAL __string_out
9D00DC50  02602025   OR A0, S3, ZERO
9D00DC54  16800006   BNE S4, ZERO, 0x9D00DC70
9D00DC58  8FBF003C   LW RA, 60(SP)
9D00DC5C  02203025   OR A2, S1, ZERO
9D00DC60  02A02825   OR A1, S5, ZERO
9D00DC64  0F404377   JAL __string_out
9D00DC68  02602025   OR A0, S3, ZERO
9D00DC6C  8FBF003C   LW RA, 60(SP)
9D00DC70  02401025   OR V0, S2, ZERO
9D00DC74  8FB60038   LW S6, 56(SP)
9D00DC78  8FB50034   LW S5, 52(SP)
9D00DC7C  8FB40030   LW S4, 48(SP)
9D00DC80  8FB3002C   LW S3, 44(SP)
9D00DC84  8FB20028   LW S2, 40(SP)
9D00DC88  8FB10024   LW S1, 36(SP)
9D00DC8C  8FB00020   LW S0, 32(SP)
9D00DC90  03E00008   JR RA
9D00DC94  27BD0040   ADDIU SP, SP, 64
9D00DC98  02203025   OR A2, S1, ZERO
9D00DC9C  02A02825   OR A1, S5, ZERO
9D00DCA0  0F404377   JAL __string_out
9D00DCA4  02602025   OR A0, S3, ZERO
9D00DCA8  1600FFDB   BNE S0, ZERO, 0x9D00DC18
9D00DCAC  02518023   SUBU S0, S2, S1
9D00DCB0  1000FFEE   BEQ ZERO, ZERO, 0x9D00DC6C
9D00DCB4  02209025   OR S2, S1, ZERO
9D00DCB8  27A50010   ADDIU A1, SP, 16
9D00DCBC  0F404377   JAL __string_out
9D00DCC0  02602025   OR A0, S3, ZERO
9D00DCC4  1000FFDC   BEQ ZERO, ZERO, 0x9D00DC38
9D00DCC8  2610FFF0   ADDIU S0, S0, -16
9D010DDC  8C820010   LW V0, 16(A0)
9D010DE0  27BDFFE0   ADDIU SP, SP, -32
9D010DE4  AFB00014   SW S0, 20(SP)
9D010DE8  00808025   OR S0, A0, ZERO
9D010DEC  8C840014   LW A0, 20(A0)
9D010DF0  AFB10018   SW S1, 24(SP)
9D010DF4  00C2882B   SLTU S1, A2, V0
9D010DF8  0051300A   MOVZ A2, V0, S1
9D010DFC  AFBF001C   SW RA, 28(SP)
9D010E00  0F40313C   JAL memcpy
9D010E04  00C08825   OR S1, A2, ZERO
9D010E08  8E020014   LW V0, 20(S0)
9D010E0C  8E060010   LW A2, 16(S0)
9D010E10  00511021   ADDU V0, V0, S1
9D010E14  00D18823   SUBU S1, A2, S1
9D010E18  AE110010   SW S1, 16(S0)
9D010E1C  AE020014   SW V0, 20(S0)
9D010E20  A0400000   SB ZERO, 0(V0)
9D010E24  8FBF001C   LW RA, 28(SP)
9D010E28  8FB10018   LW S1, 24(SP)
9D010E2C  8FB00014   LW S0, 20(SP)
9D010E30  03E00008   JR RA
9D010E34  27BD0020   ADDIU SP, SP, 32
9D010E38  3C069D01   LUI A2, -25343
9D010E3C  00001025   OR V0, ZERO, ZERO
9D010E40  24C61CE8   ADDIU A2, A2, 7400
9D010E44  00021840   SLL V1, V0, 1
9D010E48  00661821   ADDU V1, V1, A2
9D010E4C  80670000   LB A3, 0(V1)
9D010E50  54E00003   BNEL A3, ZERO, 0x9D010E60
9D010E54  8C850000   LW A1, 0(A0)
9D010E58  03E00008   JR RA
9D010E5C  90620001   LBU V0, 1(V1)
9D010E60  80A80000   LB T0, 0(A1)
9D010E64  15070009   BNE T0, A3, 0x9D010E8C
9D010E68  24420001   ADDIU V0, V0, 1
9D010E6C  90620001   LBU V0, 1(V1)
9D010E70  24A50001   ADDIU A1, A1, 1
9D010E74  AC850000   SW A1, 0(A0)
9D010E78  2C43000B   SLTIU V1, V0, 11
9D010E7C  1460FFF2   BNE V1, ZERO, 0x9D010E48
9D010E80  00021840   SLL V1, V0, 1
9D010E84  03E00008   JR RA
9D010E88  00000000   NOP
9D010E8C  1000FFFA   BEQ ZERO, ZERO, 0x9D010E78
9D010E90  304200FF   ANDI V0, V0, 255
9D011DE0  03E00008   JR RA
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/mchp/__pop_ptr.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00E49C  24020084   ADDIU V0, ZERO, 132
9D00E4D8  8CE20000   LW V0, 0(A3)
9D00E4DC  24430004   ADDIU V1, V0, 4
9D00E4E0  ACE30000   SW V1, 0(A3)
9D00E4E4  8C420000   LW V0, 0(V0)
9D00E4E8  AC820000   SW V0, 0(A0)
9D00E4EC  10000014   BEQ ZERO, ZERO, __pop_ptr_needed
9D00E4F0  AC460000   SW A2, 0(V0)
9D00E4F4  50A2001A   BEQL A1, V0, __pop_ptr_needed
9D00E4F8  8CE20000   LW V0, 0(A3)
9D00E4FC  28A20091   SLTI V0, A1, 145
9D00E500  10400006   BEQ V0, ZERO, __pop_ptr_needed
9D00E504  240200A0   ADDIU V0, ZERO, 160
9D00E508  24020088   ADDIU V0, ZERO, 136
9D00E50C  50A2000E   BEQL A1, V0, __pop_ptr_needed
9D00E510  8CE20000   LW V0, 0(A3)
9D00E514  03E00008   JR RA
9D00E518  00001025   OR V0, ZERO, ZERO
9D00E51C  50A2FFEF   BEQL A1, V0, __pop_ptr_needed
9D00E520  8CE20000   LW V0, 0(A3)
9D00E524  1000FFEA   BEQ ZERO, ZERO, __pop_ptr_needed
9D00E528  240200C0   ADDIU V0, ZERO, 192
9D00E52C  24430004   ADDIU V1, V0, 4
9D00E530  ACE30000   SW V1, 0(A3)
9D00E534  8C420000   LW V0, 0(V0)
9D00E538  AC820000   SW V0, 0(A0)
9D00E53C  A4460000   SH A2, 0(V0)
9D00E540  03E00008   JR RA
9D00E544  24020001   ADDIU V0, ZERO, 1
9D00E548  24430004   ADDIU V1, V0, 4
9D00E54C  ACE30000   SW V1, 0(A3)
9D00E550  8C420000   LW V0, 0(V0)
9D00E554  AC820000   SW V0, 0(A0)
9D00E558  1000FFF9   BEQ ZERO, ZERO, __pop_ptr_needed
9D00E55C  A0460000   SB A2, 0(V0)
9D00E560  24430004   ADDIU V1, V0, 4
9D00E564  ACE30000   SW V1, 0(A3)
9D00E568  8C420000   LW V0, 0(V0)
9D00E56C  AC820000   SW V0, 0(A0)
9D00E570  AC460000   SW A2, 0(V0)
9D00E574  000637C3   SRA A2, A2, 31
9D00E578  1000FFF1   BEQ ZERO, ZERO, __pop_ptr_needed
9D00E57C  AC460004   SW A2, 4(V0)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/mchp/__pop_int.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00C368  24020088   ADDIU V0, ZERO, 136
9D00C39C  03E00008   JR RA
9D00C3A0  00001025   OR V0, ZERO, ZERO
9D00C3A4  50A2003A   BEQL A1, V0, __pop_int_needed
9D00C3A8  8CE20000   LW V0, 0(A3)
9D00C3AC  24020084   ADDIU V0, ZERO, 132
9D00C3B0  14A2FFFA   BNE A1, V0, __pop_int_needed
9D00C3B4  00000000   NOP
9D00C3B8  8CE20000   LW V0, 0(A3)
9D00C3BC  24430004   ADDIU V1, V0, 4
9D00C3C0  8C420000   LW V0, 0(V0)
9D00C3C4  10C00026   BEQ A2, ZERO, __pop_int_needed
9D00C3C8  ACE30000   SW V1, 0(A3)
9D00C3CC  7C021620   SEH V0, V0
9D00C3D0  AC820000   SW V0, 0(A0)
9D00C3D4  000217C3   SRA V0, V0, 31
9D00C3D8  AC820004   SW V0, 4(A0)
9D00C3DC  03E00008   JR RA
9D00C3E0  24020001   ADDIU V0, ZERO, 1
9D00C3E4  50A20036   BEQL A1, V0, __pop_int_needed
9D00C3E8  8CE20000   LW V0, 0(A3)
9D00C3EC  28A200A1   SLTI V0, A1, 161
9D00C3F0  10400011   BEQ V0, ZERO, __pop_int_needed
9D00C3F4  240200C0   ADDIU V0, ZERO, 192
9D00C3F8  24020090   ADDIU V0, ZERO, 144
9D00C3FC  14A2FFE7   BNE A1, V0, __pop_int_needed
9D00C400  00000000   NOP
9D00C404  8CE20000   LW V0, 0(A3)
9D00C408  24420007   ADDIU V0, V0, 7
9D00C40C  7C021004   INS V0, ZERO, 0, 3
9D00C410  8C480000   LW T0, 0(V0)
9D00C414  8C490004   LW T1, 4(V0)
9D00C418  24420008   ADDIU V0, V0, 8
9D00C41C  ACE20000   SW V0, 0(A3)
9D00C420  AC880000   SW T0, 0(A0)
9D00C424  AC890004   SW T1, 4(A0)
9D00C428  10C00001   BEQ A2, ZERO, __pop_int_needed
9D00C42C  24020001   ADDIU V0, ZERO, 1
9D00C430  03E00008   JR RA
9D00C434  00000000   NOP
9D00C438  50A20005   BEQL A1, V0, __pop_int_needed
9D00C43C  8CE20000   LW V0, 0(A3)
9D00C440  240200F0   ADDIU V0, ZERO, 240
9D00C444  14A2FFD5   BNE A1, V0, __pop_int_needed
9D00C448  00000000   NOP
9D00C44C  8CE20000   LW V0, 0(A3)
9D00C450  24430004   ADDIU V1, V0, 4
9D00C454  ACE30000   SW V1, 0(A3)
9D00C458  10000002   BEQ ZERO, ZERO, __pop_int_needed
9D00C45C  8C420000   LW V0, 0(V0)
9D00C460  3042FFFF   ANDI V0, V0, -1
9D00C464  10000020   BEQ ZERO, ZERO, __pop_int_needed
9D00C468  AC820000   SW V0, 0(A0)
9D00C46C  8CE20000   LW V0, 0(A3)
9D00C470  24430004   ADDIU V1, V0, 4
9D00C474  8C420000   LW V0, 0(V0)
9D00C478  10C00003   BEQ A2, ZERO, __pop_int_needed
9D00C47C  ACE30000   SW V1, 0(A3)
9D00C480  1000FFD3   BEQ ZERO, ZERO, __pop_int_needed
9D00C484  7C021420   SEB V0, V0
9D00C488  1000FFF6   BEQ ZERO, ZERO, __pop_int_needed
9D00C48C  304200FF   ANDI V0, V0, 255
9D00C490  24420007   ADDIU V0, V0, 7
9D00C494  7C021004   INS V0, ZERO, 0, 3
9D00C498  8C480000   LW T0, 0(V0)
9D00C49C  8C490004   LW T1, 4(V0)
9D00C4A0  24420008   ADDIU V0, V0, 8
9D00C4A4  ACE20000   SW V0, 0(A3)
9D00C4A8  AC880000   SW T0, 0(A0)
9D00C4AC  AC890004   SW T1, 4(A0)
9D00C4B0  10C0FFDF   BEQ A2, ZERO, __pop_int_needed
9D00C4B4  24020001   ADDIU V0, ZERO, 1
9D00C4B8  03E00008   JR RA
9D00C4BC  00000000   NOP
9D00C4C0  24430004   ADDIU V1, V0, 4
9D00C4C4  ACE30000   SW V1, 0(A3)
9D00C4C8  1000FFC1   BEQ ZERO, ZERO, __pop_int_needed
9D00C4CC  8C420000   LW V0, 0(V0)
9D00C4D0  8CE20000   LW V0, 0(A3)
9D00C4D4  24430004   ADDIU V1, V0, 4
9D00C4D8  ACE30000   SW V1, 0(A3)
9D00C4DC  8C420000   LW V0, 0(V0)
9D00C4E0  14C0FFBC   BNE A2, ZERO, __pop_int_needed
9D00C4E4  AC820000   SW V0, 0(A0)
9D00C4E8  1000FFBC   BEQ ZERO, ZERO, __pop_int_needed
9D00C4EC  AC800004   SW ZERO, 4(A0)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/mchp/__pop_float.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D011354  28A30080   SLTI V1, A1, 128
9D011374  8CC20000   LW V0, 0(A2)
9D011378  24420007   ADDIU V0, V0, 7
9D01137C  7C021004   INS V0, ZERO, 0, 3
9D011380  24430008   ADDIU V1, V0, 8
9D011384  ACC30000   SW V1, 0(A2)
9D011388  D4400000   LDC1 F0, 0(V0)
9D01138C  24020001   ADDIU V0, ZERO, 1
9D011390  F4800000   SDC1 F0, 0(A0)
9D011394  03E00008   JR RA
9D011398  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/mchp/__fmt_x.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00B15C  27BDFFA8   ADDIU SP, SP, -88
9D00B164  8CB10004   LW S1, 4(A1)
9D00B168  AFBE0050   SW FP, 80(SP)
9D00B16C  AFB7004C   SW S7, 76(SP)
9D00B170  AFB50044   SW S5, 68(SP)
9D00B174  AFB3003C   SW S3, 60(SP)
9D00B178  00E04825   OR T1, A3, ZERO
9D00B17C  AFBF0054   SW RA, 84(SP)
9D00B180  AFB60048   SW S6, 72(SP)
9D00B184  AFB40040   SW S4, 64(SP)
9D00B188  AFB20038   SW S2, 56(SP)
9D00B18C  AFB00030   SW S0, 48(SP)
9D00B190  00809825   OR S3, A0, ZERO
9D00B194  00A0A825   OR S5, A1, ZERO
9D00B198  8CA70008   LW A3, 8(A1)
9D00B19C  8CBE0000   LW FP, 0(A1)
9D00B1A0  0620004C   BLTZ S1, __fmt_x_needed
9D00B1A4  8CB7000C   LW S7, 12(A1)
9D00B1A8  7C1E0844   INS FP, ZERO, 1, 1
9D00B1AC  33CA0010   ANDI T2, FP, 16
9D00B1B0  8CD60000   LW S6, 0(A2)
9D00B1B4  8CC80004   LW T0, 4(A2)
9D00B1B8  11400004   BEQ T2, ZERO, __fmt_x_needed
9D00B1BC  00E01025   OR V0, A3, ZERO
9D00B1C0  02C81825   OR V1, S6, T0
9D00B1C4  54600001   BNEL V1, ZERO, __fmt_x_needed
9D00B1C8  24E2FFFE   ADDIU V0, A3, -2
9D00B1CC  33CB0008   ANDI T3, FP, 8
9D00B1D0  55600001   BNEL T3, ZERO, __fmt_x_needed
9D00B1D4  2442FFFF   ADDIU V0, V0, -1
9D00B1D8  8EB00010   LW S0, 16(S5)
9D00B1DC  2534FFBF   ADDIU S4, T1, -65
9D00B1E0  00519023   SUBU S2, V0, S1
9D00B1E4  2610FFFF   ADDIU S0, S0, -1
9D00B1E8  02F01821   ADDU V1, S7, S0
9D00B1EC  A0600000   SB ZERO, 0(V1)
9D00B1F0  33C50002   ANDI A1, FP, 2
9D00B1F4  2E94001A   SLTIU S4, S4, 26
9D00B1F8  2A020002   SLTI V0, S0, 2
9D00B1FC  1440000A   BNE V0, ZERO, __fmt_x_needed
9D00B200  02C81025   OR V0, S6, T0
9D00B204  14400035   BNE V0, ZERO, __fmt_x_needed
9D00B208  32C3000F   ANDI V1, S6, 15
9D00B20C  1E200034   BGTZ S1, __fmt_x_needed
9D00B210  2864000A   SLTI A0, V1, 10
9D00B214  02511021   ADDU V0, S2, S1
9D00B218  18400003   BLEZ V0, __fmt_x_needed
9D00B21C  00000000   NOP
9D00B220  54A00030   BNEL A1, ZERO, __fmt_x_needed
9D00B224  2610FFFF   ADDIU S0, S0, -1
9D00B228  1140000B   BEQ T2, ZERO, __fmt_x_needed
9D00B22C  00000000   NOP
9D00B230  8CC20000   LW V0, 0(A2)
9D00B234  8CC30004   LW V1, 4(A2)
9D00B238  00431025   OR V0, V0, V1
9D00B23C  10400006   BEQ V0, ZERO, __fmt_x_needed
9D00B240  02F01021   ADDU V0, S7, S0
9D00B244  2610FFFE   ADDIU S0, S0, -2
9D00B248  A049FFFF   SB T1, -1(V0)
9D00B24C  24030030   ADDIU V1, ZERO, 48
9D00B250  02F01021   ADDU V0, S7, S0
9D00B254  A0430000   SB V1, 0(V0)
9D00B258  51600006   BEQL T3, ZERO, __fmt_x_needed
9D00B25C  8EA60010   LW A2, 16(S5)
9D00B260  2610FFFF   ADDIU S0, S0, -1
9D00B264  02F01021   ADDU V0, S7, S0
9D00B268  24030020   ADDIU V1, ZERO, 32
9D00B26C  A0430000   SB V1, 0(V0)
9D00B270  8EA60010   LW A2, 16(S5)
9D00B274  AFBE0010   SW FP, 16(SP)
9D00B278  02F02821   ADDU A1, S7, S0
9D00B27C  24C6FFFF   ADDIU A2, A2, -1
9D00B280  00D03023   SUBU A2, A2, S0
9D00B284  0F4036F2   JAL __pad
9D00B288  02602025   OR A0, S3, ZERO
9D00B28C  8E630004   LW V1, 4(S3)
9D00B290  30630100   ANDI V1, V1, 256
9D00B294  10600004   BEQ V1, ZERO, __fmt_x_needed
9D00B298  8FBF0054   LW RA, 84(SP)
9D00B29C  8EA30004   LW V1, 4(S5)
9D00B2A0  0043202A   SLT A0, V0, V1
9D00B2A4  0064100B   MOVN V0, V1, A0
9D00B2A8  8FBE0050   LW FP, 80(SP)
9D00B2AC  8FB7004C   LW S7, 76(SP)
9D00B2B0  8FB60048   LW S6, 72(SP)
9D00B2B4  8FB50044   LW S5, 68(SP)
9D00B2B8  8FB40040   LW S4, 64(SP)
9D00B2BC  8FB3003C   LW S3, 60(SP)
9D00B2C0  8FB20038   LW S2, 56(SP)
9D00B2C4  8FB10034   LW S1, 52(SP)
9D00B2C8  8FB00030   LW S0, 48(SP)
9D00B2CC  03E00008   JR RA
9D00B2D0  27BD0058   ADDIU SP, SP, 88
9D00B2D4  1000FFB5   BEQ ZERO, ZERO, __fmt_x_needed
9D00B2D8  24110001   ADDIU S1, ZERO, 1
9D00B2DC  2864000A   SLTI A0, V1, 10
9D00B2E0  2610FFFF   ADDIU S0, S0, -1
9D00B2E4  10800002   BEQ A0, ZERO, __fmt_x_needed
9D00B2E8  24620057   ADDIU V0, V1, 87
9D00B2EC  24620030   ADDIU V0, V1, 48
9D00B2F0  12800017   BEQ S4, ZERO, __fmt_x_needed
9D00B2F4  02F01821   ADDU V1, S7, S0
9D00B2F8  34430020   ORI V1, V0, 32
9D00B2FC  2463FF9F   ADDIU V1, V1, -97
9D00B300  2C63001A   SLTIU V1, V1, 26
9D00B304  10600012   BEQ V1, ZERO, __fmt_x_needed
9D00B308  02F01821   ADDU V1, S7, S0
9D00B30C  00402025   OR A0, V0, ZERO
9D00B310  AFA50028   SW A1, 40(SP)
9D00B314  AFA80024   SW T0, 36(SP)
9D00B318  AFA90064   SW T1, 100(SP)
9D00B31C  AFA60060   SW A2, 96(SP)
9D00B320  AFA70020   SW A3, 32(SP)
9D00B324  AFAB001C   SW T3, 28(SP)
9D00B328  0F404705   JAL toupper
9D00B32C  AFAA0018   SW T2, 24(SP)
9D00B330  8FA50028   LW A1, 40(SP)
9D00B334  8FA80024   LW T0, 36(SP)
9D00B338  8FA90064   LW T1, 100(SP)
9D00B33C  8FA60060   LW A2, 96(SP)
9D00B340  8FA70020   LW A3, 32(SP)
9D00B344  8FAB001C   LW T3, 28(SP)
9D00B348  8FAA0018   LW T2, 24(SP)
9D00B34C  02F01821   ADDU V1, S7, S0
9D00B350  A0620000   SB V0, 0(V1)
9D00B354  0016B102   SRL S6, S6, 4
9D00B358  00081700   SLL V0, T0, 28
9D00B35C  2631FFFF   ADDIU S1, S1, -1
9D00B360  0056B025   OR S6, V0, S6
9D00B364  1000FFA4   BEQ ZERO, ZERO, __fmt_x_needed
9D00B368  00084102   SRL T0, T0, 4
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/mchp/__fmt_u.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00CE68  27BDFFC0   ADDIU SP, SP, -64
9D00CE6C  8C820010   LW V0, 16(A0)
9D00CE70  AFB70034   SW S7, 52(SP)
9D00CE74  8C880004   LW T0, 4(A0)
9D00CE78  8FB70058   LW S7, 88(SP)
9D00CE7C  2442FFFF   ADDIU V0, V0, -1
9D00CE80  AFBE0038   SW FP, 56(SP)
9D00CE84  AFB40028   SW S4, 40(SP)
9D00CE88  AFB30024   SW S3, 36(SP)
9D00CE8C  AFB20020   SW S2, 32(SP)
9D00CE90  AFB1001C   SW S1, 28(SP)
9D00CE94  AFB00018   SW S0, 24(SP)
9D00CE98  AFBF003C   SW RA, 60(SP)
9D00CE9C  AFB60030   SW S6, 48(SP)
9D00CEA0  AFB5002C   SW S5, 44(SP)
9D00CEA4  00C08025   OR S0, A2, ZERO
9D00CEA8  00E08825   OR S1, A3, ZERO
9D00CEAC  8FB30054   LW S3, 84(SP)
9D00CEB0  8C94000C   LW S4, 12(A0)
9D00CEB4  8EFE0000   LW FP, 0(S7)
9D00CEB8  05010002   BGEZ T0, 0x9D00CEC4
9D00CEBC  00409025   OR S2, V0, ZERO
9D00CEC0  24080001   ADDIU T0, ZERO, 1
9D00CEC4  02821021   ADDU V0, S4, V0
9D00CEC8  A0400000   SB ZERO, 0(V0)
9D00CECC  0000A825   OR S5, ZERO, ZERO
9D00CED0  24090001   ADDIU T1, ZERO, 1
9D00CED4  33DE0002   ANDI FP, FP, 2
9D00CED8  0013B7C3   SRA S6, S3, 31
9D00CEDC  1E400010   BGTZ S2, 0x9D00CF20
9D00CEE0  02111025   OR V0, S0, S1
9D00CEE4  5120002E   BEQL T1, ZERO, 0x9D00CFA0
9D00CEE8  8EE20000   LW V0, 0(S7)
9D00CEEC  8FBF003C   LW RA, 60(SP)
9D00CEF0  02401025   OR V0, S2, ZERO
9D00CEF4  8FBE0038   LW FP, 56(SP)
9D00CEF8  8FB70034   LW S7, 52(SP)
9D00CEFC  8FB60030   LW S6, 48(SP)
9D00CF00  8FB5002C   LW S5, 44(SP)
9D00CF04  8FB40028   LW S4, 40(SP)
9D00CF08  8FB30024   LW S3, 36(SP)
9D00CF0C  8FB20020   LW S2, 32(SP)
9D00CF10  8FB1001C   LW S1, 28(SP)
9D00CF14  8FB00018   LW S0, 24(SP)
9D00CF18  03E00008   JR RA
9D00CF1C  27BD0040   ADDIU SP, SP, 64
9D00CF20  1440000A   BNE V0, ZERO, 0x9D00CF4C
9D00CF24  02002025   OR A0, S0, ZERO
9D00CF28  01151023   SUBU V0, T0, S5
9D00CF2C  1C400008   BGTZ V0, 0x9D00CF50
9D00CF30  02202825   OR A1, S1, ZERO
9D00CF34  8FA20050   LW V0, 80(SP)
9D00CF38  00551023   SUBU V0, V0, S5
9D00CF3C  1840FFE9   BLEZ V0, 0x9D00CEE4
9D00CF40  00000000   NOP
9D00CF44  13C0FFE7   BEQ FP, ZERO, 0x9D00CEE4
9D00CF48  00000000   NOP
9D00CF4C  02202825   OR A1, S1, ZERO
9D00CF50  02603025   OR A2, S3, ZERO
9D00CF54  02C03825   OR A3, S6, ZERO
9D00CF58  AFA80014   SW T0, 20(SP)
9D00CF5C  0F402291   JAL __umoddi3
9D00CF60  2652FFFF   ADDIU S2, S2, -1
9D00CF64  AFA20010   SW V0, 16(SP)
9D00CF68  02921821   ADDU V1, S4, S2
9D00CF6C  24420030   ADDIU V0, V0, 48
9D00CF70  02002025   OR A0, S0, ZERO
9D00CF74  02202825   OR A1, S1, ZERO
9D00CF78  A0620000   SB V0, 0(V1)
9D00CF7C  02603025   OR A2, S3, ZERO
9D00CF80  0F40238F   JAL __udivdi3
9D00CF84  02C03825   OR A3, S6, ZERO
9D00CF88  00408025   OR S0, V0, ZERO
9D00CF8C  00608825   OR S1, V1, ZERO
9D00CF90  26B50001   ADDIU S5, S5, 1
9D00CF94  8FA80014   LW T0, 20(SP)
9D00CF98  1000FFD0   BEQ ZERO, ZERO, 0x9D00CEDC
9D00CF9C  8FA90010   LW T1, 16(SP)
9D00CFA0  7C022104   INS V0, ZERO, 4, 1
9D00CFA4  1000FFD1   BEQ ZERO, ZERO, 0x9D00CEEC
9D00CFA8  AEE20000   SW V0, 0(S7)
9D00F4CC  8CA20000   LW V0, 0(A1)
9D00F4D0  8CA30004   LW V1, 4(A1)
9D00F4D4  27BDFFC0   ADDIU SP, SP, -64
9D00F4D8  AFB30038   SW S3, 56(SP)
9D00F4DC  AFB20034   SW S2, 52(SP)
9D00F4E0  AFB10030   SW S1, 48(SP)
9D00F4E4  AFB0002C   SW S0, 44(SP)
9D00F4E8  AFBF003C   SW RA, 60(SP)
9D00F4EC  00808825   OR S1, A0, ZERO
9D00F4F0  00A08025   OR S0, A1, ZERO
9D00F4F4  8CB20008   LW S2, 8(A1)
9D00F4F8  AFA20020   SW V0, 32(SP)
9D00F4FC  04600003   BLTZ V1, __fmt_u_needed
9D00F500  8CB3000C   LW S3, 12(A1)
9D00F504  7C020844   INS V0, ZERO, 1, 1
9D00F508  AFA20020   SW V0, 32(SP)
9D00F50C  27A20020   ADDIU V0, SP, 32
9D00F510  AFA20018   SW V0, 24(SP)
9D00F514  2402000A   ADDIU V0, ZERO, 10
9D00F518  AFA20014   SW V0, 20(SP)
9D00F51C  AFB20010   SW S2, 16(SP)
9D00F520  8CC70004   LW A3, 4(A2)
9D00F524  8CC60000   LW A2, 0(A2)
9D00F528  0F40339A   JAL __cvt_u
9D00F52C  02002025   OR A0, S0, ZERO
9D00F530  8E060010   LW A2, 16(S0)
9D00F534  8FA30020   LW V1, 32(SP)
9D00F538  02403825   OR A3, S2, ZERO
9D00F53C  24C6FFFF   ADDIU A2, A2, -1
9D00F540  AFA30010   SW V1, 16(SP)
9D00F544  00C23023   SUBU A2, A2, V0
9D00F548  02622821   ADDU A1, S3, V0
9D00F54C  0F4036F2   JAL __pad
9D00F550  02202025   OR A0, S1, ZERO
9D00F554  8E230004   LW V1, 4(S1)
9D00F558  30630100   ANDI V1, V1, 256
9D00F55C  10600004   BEQ V1, ZERO, __fmt_u_needed
9D00F560  8FBF003C   LW RA, 60(SP)
9D00F564  8E030004   LW V1, 4(S0)
9D00F568  0043202A   SLT A0, V0, V1
9D00F56C  0064100B   MOVN V0, V1, A0
9D00F570  8FB30038   LW S3, 56(SP)
9D00F574  8FB20034   LW S2, 52(SP)
9D00F578  8FB10030   LW S1, 48(SP)
9D00F57C  8FB0002C   LW S0, 44(SP)
9D00F580  03E00008   JR RA
9D00F584  27BD0040   ADDIU SP, SP, 64
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/mchp/__fmt_s.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00F8EC  3C036C75   LUI V1, 27765
9D00F8F0  27BDFFC8   ADDIU SP, SP, -56
9D00F8F4  24636E28   ADDIU V1, V1, 28200
9D00F8F8  AFA30018   SW V1, 24(SP)
9D00F8FC  2403296C   ADDIU V1, ZERO, 10604
9D00F900  AFB40030   SW S4, 48(SP)
9D00F904  AFB3002C   SW S3, 44(SP)
9D00F908  AFB20028   SW S2, 40(SP)
9D00F90C  AFB10024   SW S1, 36(SP)
9D00F910  AFB00020   SW S0, 32(SP)
9D00F914  AFBF0034   SW RA, 52(SP)
9D00F918  00809025   OR S2, A0, ZERO
9D00F91C  00E01025   OR V0, A3, ZERO
9D00F920  A7A3001C   SH V1, 28(SP)
9D00F924  A3A0001E   SB ZERO, 30(SP)
9D00F928  8CB10004   LW S1, 4(A1)
9D00F92C  8CB30008   LW S3, 8(A1)
9D00F930  8CB40000   LW S4, 0(A1)
9D00F934  10C00002   BEQ A2, ZERO, __fmt_s_needed, __fmt_0_needed
9D00F938  27B00018   ADDIU S0, SP, 24
9D00F93C  00C08025   OR S0, A2, ZERO
9D00F940  14400003   BNE V0, ZERO, __fmt_s_needed, __fmt_0_needed
9D00F944  00000000   NOP
9D00F948  0F403196   JAL strlen
9D00F94C  02002025   OR A0, S0, ZERO
9D00F950  06200002   BLTZ S1, __fmt_s_needed, __fmt_0_needed
9D00F954  0222182B   SLTU V1, S1, V0
9D00F958  0223100B   MOVN V0, S1, V1
9D00F95C  AFB40010   SW S4, 16(SP)
9D00F960  02603825   OR A3, S3, ZERO
9D00F964  02002825   OR A1, S0, ZERO
9D00F968  02402025   OR A0, S2, ZERO
9D00F96C  0F4036F2   JAL __pad
9D00F970  00403025   OR A2, V0, ZERO
9D00F974  8FBF0034   LW RA, 52(SP)
9D00F978  8FB40030   LW S4, 48(SP)
9D00F97C  8FB3002C   LW S3, 44(SP)
9D00F980  8FB20028   LW S2, 40(SP)
9D00F984  8FB10024   LW S1, 36(SP)
9D00F988  8FB00020   LW S0, 32(SP)
9D00F98C  03E00008   JR RA
9D00F990  27BD0038   ADDIU SP, SP, 56
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/mchp/__fmt_o.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00E0C8  8CA20000   LW V0, 0(A1)
9D00E0CC  8CA30004   LW V1, 4(A1)
9D00E0D0  27BDFFC0   ADDIU SP, SP, -64
9D00E0D4  AFB30038   SW S3, 56(SP)
9D00E0D8  AFB20034   SW S2, 52(SP)
9D00E0DC  AFB10030   SW S1, 48(SP)
9D00E0E0  AFB0002C   SW S0, 44(SP)
9D00E0E4  AFBF003C   SW RA, 60(SP)
9D00E0E8  00809025   OR S2, A0, ZERO
9D00E0EC  00A08025   OR S0, A1, ZERO
9D00E0F0  8CB30008   LW S3, 8(A1)
9D00E0F4  AFA20020   SW V0, 32(SP)
9D00E0F8  04600003   BLTZ V1, __fmt_o_needed
9D00E0FC  8CB1000C   LW S1, 12(A1)
9D00E100  7C020844   INS V0, ZERO, 1, 1
9D00E104  AFA20020   SW V0, 32(SP)
9D00E108  27A20020   ADDIU V0, SP, 32
9D00E10C  AFA20018   SW V0, 24(SP)
9D00E110  24020008   ADDIU V0, ZERO, 8
9D00E114  AFA20014   SW V0, 20(SP)
9D00E118  AFB30010   SW S3, 16(SP)
9D00E11C  8CC70004   LW A3, 4(A2)
9D00E120  8CC60000   LW A2, 0(A2)
9D00E124  0F40339A   JAL __cvt_u
9D00E128  02002025   OR A0, S0, ZERO
9D00E12C  8FA30020   LW V1, 32(SP)
9D00E130  30630010   ANDI V1, V1, 16
9D00E134  10600006   BEQ V1, ZERO, __fmt_o_needed
9D00E138  8FA30020   LW V1, 32(SP)
9D00E13C  2442FFFF   ADDIU V0, V0, -1
9D00E140  02221821   ADDU V1, S1, V0
9D00E144  24040030   ADDIU A0, ZERO, 48
9D00E148  A0640000   SB A0, 0(V1)
9D00E14C  8FA30020   LW V1, 32(SP)
9D00E150  30630008   ANDI V1, V1, 8
9D00E154  50600006   BEQL V1, ZERO, __fmt_o_needed
9D00E158  8E060010   LW A2, 16(S0)
9D00E15C  2442FFFF   ADDIU V0, V0, -1
9D00E160  02221821   ADDU V1, S1, V0
9D00E164  24040020   ADDIU A0, ZERO, 32
9D00E168  A0640000   SB A0, 0(V1)
9D00E16C  8E060010   LW A2, 16(S0)
9D00E170  8FA30020   LW V1, 32(SP)
9D00E174  02603825   OR A3, S3, ZERO
9D00E178  24C6FFFF   ADDIU A2, A2, -1
9D00E17C  AFA30010   SW V1, 16(SP)
9D00E180  00C23023   SUBU A2, A2, V0
9D00E184  02222821   ADDU A1, S1, V0
9D00E188  0F4036F2   JAL __pad
9D00E18C  02402025   OR A0, S2, ZERO
9D00E190  8E430004   LW V1, 4(S2)
9D00E194  30630100   ANDI V1, V1, 256
9D00E198  10600004   BEQ V1, ZERO, __fmt_o_needed
9D00E19C  8FBF003C   LW RA, 60(SP)
9D00E1A0  8E030004   LW V1, 4(S0)
9D00E1A4  0043202A   SLT A0, V0, V1
9D00E1A8  0064100B   MOVN V0, V1, A0
9D00E1AC  8FB30038   LW S3, 56(SP)
9D00E1B0  8FB20034   LW S2, 52(SP)
9D00E1B4  8FB10030   LW S1, 48(SP)
9D00E1B8  8FB0002C   LW S0, 44(SP)
9D00E1BC  03E00008   JR RA
9D00E1C0  27BD0040   ADDIU SP, SP, 64
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/mchp/__fmt_fp.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D006DC0  27BDFF68   ADDIU SP, SP, -152
9D006DC4  AFA700A4   SW A3, 164(SP)
9D006DC8  D4C00000   LDC1 F0, 0(A2)
9D006DCC  8CA20008   LW V0, 8(A1)
9D006DD0  AFB60068   SW S6, 104(SP)
9D006DD4  F7A00018   SDC1 F0, 24(SP)
9D006DD8  44800000   MTC1 ZERO, F0
9D006DDC  D7A10018   LDC1 F1, 24(SP)
9D006DE0  44E00000   MTHC1 ZERO, F0
9D006DE4  AFA20020   SW V0, 32(SP)
9D006DE8  4620083C   C.LT.D F1, F0
9D006DEC  8CA20010   LW V0, 16(A1)
9D006DF0  AFB50064   SW S5, 100(SP)
9D006DF4  AFB00050   SW S0, 80(SP)
9D006DF8  AFBF0074   SW RA, 116(SP)
9D006DFC  AFBE0070   SW FP, 112(SP)
9D006E00  AFB7006C   SW S7, 108(SP)
9D006E04  AFB40060   SW S4, 96(SP)
9D006E08  AFB3005C   SW S3, 92(SP)
9D006E0C  AFB20058   SW S2, 88(SP)
9D006E10  AFB10054   SW S1, 84(SP)
9D006E14  F7B80088   SDC1 F24, 136(SP)
9D006E18  F7B60080   SDC1 F22, 128(SP)
9D006E1C  F7B40078   SDC1 F20, 120(SP)
9D006E20  AFA40098   SW A0, 152(SP)
9D006E24  8CB60000   LW S6, 0(A1)
9D006E28  8CB50004   LW S5, 4(A1)
9D006E2C  AFA20034   SW V0, 52(SP)
9D006E30  4501000C   BC1T __fmt_f_needed
9D006E34  8CB0000C   LW S0, 12(A1)
9D006E38  32C20004   ANDI V0, S6, 4
9D006E3C  14400012   BNE V0, ZERO, __fmt_f_needed
9D006E40  2402002B   ADDIU V0, ZERO, 43
9D006E44  32C20008   ANDI V0, S6, 8
9D006E48  AFA20024   SW V0, 36(SP)
9D006E4C  10400013   BEQ V0, ZERO, __fmt_fp::__DOUBLE_BITS
9D006E50  8FB30020   LW S3, 32(SP)
9D006E54  24020020   ADDIU V0, ZERO, 32
9D006E58  A2020000   SB V0, 0(S0)
9D006E5C  1000000D   BEQ ZERO, ZERO, __fmt_f_needed
9D006E60  2673FFFF   ADDIU S3, S3, -1
9D006E64  8FA20018   LW V0, 24(SP)
9D006E68  8FA3001C   LW V1, 28(SP)
9D006E6C  AFA20028   SW V0, 40(SP)
9D006E70  3C028000   LUI V0, -32768
9D006E74  00431026   XOR V0, V0, V1
9D006E78  AFA2002C   SW V0, 44(SP)
9D006E7C  D7A10028   LDC1 F1, 40(SP)
9D006E80  2402002D   ADDIU V0, ZERO, 45
9D006E84  F7A10018   SDC1 F1, 24(SP)
9D006E88  A2020000   SB V0, 0(S0)
9D006E8C  8FA20020   LW V0, 32(SP)
9D006E90  2453FFFF   ADDIU S3, V0, -1
9D006E94  24020001   ADDIU V0, ZERO, 1
9D006E98  AFA20024   SW V0, 36(SP)
9D006E9C  8FA30024   LW V1, 36(SP)
9D006EA0  8FA2001C   LW V0, 28(SP)
9D006EA4  8FA40018   LW A0, 24(SP)
9D006EA8  02031821   ADDU V1, S0, V1
9D006EAC  7C42F000   EXT V0, V0, 0, 31
9D006EB0  14800026   BNE A0, ZERO, __fmt_fp::__DOUBLE_BITS
9D006EB4  AFA30030   SW V1, 48(SP)
9D006EB8  3C037FF0   LUI V1, 32752
9D006EBC  14430024   BNE V0, V1, __fmt_f_needed
9D006EC0  3C087FF0   LUI T0, 32752
9D006EC4  8FA200A4   LW V0, 164(SP)
9D006EC8  3C119D01   LUI S1, -25343
9D006ECC  2442FFBF   ADDIU V0, V0, -65
9D006ED0  2C42001A   SLTIU V0, V0, 26
9D006ED4  10400003   BEQ V0, ZERO, __fmt_f_needed
9D006ED8  26251D64   ADDIU A1, S1, 7524
9D006EDC  3C059D01   LUI A1, -25343
9D006EE0  24A51D60   ADDIU A1, A1, 7520
9D006EE4  0F4046A1   JAL strcpy
9D006EE8  8FA40030   LW A0, 48(SP)
9D006EEC  26241D64   ADDIU A0, S1, 7524
9D006EF0  0F403196   JAL strlen
9D006EF4  00000000   NOP
9D006EF8  8FA70020   LW A3, 32(SP)
9D006EFC  8FA40098   LW A0, 152(SP)
9D006F00  AFB60010   SW S6, 16(SP)
9D006F04  02002825   OR A1, S0, ZERO
9D006F08  0F4036F2   JAL __pad
9D006F0C  00403025   OR A2, V0, ZERO
9D006F10  8FBF0074   LW RA, 116(SP)
9D006F14  8FBE0070   LW FP, 112(SP)
9D006F18  8FB7006C   LW S7, 108(SP)
9D006F1C  8FB60068   LW S6, 104(SP)
9D006F20  8FB50064   LW S5, 100(SP)
9D006F24  8FB40060   LW S4, 96(SP)
9D006F28  8FB3005C   LW S3, 92(SP)
9D006F2C  8FB20058   LW S2, 88(SP)
9D006F30  8FB10054   LW S1, 84(SP)
9D006F34  8FB00050   LW S0, 80(SP)
9D006F38  D7B80088   LDC1 F24, 136(SP)
9D006F3C  D7B60080   LDC1 F22, 128(SP)
9D006F40  D7B40078   LDC1 F20, 120(SP)
9D006F44  03E00008   JR RA
9D006F48  27BD0098   ADDIU SP, SP, 152
9D006F4C  3C087FF0   LUI T0, 32752
9D006F70  8FA200A4   LW V0, 164(SP)
9D006F74  3C119D01   LUI S1, -25343
9D006F78  2442FFBF   ADDIU V0, V0, -65
9D006F7C  2C42001A   SLTIU V0, V0, 26
9D006F80  10400003   BEQ V0, ZERO, __fmt_f_needed
9D006F84  26251D6C   ADDIU A1, S1, 7532
9D006F88  3C059D01   LUI A1, -25343
9D006F8C  24A51D68   ADDIU A1, A1, 7528
9D006F90  0F4046A1   JAL strcpy
9D006F94  8FA40030   LW A0, 48(SP)
9D006F98  1000FFD5   BEQ ZERO, ZERO, __fmt_f_needed
9D006F9C  26241D6C   ADDIU A0, S1, 7532
9D006FA0  3C119D01   LUI S1, -25343
9D006FA4  3C0B9D01   LUI T3, -25343
9D006FA8  46200932   C.EQ.D 1, F1, F0
9D006FAC  D6341B60   LDC1 F20, 7008(S1)
9D006FB0  45040021   BC1F 1, __fmt_f_needed
9D006FB4  0000B825   OR S7, ZERO, ZERO
9D006FB8  8FA400A4   LW A0, 164(SP)
9D006FBC  AFAB0028   SW T3, 40(SP)
9D006FC0  0F4046FE   JAL tolower
9D006FC4  AFA5009C   SW A1, 156(SP)
9D006FC8  7C023C20   SEB A3, V0
9D006FCC  8FA5009C   LW A1, 156(SP)
9D006FD0  8FAB0028   LW T3, 40(SP)
9D006FD4  06A00123   BLTZ S5, __fmt_f_needed
9D006FD8  24040067   ADDIU A0, ZERO, 103
9D006FDC  14E4008C   BNE A3, A0, __fmt_f_needed
9D006FE0  00E0A025   OR S4, A3, ZERO
9D006FE4  52A00001   BEQL S5, ZERO, __fmt_f_needed
9D006FE8  24150001   ADDIU S5, ZERO, 1
9D006FEC  2AE4FFFC   SLTI A0, S7, -4
9D006FF0  14800091   BNE A0, ZERO, __fmt_f_needed
9D006FF4  24140065   ADDIU S4, ZERO, 101
9D006FF8  02F5202A   SLT A0, S7, S5
9D006FFC  14800081   BNE A0, ZERO, __fmt_f_needed
9D007000  D7A00018   LDC1 F0, 24(SP)
9D007004  1000008D   BEQ ZERO, ZERO, __fmt_f_needed
9D007008  00000000   NOP
9D00700C  26F70001   ADDIU S7, S7, 1
9D007010  4622A002   MUL.D F0, F20, F2
9D007014  D7A10018   LDC1 F1, 24(SP)
9D007018  46200A3C   C.LT.D 2, F1, F0
9D00701C  450AFFFB   BC1FL 2, __fmt_f_needed
9D007020  46200506   MOV.D F20, F0
9D007024  3C049D01   LUI A0, -25343
9D007028  00001025   OR V0, ZERO, ZERO
9D00702C  D4801B70   LDC1 F0, 7024(A0)
9D007030  1000000F   BEQ ZERO, ZERO, __fmt_f_needed
9D007034  D5621B68   LDC1 F2, 7016(T3)
9D007038  1000FFF5   BEQ ZERO, ZERO, __fmt_f_needed
9D00703C  D5621B68   LDC1 F2, 7016(T3)
9D007040  50800009   BEQL A0, ZERO, __fmt_f_needed
9D007044  4622A503   DIV.D F20, F20, F2
9D007048  54400007   BNEL V0, ZERO, __fmt_f_needed
9D00704C  4622A503   DIV.D F20, F20, F2
9D007050  D7A10018   LDC1 F1, 24(SP)
9D007054  4620A502   MUL.D F20, F20, F0
9D007058  24020001   ADDIU V0, ZERO, 1
9D00705C  46200842   MUL.D F1, F1, F0
9D007060  F7A10018   SDC1 F1, 24(SP)
9D007064  4622A503   DIV.D F20, F20, F2
9D007068  26F7FFFF   ADDIU S7, S7, -1
9D00706C  D7A10018   LDC1 F1, 24(SP)
9D007070  46340B3C   C.LT.D 3, F1, F20
9D007074  450FFFF2   BC1TL 3, __fmt_f_needed
9D007078  2AE4FED4   SLTI A0, S7, -300
9D00707C  1000FFCF   BEQ ZERO, ZERO, __fmt_f_needed
9D007080  8FA400A4   LW A0, 164(SP)
9D007084  1000009D   BEQ ZERO, ZERO, __fmt_f_needed
9D007088  44E07000   MTHC1 ZERO, F14
9D00708C  AFA5009C   SW A1, 156(SP)
9D007090  44E30000   MTHC1 V1, F0
9D007094  AFA7004C   SW A3, 76(SP)
9D007098  46340303   DIV.D F12, F0, F20
9D00709C  AFA80048   SW T0, 72(SP)
9D0070A0  AFA40038   SW A0, 56(SP)
9D0070A4  AFA20028   SW V0, 40(SP)
9D0070A8  0F403D62   JAL floor
9D0070AC  AFA3002C   SW V1, 44(SP)
9D0070B0  4620004D   TRUNC.W.D F1, F0
9D0070B4  8FA20018   LW V0, 24(SP)
9D0070B8  440B0800   MFC1 T3, F1
9D0070BC  8FA3002C   LW V1, 44(SP)
9D0070C0  004B4825   OR T1, V0, T3
9D0070C4  8FA40038   LW A0, 56(SP)
9D0070C8  8FA20028   LW V0, 40(SP)
9D0070CC  8FA80048   LW T0, 72(SP)
9D0070D0  8FA7004C   LW A3, 76(SP)
9D0070D4  1520000A   BNE T1, ZERO, __fmt_f_needed
9D0070D8  8FA5009C   LW A1, 156(SP)
9D0070DC  24090067   ADDIU T1, ZERO, 103
9D0070E0  14E90007   BNE A3, T1, __fmt_f_needed
9D0070E4  00000000   NOP
9D0070E8  07C0001C   BLTZ FP, __fmt_f_needed
9D0070EC  25040001   ADDIU A0, T0, 1
9D0070F0  02404825   OR T1, S2, ZERO
9D0070F4  02126021   ADDU T4, S0, S2
9D0070F8  1000000E   BEQ ZERO, ZERO, __fmt_f_needed
9D0070FC  01002025   OR A0, T0, ZERO
9D007100  1620FFFC   BNE S1, ZERO, __fmt_f_needed
9D007104  02404825   OR T1, S2, ZERO
9D007108  07C1FFFA   BGEZ FP, __fmt_f_needed
9D00710C  2406002E   ADDIU A2, ZERO, 46
9D007110  02042021   ADDU A0, S0, A0
9D007114  26520001   ADDIU S2, S2, 1
9D007118  2673FFFF   ADDIU S3, S3, -1
9D00711C  A0860000   SB A2, 0(A0)
9D007120  1000FFF3   BEQ ZERO, ZERO, __fmt_f_needed
9D007124  24110001   ADDIU S1, ZERO, 1
9D007128  A1860000   SB A2, 0(T4)
9D00712C  2484FFFF   ADDIU A0, A0, -1
9D007130  258C0001   ADDIU T4, T4, 1
9D007134  1480FFFC   BNE A0, ZERO, __fmt_f_needed
9D007138  24060030   ADDIU A2, ZERO, 48
9D00713C  26520001   ADDIU S2, S2, 1
9D007140  2666FFFF   ADDIU A2, S3, -1
9D007144  02094821   ADDU T1, S0, T1
9D007148  02489021   ADDU S2, S2, T0
9D00714C  00C89823   SUBU S3, A2, T0
9D007150  256B0030   ADDIU T3, T3, 48
9D007154  01284021   ADDU T0, T1, T0
9D007158  A10B0000   SB T3, 0(T0)
9D00715C  3C0B8000   LUI T3, -32768
9D007160  AFA40038   SW A0, 56(SP)
9D007164  01632026   XOR A0, T3, V1
9D007168  AFA20040   SW V0, 64(SP)
9D00716C  AFA40044   SW A0, 68(SP)
9D007170  D7A10040   LDC1 F1, 64(SP)
9D007174  4620A386   MOV.D F14, F20
9D007178  46200306   MOV.D F12, F0
9D00717C  F7A10010   SDC1 F1, 16(SP)
9D007180  AFA5009C   SW A1, 156(SP)
9D007184  AFA70048   SW A3, 72(SP)
9D007188  AFA20028   SW V0, 40(SP)
9D00718C  0F401D1D   JAL fma
9D007190  AFA3002C   SW V1, 44(SP)
9D007194  8FA40038   LW A0, 56(SP)
9D007198  44080000   MFC1 T0, F0
9D00719C  44690000   MFHC1 T1, F0
9D0071A0  3C0B8000   LUI T3, -32768
9D0071A4  01001025   OR V0, T0, ZERO
9D0071A8  01691826   XOR V1, T3, T1
9D0071AC  4636A503   DIV.D F20, F20, F22
9D0071B0  27DEFFFF   ADDIU FP, FP, -1
9D0071B4  00804025   OR T0, A0, ZERO
9D0071B8  8FA5009C   LW A1, 156(SP)
9D0071BC  1000005E   BEQ ZERO, ZERO, __fmt_f_needed
9D0071C0  8FA70048   LW A3, 72(SP)
9D0071C4  02E9001A   DIV S7, T1
9D0071C8  012001F4   TEQ T1, ZERO
9D0071CC  02055821   ADDU T3, S0, A1
9D0071D0  00A01025   OR V0, A1, ZERO
9D0071D4  2673FFFF   ADDIU S3, S3, -1
9D0071D8  00002810   MFHI A1
9D0071DC  24A50030   ADDIU A1, A1, 48
9D0071E0  A1650000   SB A1, 0(T3)
9D0071E4  10000074   BEQ ZERO, ZERO, __fmt_f_needed
9D0071E8  0000B812   MFLO S7
9D0071EC  80640000   LB A0, 0(V1)
9D0071F0  02621821   ADDU V1, S3, V0
9D0071F4  02031821   ADDU V1, S0, V1
9D0071F8  A0640000   SB A0, 0(V1)
9D0071FC  1000008C   BEQ ZERO, ZERO, __fmt_f_needed
9D007200  2442FFFF   ADDIU V0, V0, -1
9D007204  06E10009   BGEZ S7, __fmt_f_needed
9D007208  24040067   ADDIU A0, ZERO, 103
9D00720C  24140066   ADDIU S4, ZERO, 102
9D007210  24040066   ADDIU A0, ZERO, 102
9D007214  16840008   BNE S4, A0, __fmt_f_needed
9D007218  26B50001   ADDIU S5, S5, 1
9D00721C  06E10003   BGEZ S7, __fmt_f_needed
9D007220  24040067   ADDIU A0, ZERO, 103
9D007224  D6341B60   LDC1 F20, 7008(S1)
9D007228  0000B825   OR S7, ZERO, ZERO
9D00722C  10E40002   BEQ A3, A0, __fmt_f_needed
9D007230  24140066   ADDIU S4, ZERO, 102
9D007234  02B7A821   ADDU S5, S5, S7
9D007238  D7A00018   LDC1 F0, 24(SP)
9D00723C  D5781B68   LDC1 F24, 7016(T3)
9D007240  4620A586   MOV.D F22, F20
9D007244  F7A00028   SDC1 F0, 40(SP)
9D007248  00009025   OR S2, ZERO, ZERO
9D00724C  3C1E8000   LUI FP, -32768
9D007250  D7A00028   LDC1 F0, 40(SP)
9D007254  AFAB004C   SW T3, 76(SP)
9D007258  AFA5009C   SW A1, 156(SP)
9D00725C  46360303   DIV.D F12, F0, F22
9D007260  AFA70048   SW A3, 72(SP)
9D007264  0F403D62   JAL floor
9D007268  26520001   ADDIU S2, S2, 1
9D00726C  8FA20028   LW V0, 40(SP)
9D007270  4620004D   TRUNC.W.D F1, F0
9D007274  44110800   MFC1 S1, F1
9D007278  AFA20038   SW V0, 56(SP)
9D00727C  8FA2002C   LW V0, 44(SP)
9D007280  4620B386   MOV.D F14, F22
9D007284  46200306   MOV.D F12, F0
9D007288  03C21026   XOR V0, FP, V0
9D00728C  AFA2003C   SW V0, 60(SP)
9D007290  D7A10038   LDC1 F1, 56(SP)
9D007294  4638B583   DIV.D F22, F22, F24
9D007298  0F401D1D   JAL fma
9D00729C  F7A10010   SDC1 F1, 16(SP)
9D0072A0  44690000   MFHC1 T1, F0
9D0072A4  44080000   MFC1 T0, F0
9D0072A8  03C91026   XOR V0, FP, T1
9D0072AC  AFA80028   SW T0, 40(SP)
9D0072B0  AFA2002C   SW V0, 44(SP)
9D0072B4  8FA70048   LW A3, 72(SP)
9D0072B8  8FA5009C   LW A1, 156(SP)
9D0072BC  16B2FFE4   BNE S5, S2, __fmt_f_needed
9D0072C0  8FAB004C   LW T3, 76(SP)
9D0072C4  3C049D01   LUI A0, -25343
9D0072C8  D48E1B78   LDC1 F14, 7032(A0)
9D0072CC  D7A00028   LDC1 F0, 40(SP)
9D0072D0  462EB382   MUL.D F14, F22, F14
9D0072D4  462E043C   C.LT.D 4, F0, F14
9D0072D8  4513FF6A   BC1TL 4, __fmt_f_needed
9D0072DC  44807000   MTC1 ZERO, F14
9D0072E0  462E0532   C.EQ.D 5, F0, F14
9D0072E4  45140006   BC1F 5, __fmt_f_needed
9D0072E8  D7A00018   LDC1 F0, 24(SP)
9D0072EC  44800000   MTC1 ZERO, F0
9D0072F0  32310001   ANDI S1, S1, 1
9D0072F4  44E00000   MTHC1 ZERO, F0
9D0072F8  46310392   MOVZ.D F14, F0, S1
9D0072FC  D7A00018   LDC1 F0, 24(SP)
9D007300  3A9E0065   XORI FP, S4, 101
9D007304  02E02025   OR A0, S7, ZERO
9D007308  462E0000   ADD.D F0, F0, F14
9D00730C  001E200A   MOVZ A0, ZERO, FP
9D007310  8FB20024   LW S2, 36(SP)
9D007314  D5761B68   LDC1 F22, 7016(T3)
9D007318  0080F025   OR FP, A0, ZERO
9D00731C  0095A823   SUBU S5, A0, S5
9D007320  44020000   MFC1 V0, F0
9D007324  32C40010   ANDI A0, S6, 16
9D007328  44630000   MFHC1 V1, F0
9D00732C  00004025   OR T0, ZERO, ZERO
9D007330  00008825   OR S1, ZERO, ZERO
9D007334  AFA40018   SW A0, 24(SP)
9D007338  12BE0006   BEQ S5, FP, __fmt_f_needed
9D00733C  02402025   OR A0, S2, ZERO
9D007340  8CA90010   LW T1, 16(A1)
9D007344  2529FFFB   ADDIU T1, T1, -5
9D007348  0249482B   SLTU T1, S2, T1
9D00734C  5520FF4F   BNEL T1, ZERO, __fmt_f_needed
9D007350  44820000   MTC1 V0, F0
9D007354  56200009   BNEL S1, ZERO, __fmt_f_needed
9D007358  02122021   ADDU A0, S0, S2
9D00735C  32C20010   ANDI V0, S6, 16
9D007360  50400006   BEQL V0, ZERO, __fmt_f_needed
9D007364  02122021   ADDU A0, S0, S2
9D007368  02042021   ADDU A0, S0, A0
9D00736C  2402002E   ADDIU V0, ZERO, 46
9D007370  26520001   ADDIU S2, S2, 1
9D007374  A0820000   SB V0, 0(A0)
9D007378  02122021   ADDU A0, S0, S2
9D00737C  24020065   ADDIU V0, ZERO, 101
9D007380  16820023   BNE S4, V0, __fmt_f_needed
9D007384  A0800000   SB ZERO, 0(A0)
9D007388  8FA20034   LW V0, 52(SP)
9D00738C  00003825   OR A3, ZERO, ZERO
9D007390  2442FFFF   ADDIU V0, V0, -1
9D007394  02022821   ADDU A1, S0, V0
9D007398  06E10003   BGEZ S7, __fmt_f_needed
9D00739C  A0A00000   SB ZERO, 0(A1)
9D0073A0  0017B823   SUBU S7, ZERO, S7
9D0073A4  24070001   ADDIU A3, ZERO, 1
9D0073A8  8FA30034   LW V1, 52(SP)
9D0073AC  24080003   ADDIU T0, ZERO, 3
9D0073B0  2409000A   ADDIU T1, ZERO, 10
9D0073B4  01034023   SUBU T0, T0, V1
9D0073B8  16E0FF82   BNE S7, ZERO, __fmt_f_needed
9D0073BC  2445FFFF   ADDIU A1, V0, -1
9D0073C0  01025821   ADDU T3, T0, V0
9D0073C4  1D60FF7F   BGTZ T3, __fmt_f_needed
9D0073C8  2403002B   ADDIU V1, ZERO, 43
9D0073CC  2408002D   ADDIU T0, ZERO, 45
9D0073D0  0107180B   MOVN V1, T0, A3
9D0073D4  02052821   ADDU A1, S0, A1
9D0073D8  A0A30000   SB V1, 0(A1)
9D0073DC  8FA300A4   LW V1, 164(SP)
9D0073E0  2442FFFE   ADDIU V0, V0, -2
9D0073E4  24050045   ADDIU A1, ZERO, 69
9D0073E8  2463FFBF   ADDIU V1, V1, -65
9D0073EC  2C63001A   SLTIU V1, V1, 26
9D0073F0  00A3A00B   MOVN S4, A1, V1
9D0073F4  0242902A   SLT S2, S2, V0
9D0073F8  02022821   ADDU A1, S0, V0
9D0073FC  A0B40000   SB S4, 0(A1)
9D007400  12400003   BEQ S2, ZERO, __fmt_f_needed
9D007404  2673FFFE   ADDIU S3, S3, -2
9D007408  0F4046A1   JAL strcpy
9D00740C  00000000   NOP
9D007410  32C20003   ANDI V0, S6, 3
9D007414  24030002   ADDIU V1, ZERO, 2
9D007418  1443FEB5   BNE V0, V1, __fmt_f_needed
9D00741C  02002025   OR A0, S0, ZERO
9D007420  1A60FEB3   BLEZ S3, __fmt_f_needed
9D007424  00000000   NOP
9D007428  0F403196   JAL strlen
9D00742C  02002025   OR A0, S0, ZERO
9D007430  8FA30024   LW V1, 36(SP)
9D007434  0043182A   SLT V1, V0, V1
9D007438  1060FF6C   BEQ V1, ZERO, __fmt_f_needed
9D00743C  02021821   ADDU V1, S0, V0
9D007440  8FA40030   LW A0, 48(SP)
9D007444  02603025   OR A2, S3, ZERO
9D007448  0F4046C7   JAL memset
9D00744C  24050030   ADDIU A1, ZERO, 48
9D007450  AFA00020   SW ZERO, 32(SP)
9D007454  1000FEA6   BEQ ZERO, ZERO, __fmt_f_needed
9D007458  02002025   OR A0, S0, ZERO
9D00745C  1000FEE3   BEQ ZERO, ZERO, __fmt_f_needed
9D007460  24150006   ADDIU S5, ZERO, 6
9D007464  10E4FEE1   BEQ A3, A0, __fmt_f_needed
9D007468  24150006   ADDIU S5, ZERO, 6
9D00746C  1000FF68   BEQ ZERO, ZERO, __fmt_f_needed
9D007470  00E0A025   OR S4, A3, ZERO
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/mchp/__fmt_d.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00C7C0  27BDFFC0   ADDIU SP, SP, -64
9D00C7D0  8C870004   LW A3, 4(A0)
9D00C7D4  8CA20000   LW V0, 0(A1)
9D00C7D8  AFB20030   SW S2, 48(SP)
9D00C7DC  000797C2   SRL S2, A3, 31
9D00C7E0  AFB40038   SW S4, 56(SP)
9D00C7E4  AFB30034   SW S3, 52(SP)
9D00C7E8  AFB00028   SW S0, 40(SP)
9D00C7EC  AFBF003C   SW RA, 60(SP)
9D00C7F0  00A08025   OR S0, A1, ZERO
9D00C7F4  8CA30004   LW V1, 4(A1)
9D00C7F8  8CB30008   LW S3, 8(A1)
9D00C7FC  AFA20020   SW V0, 32(SP)
9D00C800  8CB4000C   LW S4, 12(A1)
9D00C804  12400040   BEQ S2, ZERO, __fmt_d_needed
9D00C808  8CC60000   LW A2, 0(A2)
9D00C80C  00063023   SUBU A2, ZERO, A2
9D00C810  0006202B   SLTU A0, ZERO, A2
9D00C814  00073823   SUBU A3, ZERO, A3
9D00C818  04600008   BLTZ V1, __fmt_d_needed
9D00C81C  00E43823   SUBU A3, A3, A0
9D00C820  7C020844   INS V0, ZERO, 1, 1
9D00C824  16400005   BNE S2, ZERO, __fmt_d_needed
9D00C828  AFA20020   SW V0, 32(SP)
9D00C82C  8FA20020   LW V0, 32(SP)
9D00C830  30430004   ANDI V1, V0, 4
9D00C834  1060002C   BEQ V1, ZERO, __fmt_d_needed
9D00C838  7C4200C0   EXT V0, V0, 3, 1
9D00C83C  2662FFFF   ADDIU V0, S3, -1
9D00C840  27A30020   ADDIU V1, SP, 32
9D00C844  AFA30018   SW V1, 24(SP)
9D00C848  2403000A   ADDIU V1, ZERO, 10
9D00C84C  AFA30014   SW V1, 20(SP)
9D00C850  AFA20010   SW V0, 16(SP)
9D00C854  0F40339A   JAL __cvt_u
9D00C858  02002025   OR A0, S0, ZERO
9D00C85C  16400006   BNE S2, ZERO, __fmt_d_needed
9D00C860  2403002D   ADDIU V1, ZERO, 45
9D00C864  8FA30020   LW V1, 32(SP)
9D00C868  30640004   ANDI A0, V1, 4
9D00C86C  10800020   BEQ A0, ZERO, __fmt_d_needed
9D00C870  30630008   ANDI V1, V1, 8
9D00C874  2403002D   ADDIU V1, ZERO, 45
9D00C878  2442FFFF   ADDIU V0, V0, -1
9D00C87C  2404002B   ADDIU A0, ZERO, 43
9D00C880  0072200B   MOVN A0, V1, S2
9D00C884  02821821   ADDU V1, S4, V0
9D00C888  A0640000   SB A0, 0(V1)
9D00C88C  8E060010   LW A2, 16(S0)
9D00C890  8FA30020   LW V1, 32(SP)
9D00C894  02603825   OR A3, S3, ZERO
9D00C898  24C6FFFF   ADDIU A2, A2, -1
9D00C89C  AFA30010   SW V1, 16(SP)
9D00C8A0  00C23023   SUBU A2, A2, V0
9D00C8A4  02822821   ADDU A1, S4, V0
9D00C8A8  0F4036F2   JAL __pad
9D00C8AC  02202025   OR A0, S1, ZERO
9D00C8B0  8E230004   LW V1, 4(S1)
9D00C8B4  30630100   ANDI V1, V1, 256
9D00C8B8  10600004   BEQ V1, ZERO, __fmt_d_needed
9D00C8BC  8FBF003C   LW RA, 60(SP)
9D00C8C0  8E030004   LW V1, 4(S0)
9D00C8C4  0043202A   SLT A0, V0, V1
9D00C8C8  0064100B   MOVN V0, V1, A0
9D00C8CC  8FB40038   LW S4, 56(SP)
9D00C8D0  8FB30034   LW S3, 52(SP)
9D00C8D4  8FB20030   LW S2, 48(SP)
9D00C8D8  8FB1002C   LW S1, 44(SP)
9D00C8DC  8FB00028   LW S0, 40(SP)
9D00C8E0  03E00008   JR RA
9D00C8E4  27BD0040   ADDIU SP, SP, 64
9D00C8E8  1000FFD5   BEQ ZERO, ZERO, __fmt_d_needed
9D00C8EC  02621023   SUBU V0, S3, V0
9D00C8F0  5060FFE7   BEQL V1, ZERO, __fmt_d_needed
9D00C8F4  8E060010   LW A2, 16(S0)
9D00C8F8  2442FFFF   ADDIU V0, V0, -1
9D00C8FC  02821821   ADDU V1, S4, V0
9D00C900  1000FFE1   BEQ ZERO, ZERO, __fmt_d_needed
9D00C904  24040020   ADDIU A0, ZERO, 32
9D00C908  0463FFC6   BGEZL V1, __fmt_d_needed
9D00C90C  7C020844   INS V0, ZERO, 1, 1
9D00C910  1000FFC7   BEQ ZERO, ZERO, __fmt_d_needed
9D00C914  8FA20020   LW V0, 32(SP)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/__uflow.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0110F8  27BDFFE0   ADDIU SP, SP, -32
9D0110FC  AFB00018   SW S0, 24(SP)
9D011100  AFBF001C   SW RA, 28(SP)
9D011104  0F403F9C   JAL __toread
9D011108  00808025   OR S0, A0, ZERO
9D01110C  50400006   BEQL V0, ZERO, 0x9D011128
9D011110  8E020044   LW V0, 68(S0)
9D011114  2402FFFF   ADDIU V0, ZERO, -1
9D011118  8FBF001C   LW RA, 28(SP)
9D01111C  8FB00018   LW S0, 24(SP)
9D011120  03E00008   JR RA
9D011124  27BD0020   ADDIU SP, SP, 32
9D011128  24060001   ADDIU A2, ZERO, 1
9D01112C  27A50010   ADDIU A1, SP, 16
9D011130  0040F809   JALR V0
9D011134  02002025   OR A0, S0, ZERO
9D011138  24030001   ADDIU V1, ZERO, 1
9D01113C  1443FFF5   BNE V0, V1, 0x9D011114
9D011140  93A20010   LBU V0, 16(SP)
9D011144  1000FFF5   BEQ ZERO, ZERO, 0x9D01111C
9D011148  8FBF001C   LW RA, 28(SP)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/stdio/__toread.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
00000008  00000000   NOP
00000010  00000000   NOP
9D00FE70  27BDFFE8   ADDIU SP, SP, -24
9D00FE74  AFB00010   SW S0, 16(SP)
9D00FE78  AFBF0014   SW RA, 20(SP)
9D00FE7C  80820048   LB V0, 72(A0)
9D00FE80  2443FFFF   ADDIU V1, V0, -1
9D00FE84  00431025   OR V0, V0, V1
9D00FE88  A0820048   SB V0, 72(A0)
9D00FE8C  8C830018   LW V1, 24(A0)
9D00FE90  8C820014   LW V0, 20(A0)
9D00FE94  0062102B   SLTU V0, V1, V0
9D00FE98  10400005   BEQ V0, ZERO, 0x9D00FEB0
9D00FE9C  00808025   OR S0, A0, ZERO
9D00FEA0  8C82002C   LW V0, 44(A0)
9D00FEA4  00003025   OR A2, ZERO, ZERO
9D00FEA8  0040F809   JALR V0
9D00FEAC  00002825   OR A1, ZERO, ZERO
9D00FEB0  8E020004   LW V0, 4(S0)
9D00FEB4  AE000028   SW ZERO, 40(S0)
9D00FEB8  AE000018   SW ZERO, 24(S0)
9D00FEBC  30430002   ANDI V1, V0, 2
9D00FEC0  10600008   BEQ V1, ZERO, 0x9D00FEE4
9D00FEC4  AE000014   SW ZERO, 20(S0)
9D00FEC8  34420010   ORI V0, V0, 16
9D00FECC  AE020004   SW V0, 4(S0)
9D00FED0  2402FFFF   ADDIU V0, ZERO, -1
9D00FED4  8FBF0014   LW RA, 20(SP)
9D00FED8  8FB00010   LW S0, 16(SP)
9D00FEDC  03E00008   JR RA
9D00FEE0  27BD0018   ADDIU SP, SP, 24
9D00FEE4  8E030008   LW V1, 8(S0)
9D00FEE8  8E04000C   LW A0, 12(S0)
9D00FEEC  7C4200C0   EXT V0, V0, 3, 1
9D00FEF0  00021023   SUBU V0, ZERO, V0
9D00FEF4  00641821   ADDU V1, V1, A0
9D00FEF8  AE030040   SW V1, 64(S0)
9D00FEFC  1000FFF5   BEQ ZERO, ZERO, 0x9D00FED4
9D00FF00  AE03003C   SW V1, 60(S0)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/smartio/__sio_sprintf_doux.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
00000008  00000000   NOP
00000010  00000000   NOP
00000018  00000000   NOP
00000020  00000000   NOP
00000028  00000000   NOP
00000030  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/smartio/__sio_sprintf_dfoux.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
00000008  00000000   NOP
00000010  00000000   NOP
00000018  00000000   NOP
00000020  00000000   NOP
00000028  00000000   NOP
00000030  00000000   NOP
00000038  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/smartio/__int_vsprintf.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D011AAC  00C03825   OR A3, A2, ZERO
9D011AB0  00A03025   OR A2, A1, ZERO
9D011AB4  3C057FFF   LUI A1, 32767
9D011AB8  27BDFFE8   ADDIU SP, SP, -24
9D011ABC  AFBF0014   SW RA, 20(SP)
9D011AC0  0F4041E3   JAL __vsnprintf
9D011AC4  34A5FFFF   ORI A1, A1, -1
9D011AC8  8FBF0014   LW RA, 20(SP)
9D011ACC  03E00008   JR RA
9D011AD0  27BD0018   ADDIU SP, SP, 24
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/smartio/__int_vsnprintf.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D01078C  27BDFFC8   ADDIU SP, SP, -56
9D010790  2403FFFF   ADDIU V1, ZERO, -1
9D010794  AFA30010   SW V1, 16(SP)
9D010798  24030102   ADDIU V1, ZERO, 258
9D01079C  00A01025   OR V0, A1, ZERO
9D0107A0  AFBF0034   SW RA, 52(SP)
9D0107A4  00C02825   OR A1, A2, ZERO
9D0107A8  AFA30014   SW V1, 20(SP)
9D0107AC  14800002   BNE A0, ZERO, 0x9D0107B8
9D0107B0  00E03025   OR A2, A3, ZERO
9D0107B4  27A4002C   ADDIU A0, SP, 44
9D0107B8  AFA40018   SW A0, 24(SP)
9D0107BC  AFA2001C   SW V0, 28(SP)
9D0107C0  10400002   BEQ V0, ZERO, 0x9D0107CC
9D0107C4  00001825   OR V1, ZERO, ZERO
9D0107C8  2443FFFF   ADDIU V1, V0, -1
9D0107CC  04410008   BGEZ V0, 0x9D0107F0
9D0107D0  AFA30020   SW V1, 32(SP)
9D0107D4  3C028000   LUI V0, -32768
9D0107D8  2403004F   ADDIU V1, ZERO, 79
9D0107DC  AC433598   SW V1, 13720(V0)
9D0107E0  2402FFFF   ADDIU V0, ZERO, -1
9D0107E4  8FBF0034   LW RA, 52(SP)
9D0107E8  03E00008   JR RA
9D0107EC  27BD0038   ADDIU SP, SP, 56
9D0107F0  AFA40028   SW A0, 40(SP)
9D0107F4  AFA40024   SW A0, 36(SP)
9D0107F8  A0800000   SB ZERO, 0(A0)
9D0107FC  0F404577   JAL __vfprintf
9D010800  27A40010   ADDIU A0, SP, 16
9D010804  1000FFF8   BEQ ZERO, ZERO, 0x9D0107E8
9D010808  8FBF0034   LW RA, 52(SP)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/smartio/__int_vfprintf.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0115DC  27BDFFE0   ADDIU SP, SP, -32
9D0115E0  AFB00018   SW S0, 24(SP)
9D0115E4  AFA60010   SW A2, 16(SP)
9D0115E8  00808025   OR S0, A0, ZERO
9D0115EC  AFBF001C   SW RA, 28(SP)
9D0115F0  0F402024   JAL __printf_core
9D0115F4  27A60010   ADDIU A2, SP, 16
9D0115F8  8E030004   LW V1, 4(S0)
9D0115FC  8FBF001C   LW RA, 28(SP)
9D011600  2404FFFF   ADDIU A0, ZERO, -1
9D011604  30630010   ANDI V1, V1, 16
9D011608  0083100B   MOVN V0, A0, V1
9D01160C  8FB00018   LW S0, 24(SP)
9D011610  03E00008   JR RA
9D011614  27BD0020   ADDIU SP, SP, 32
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/smartio/__int_sprintf.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D011A34  27BDFFE0   ADDIU SP, SP, -32
9D011A3C  27A60028   ADDIU A2, SP, 40
9D011A40  AFBF001C   SW RA, 28(SP)
9D011A44  AFA7002C   SW A3, 44(SP)
9D011A48  0F4046AB   JAL __vsprintf
9D011A4C  AFA60010   SW A2, 16(SP)
9D011A50  8FBF001C   LW RA, 28(SP)
9D011A54  03E00008   JR RA
9D011A58  27BD0020   ADDIU SP, SP, 32
9D011A5C  27BDFFE0   ADDIU SP, SP, -32
9D011A64  27A60028   ADDIU A2, SP, 40
9D011A68  AFBF001C   SW RA, 28(SP)
9D011A6C  AFA7002C   SW A3, 44(SP)
9D011A70  0F4046AB   JAL __vsprintf
9D011A74  AFA60010   SW A2, 16(SP)
9D011A78  8FBF001C   LW RA, 28(SP)
9D011A7C  03E00008   JR RA
9D011A80  27BD0020   ADDIU SP, SP, 32
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/math/sqrt.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00ACD8  F7AC0000   SDC1 F12, 0(SP)
9D00ACDC  8FA30004   LW V1, 4(SP)
9D00ACE0  8FA50000   LW A1, 0(SP)
9D00ACE4  3C047FF0   LUI A0, 32752
9D00ACE8  00643024   AND A2, V1, A0
9D00ACEC  14C40005   BNE A2, A0, 0x9D00AD04
9D00ACF0  00A01025   OR V0, A1, ZERO
9D00ACF4  4D8C6021   MADD.D F0, F12, F12, F12
9D00ACF8  F7A00000   SDC1 F0, 0(SP)
9D00ACFC  03E00008   JR RA
9D00AD00  D7A00000   LDC1 F0, 0(SP)
9D00AD04  1C60000E   BGTZ V1, 0x9D00AD40
9D00AD08  00032503   SRA A0, V1, 20
9D00AD0C  7C64F000   EXT A0, V1, 0, 31
9D00AD10  00852025   OR A0, A0, A1
9D00AD14  1080FFF9   BEQ A0, ZERO, 0x9D00ACFC
9D00AD18  00000000   NOP
9D00AD1C  10600075   BEQ V1, ZERO, 0x9D00AEF4
9D00AD20  00002025   OR A0, ZERO, ZERO
9D00AD24  D7A00000   LDC1 F0, 0(SP)
9D00AD28  3C028000   LUI V0, -32768
9D00AD2C  24030021   ADDIU V1, ZERO, 33
9D00AD30  46200001   SUB.D F0, F0, F0
9D00AD34  AC433598   SW V1, 13720(V0)
9D00AD38  1000FFEF   BEQ ZERO, ZERO, 0x9D00ACF8
9D00AD3C  46200003   DIV.D F0, F0, F0
9D00AD40  1080005F   BEQ A0, ZERO, 0x9D00AEC0
9D00AD44  00002825   OR A1, ZERO, ZERO
9D00AD48  3C050010   LUI A1, 16
9D00AD4C  2484FC01   ADDIU A0, A0, -1023
9D00AD50  7C639800   EXT V1, V1, 0, 20
9D00AD54  00651825   OR V1, V1, A1
9D00AD58  30850001   ANDI A1, A0, 1
9D00AD5C  10A00006   BEQ A1, ZERO, 0x9D00AD78
9D00AD60  00042843   SRA A1, A0, 1
9D00AD64  00022FC2   SRL A1, V0, 31
9D00AD68  00031840   SLL V1, V1, 1
9D00AD6C  00651821   ADDU V1, V1, A1
9D00AD70  00021040   SLL V0, V0, 1
9D00AD74  00042843   SRA A1, A0, 1
9D00AD78  00031840   SLL V1, V1, 1
9D00AD7C  000227C2   SRL A0, V0, 31
9D00AD80  00831821   ADDU V1, A0, V1
9D00AD84  00021040   SLL V0, V0, 1
9D00AD88  24080016   ADDIU T0, ZERO, 22
9D00AD8C  3C040020   LUI A0, 32
9D00AD90  00003025   OR A2, ZERO, ZERO
9D00AD94  00003825   OR A3, ZERO, ZERO
9D00AD98  00E44821   ADDU T1, A3, A0
9D00AD9C  0069502A   SLT T2, V1, T1
9D00ADA0  55400005   BNEL T2, ZERO, 0x9D00ADB8
9D00ADA4  00024FC2   SRL T1, V0, 31
9D00ADA8  01243821   ADDU A3, T1, A0
9D00ADAC  00691823   SUBU V1, V1, T1
9D00ADB0  00C43021   ADDU A2, A2, A0
9D00ADB4  00024FC2   SRL T1, V0, 31
9D00ADB8  00031840   SLL V1, V1, 1
9D00ADBC  2508FFFF   ADDIU T0, T0, -1
9D00ADC0  01231821   ADDU V1, T1, V1
9D00ADC4  00021040   SLL V0, V0, 1
9D00ADC8  1500FFF3   BNE T0, ZERO, 0x9D00AD98
9D00ADCC  00042042   SRL A0, A0, 1
9D00ADD0  00002025   OR A0, ZERO, ZERO
9D00ADD4  240B0020   ADDIU T3, ZERO, 32
9D00ADD8  3C098000   LUI T1, -32768
9D00ADDC  00E3602A   SLT T4, A3, V1
9D00ADE0  15800006   BNE T4, ZERO, 0x9D00ADFC
9D00ADE4  01285021   ADDU T2, T1, T0
9D00ADE8  54670011   BNEL V1, A3, 0x9D00AE30
9D00ADEC  000257C2   SRL T2, V0, 31
9D00ADF0  004A602B   SLTU T4, V0, T2
9D00ADF4  5580000E   BNEL T4, ZERO, 0x9D00AE30
9D00ADF8  000257C2   SRL T2, V0, 31
9D00ADFC  01494021   ADDU T0, T2, T1
9D00AE00  05410003   BGEZ T2, 0x9D00AE10
9D00AE04  00E06025   OR T4, A3, ZERO
9D00AE08  05030001   BGEZL T0, 0x9D00AE10
9D00AE0C  24EC0001   ADDIU T4, A3, 1
9D00AE10  00671823   SUBU V1, V1, A3
9D00AE14  004A382B   SLTU A3, V0, T2
9D00AE18  54E00001   BNEL A3, ZERO, 0x9D00AE20
9D00AE1C  2463FFFF   ADDIU V1, V1, -1
9D00AE20  004A1023   SUBU V0, V0, T2
9D00AE24  00892021   ADDU A0, A0, T1
9D00AE28  01803825   OR A3, T4, ZERO
9D00AE2C  000257C2   SRL T2, V0, 31
9D00AE30  00031840   SLL V1, V1, 1
9D00AE34  256BFFFF   ADDIU T3, T3, -1
9D00AE38  01431821   ADDU V1, T2, V1
9D00AE3C  00021040   SLL V0, V0, 1
9D00AE40  1560FFE6   BNE T3, ZERO, 0x9D00ADDC
9D00AE44  00094842   SRL T1, T1, 1
9D00AE48  00621825   OR V1, V1, V0
9D00AE4C  5060000E   BEQL V1, ZERO, 0x9D00AE88
9D00AE50  00063843   SRA A3, A2, 1
9D00AE54  3C029D01   LUI V0, -25343
9D00AE58  D4401DB0   LDC1 F0, 7600(V0)
9D00AE5C  3C029D01   LUI V0, -25343
9D00AE60  D4421DB8   LDC1 F2, 7608(V0)
9D00AE64  46220101   SUB.D F4, F0, F2
9D00AE68  4624003E   C.LE.D F0, F4
9D00AE6C  45000005   BC1F 0x9D00AE84
9D00AE70  2402FFFF   ADDIU V0, ZERO, -1
9D00AE74  54820023   BNEL A0, V0, 0x9D00AF04
9D00AE78  46220080   ADD.D F2, F0, F2
9D00AE7C  24C60001   ADDIU A2, A2, 1
9D00AE80  00002025   OR A0, ZERO, ZERO
9D00AE84  00063843   SRA A3, A2, 1
9D00AE88  3C023FE0   LUI V0, 16352
9D00AE8C  30C60001   ANDI A2, A2, 1
9D00AE90  00E23821   ADDU A3, A3, V0
9D00AE94  10C00003   BEQ A2, ZERO, 0x9D00AEA4
9D00AE98  00042042   SRL A0, A0, 1
9D00AE9C  3C028000   LUI V0, -32768
9D00AEA0  00822025   OR A0, A0, V0
9D00AEA4  00052D00   SLL A1, A1, 20
9D00AEA8  00A71821   ADDU V1, A1, A3
9D00AEAC  AFA40000   SW A0, 0(SP)
9D00AEB0  1000FF92   BEQ ZERO, ZERO, 0x9D00ACFC
9D00AEB4  AFA30004   SW V1, 4(SP)
9D00AEB8  24A5FFEB   ADDIU A1, A1, -21
9D00AEBC  00021540   SLL V0, V0, 21
9D00AEC0  5060FFFD   BEQL V1, ZERO, 0x9D00AEB8
9D00AEC4  00021AC2   SRL V1, V0, 11
9D00AEC8  3C070010   LUI A3, 16
9D00AECC  00673024   AND A2, V1, A3
9D00AED0  50C0000A   BEQL A2, ZERO, 0x9D00AEFC
9D00AED4  00031840   SLL V1, V1, 1
9D00AED8  00043023   SUBU A2, ZERO, A0
9D00AEDC  00C23006   SRLV A2, V0, A2
9D00AEE0  2487FFFF   ADDIU A3, A0, -1
9D00AEE4  00821004   SLLV V0, V0, A0
9D00AEE8  00C31825   OR V1, A2, V1
9D00AEEC  1000FF96   BEQ ZERO, ZERO, 0x9D00AD48
9D00AEF0  00A72023   SUBU A0, A1, A3
9D00AEF4  1000FFF2   BEQ ZERO, ZERO, 0x9D00AEC0
9D00AEF8  00002825   OR A1, ZERO, ZERO
9D00AEFC  1000FFF3   BEQ ZERO, ZERO, 0x9D00AECC
9D00AF00  24840001   ADDIU A0, A0, 1
9D00AF04  4622013C   C.LT.D 1, F0, F2
9D00AF08  45040005   BC1F 1, 0x9D00AF20
9D00AF0C  2402FFFE   ADDIU V0, ZERO, -2
9D00AF10  50820001   BEQL A0, V0, 0x9D00AF18
9D00AF14  24C60001   ADDIU A2, A2, 1
9D00AF18  1000FFDA   BEQ ZERO, ZERO, 0x9D00AE84
9D00AF1C  24840002   ADDIU A0, A0, 2
9D00AF20  24840001   ADDIU A0, A0, 1
9D00AF24  1000FFD7   BEQ ZERO, ZERO, 0x9D00AE84
9D00AF28  7C040004   INS A0, ZERO, 0, 1
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/math/sin.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00D57C  27BDFFD0   ADDIU SP, SP, -48
9D00D580  F7AC0030   SDC1 F12, 48(SP)
9D00D584  8FA40034   LW A0, 52(SP)
9D00D588  3C033FE9   LUI V1, 16361
9D00D58C  246321FC   ADDIU V1, V1, 8700
9D00D590  7C82F000   EXT V0, A0, 0, 31
9D00D594  0043182B   SLTU V1, V0, V1
9D00D598  1060001B   BEQ V1, ZERO, 0x9D00D608
9D00D59C  AFBF002C   SW RA, 44(SP)
9D00D5A0  3C033E50   LUI V1, 15952
9D00D5A4  0043102B   SLTU V0, V0, V1
9D00D5A8  10400010   BEQ V0, ZERO, 0x9D00D5EC
9D00D5AC  3C027FF0   LUI V0, 32752
9D00D5B0  00822024   AND A0, A0, V0
9D00D5B4  14800009   BNE A0, ZERO, 0x9D00D5DC
9D00D5B8  3C029D01   LUI V0, -25343
9D00D5BC  3C029D01   LUI V0, -25343
9D00D5C0  D4401DA0   LDC1 F0, 7584(V0)
9D00D5C4  46206002   MUL.D F0, F12, F0
9D00D5C8  F7A00018   SDC1 F0, 24(SP)
9D00D5CC  8FBF002C   LW RA, 44(SP)
9D00D5D0  D7A00030   LDC1 F0, 48(SP)
9D00D5D4  03E00008   JR RA
9D00D5D8  27BD0030   ADDIU SP, SP, 48
9D00D5DC  D4401DA8   LDC1 F0, 7592(V0)
9D00D5E0  D7A10030   LDC1 F1, 48(SP)
9D00D5E4  1000FFF8   BEQ ZERO, ZERO, 0x9D00D5C8
9D00D5E8  46200800   ADD.D F0, F1, F0
9D00D5EC  44807000   MTC1 ZERO, F14
9D00D5F0  AFA00010   SW ZERO, 16(SP)
9D00D5F4  44E07000   MTHC1 ZERO, F14
9D00D5F8  0F404009   JAL __sin
9D00D5FC  00000000   NOP
9D00D600  1000FFF2   BEQ ZERO, ZERO, 0x9D00D5CC
9D00D604  F7A00030   SDC1 F0, 48(SP)
9D00D608  3C037FF0   LUI V1, 32752
9D00D60C  0043102B   SLTU V0, V0, V1
9D00D610  14400004   BNE V0, ZERO, 0x9D00D624
9D00D614  D7A00030   LDC1 F0, 48(SP)
9D00D618  46200001   SUB.D F0, F0, F0
9D00D61C  1000FFEB   BEQ ZERO, ZERO, 0x9D00D5CC
9D00D620  F7A00030   SDC1 F0, 48(SP)
9D00D624  0F402186   JAL __rem_pio2
9D00D628  27A60018   ADDIU A2, SP, 24
9D00D62C  30420003   ANDI V0, V0, 3
9D00D630  24030001   ADDIU V1, ZERO, 1
9D00D634  D7AE0020   LDC1 F14, 32(SP)
9D00D638  1043000B   BEQ V0, V1, 0x9D00D668
9D00D63C  D7AC0018   LDC1 F12, 24(SP)
9D00D640  10400007   BEQ V0, ZERO, 0x9D00D660
9D00D644  24040002   ADDIU A0, ZERO, 2
9D00D648  1044000B   BEQ V0, A0, 0x9D00D678
9D00D64C  00000000   NOP
9D00D650  0F404120   JAL __cos
9D00D654  00000000   NOP
9D00D658  1000000A   BEQ ZERO, ZERO, 0x9D00D684
9D00D65C  44650000   MFHC1 A1, F0
9D00D660  1000FFE5   BEQ ZERO, ZERO, 0x9D00D5F8
9D00D664  AFA30010   SW V1, 16(SP)
9D00D668  0F404120   JAL __cos
9D00D66C  00000000   NOP
9D00D670  1000FFD6   BEQ ZERO, ZERO, 0x9D00D5CC
9D00D674  F7A00030   SDC1 F0, 48(SP)
9D00D678  0F404009   JAL __sin
9D00D67C  AFA30010   SW V1, 16(SP)
9D00D680  44650000   MFHC1 A1, F0
9D00D684  44040000   MFC1 A0, F0
9D00D688  3C028000   LUI V0, -32768
9D00D68C  00451026   XOR V0, V0, A1
9D00D690  AFA40030   SW A0, 48(SP)
9D00D694  1000FFCD   BEQ ZERO, ZERO, 0x9D00D5CC
9D00D698  AFA20034   SW V0, 52(SP)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/math/scalbnl.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D011C84  27BDFFE8   ADDIU SP, SP, -24
9D011C88  AFBF0014   SW RA, 20(SP)
9D011C8C  0F404096   JAL scalbn
9D011C90  00000000   NOP
9D011C94  8FBF0014   LW RA, 20(SP)
9D011C98  03E00008   JR RA
9D011C9C  27BD0018   ADDIU SP, SP, 24
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/math/scalbn.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D010258  28C20400   SLTI V0, A2, 1024
9D01025C  14400013   BNE V0, ZERO, 0x9D0102AC
9D010260  28C3FC02   SLTI V1, A2, -1022
9D010264  3C029D01   LUI V0, -25343
9D010268  D4401D90   LDC1 F0, 7568(V0)
9D01026C  24C2FC01   ADDIU V0, A2, -1023
9D010270  28430400   SLTI V1, V0, 1024
9D010274  14600006   BNE V1, ZERO, 0x9D010290
9D010278  46206302   MUL.D F12, F12, F0
9D01027C  46206302   MUL.D F12, F12, F0
9D010280  24C2F802   ADDIU V0, A2, -2046
9D010284  28440400   SLTI A0, V0, 1024
9D010288  240303FF   ADDIU V1, ZERO, 1023
9D01028C  0064100A   MOVZ V0, V1, A0
9D010290  00002025   OR A0, ZERO, ZERO
9D010294  244203FF   ADDIU V0, V0, 1023
9D010298  44840000   MTC1 A0, F0
9D01029C  00022D00   SLL A1, V0, 20
9D0102A0  44E50000   MTHC1 A1, F0
9D0102A4  03E00008   JR RA
9D0102A8  46206002   MUL.D F0, F12, F0
9D0102AC  1060FFF8   BEQ V1, ZERO, 0x9D010290
9D0102B0  00C01025   OR V0, A2, ZERO
9D0102B4  3C039D01   LUI V1, -25343
9D0102B8  D4601D98   LDC1 F0, 7576(V1)
9D0102BC  24C203C9   ADDIU V0, A2, 969
9D0102C0  2843FC02   SLTI V1, V0, -1022
9D0102C4  1060FFF2   BEQ V1, ZERO, 0x9D010290
9D0102C8  46206302   MUL.D F12, F12, F0
9D0102CC  24C20792   ADDIU V0, A2, 1938
9D0102D0  2844FC02   SLTI A0, V0, -1022
9D0102D4  2403FC02   ADDIU V1, ZERO, -1022
9D0102D8  46206302   MUL.D F12, F12, F0
9D0102DC  1000FFEC   BEQ ZERO, ZERO, 0x9D010290
9D0102E0  0064100B   MOVN V0, V1, A0
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/math/pow.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D004DE0  27BDFFA8   ADDIU SP, SP, -88
9D004DE4  F7AE0060   SDC1 F14, 96(SP)
9D004DE8  AFB2002C   SW S2, 44(SP)
9D004DEC  8FB20064   LW S2, 100(SP)
9D004DF0  8FA40060   LW A0, 96(SP)
9D004DF4  AFB40034   SW S4, 52(SP)
9D004DF8  7E54F000   EXT S4, S2, 0, 31
9D004DFC  02841025   OR V0, S4, A0
9D004E00  AFBF0044   SW RA, 68(SP)
9D004E04  AFB70040   SW S7, 64(SP)
9D004E08  AFB6003C   SW S6, 60(SP)
9D004E0C  AFB50038   SW S5, 56(SP)
9D004E10  AFB30030   SW S3, 48(SP)
9D004E14  AFB10028   SW S1, 40(SP)
9D004E18  AFB00024   SW S0, 36(SP)
9D004E1C  F7B40048   SDC1 F20, 72(SP)
9D004E20  10400008   BEQ V0, ZERO, 0x9D004E44
9D004E24  F7AC0058   SDC1 F12, 88(SP)
9D004E28  8FB6005C   LW S6, 92(SP)
9D004E2C  3C023FF0   LUI V0, 16368
9D004E30  8FB70058   LW S7, 88(SP)
9D004E34  16C20006   BNE S6, V0, 0x9D004E50
9D004E38  7ED3F000   EXT S3, S6, 0, 31
9D004E3C  16E0000D   BNE S7, ZERO, 0x9D004E74
9D004E40  3C037FF0   LUI V1, 32752
9D004E44  3C029D01   LUI V0, -25343
9D004E48  10000015   BEQ ZERO, ZERO, 0x9D004EA0
9D004E4C  D440E1C8   LDC1 F0, -7736(V0)
9D004E50  3C037FF0   LUI V1, 32752
9D004E54  24620001   ADDIU V0, V1, 1
9D004E58  0262102A   SLT V0, S3, V0
9D004E5C  1040000E   BEQ V0, ZERO, 0x9D004E98
9D004E60  D7A00058   LDC1 F0, 88(SP)
9D004E64  16630004   BNE S3, V1, 0x9D004E78
9D004E68  24620001   ADDIU V0, V1, 1
9D004E6C  16E0000B   BNE S7, ZERO, 0x9D004E9C
9D004E70  D7A10060   LDC1 F1, 96(SP)
9D004E74  24620001   ADDIU V0, V1, 1
9D004E78  0282102A   SLT V0, S4, V0
9D004E7C  50400006   BEQL V0, ZERO, 0x9D004E98
9D004E80  D7A00058   LDC1 F0, 88(SP)
9D004E84  16830008   BNE S4, V1, 0x9D004EA8
9D004E88  8FB00060   LW S0, 96(SP)
9D004E8C  10800007   BEQ A0, ZERO, 0x9D004EAC
9D004E90  8FB10064   LW S1, 100(SP)
9D004E94  D7A00058   LDC1 F0, 88(SP)
9D004E98  D7A10060   LDC1 F1, 96(SP)
9D004E9C  46210000   ADD.D F0, F0, F1
9D004EA0  1000005F   BEQ ZERO, ZERO, 0x9D005020
9D004EA4  F7A00010   SDC1 F0, 16(SP)
9D004EA8  8FB10064   LW S1, 100(SP)
9D004EAC  D7B40058   LDC1 F20, 88(SP)
9D004EB0  06C10048   BGEZ S6, 0x9D004FD4
9D004EB4  0000A825   OR S5, ZERO, ZERO
9D004EB8  3C024340   LUI V0, 17216
9D004EBC  0282102A   SLT V0, S4, V0
9D004EC0  50400044   BEQL V0, ZERO, 0x9D004FD4
9D004EC4  24150002   ADDIU S5, ZERO, 2
9D004EC8  3C023FF0   LUI V0, 16368
9D004ECC  0282102A   SLT V0, S4, V0
9D004ED0  1440000D   BNE V0, ZERO, 0x9D004F08
9D004ED4  00141503   SRA V0, S4, 20
9D004ED8  2443FC01   ADDIU V1, V0, -1023
9D004EDC  28620015   SLTI V0, V1, 21
9D004EE0  1440002A   BNE V0, ZERO, 0x9D004F8C
9D004EE4  24020034   ADDIU V0, ZERO, 52
9D004EE8  00431023   SUBU V0, V0, V1
9D004EEC  00441806   SRLV V1, A0, V0
9D004EF0  00431004   SLLV V0, V1, V0
9D004EF4  14440004   BNE V0, A0, 0x9D004F08
9D004EF8  00000000   NOP
9D004EFC  30630001   ANDI V1, V1, 1
9D004F00  24150002   ADDIU S5, ZERO, 2
9D004F04  02A3A823   SUBU S5, S5, V1
9D004F08  1080002A   BEQ A0, ZERO, 0x9D004FB4
9D004F0C  3C023FF0   LUI V0, 16368
9D004F10  0F404746   JAL fabs
9D004F14  4620A306   MOV.D F12, F20
9D004F18  16E0006B   BNE S7, ZERO, 0x9D0050C8
9D004F1C  F7A00010   SDC1 F0, 16(SP)
9D004F20  12600005   BEQ S3, ZERO, 0x9D004F38
9D004F24  00000000   NOP
9D004F28  7EC2E800   EXT V0, S6, 0, 30
9D004F2C  3C033FF0   LUI V1, 16368
9D004F30  14430065   BNE V0, V1, 0x9D0050C8
9D004F34  00000000   NOP
9D004F38  06410006   BGEZ S2, 0x9D004F54
9D004F3C  00000000   NOP
9D004F40  3C029D01   LUI V0, -25343
9D004F44  D7A10010   LDC1 F1, 16(SP)
9D004F48  D440E1C8   LDC1 F0, -7736(V0)
9D004F4C  46210003   DIV.D F0, F0, F1
9D004F50  F7A00010   SDC1 F0, 16(SP)
9D004F54  06C30033   BGEZL S6, 0x9D005024
9D004F58  8FBF0044   LW RA, 68(SP)
9D004F5C  3C02C010   LUI V0, -16368
9D004F60  02629821   ADDU S3, S3, V0
9D004F64  02759825   OR S3, S3, S5
9D004F68  1660004D   BNE S3, ZERO, 0x9D0050A0
9D004F6C  24020001   ADDIU V0, ZERO, 1
9D004F70  D7A00010   LDC1 F0, 16(SP)
9D004F74  3C028000   LUI V0, -32768
9D004F78  24030021   ADDIU V1, ZERO, 33
9D004F7C  46200001   SUB.D F0, F0, F0
9D004F80  AC433598   SW V1, 13720(V0)
9D004F84  1000FFC6   BEQ ZERO, ZERO, 0x9D004EA0
9D004F88  46200003   DIV.D F0, F0, F0
9D004F8C  1480FFE0   BNE A0, ZERO, 0x9D004F10
9D004F90  24020014   ADDIU V0, ZERO, 20
9D004F94  00431023   SUBU V0, V0, V1
9D004F98  00541807   SRAV V1, S4, V0
9D004F9C  00431004   SLLV V0, V1, V0
9D004FA0  16820004   BNE S4, V0, 0x9D004FB4
9D004FA4  3C023FF0   LUI V0, 16368
9D004FA8  30630001   ANDI V1, V1, 1
9D004FAC  24150002   ADDIU S5, ZERO, 2
9D004FB0  02A3A823   SUBU S5, S5, V1
9D004FB4  1682002E   BNE S4, V0, 0x9D005070
9D004FB8  3C024000   LUI V0, 16384
9D004FBC  06410018   BGEZ S2, 0x9D005020
9D004FC0  F7B40010   SDC1 F20, 16(SP)
9D004FC4  3C029D01   LUI V0, -25343
9D004FC8  D440E1C8   LDC1 F0, -7736(V0)
9D004FCC  1000FFB4   BEQ ZERO, ZERO, 0x9D004EA0
9D004FD0  46340003   DIV.D F0, F0, F20
9D004FD4  1480FFCE   BNE A0, ZERO, 0x9D004F10
9D004FD8  3C027FF0   LUI V0, 32752
9D004FDC  1682FFF5   BNE S4, V0, 0x9D004FB4
9D004FE0  3C023FF0   LUI V0, 16368
9D004FE4  3C02C010   LUI V0, -16368
9D004FE8  02621021   ADDU V0, S3, V0
9D004FEC  00571025   OR V0, V0, S7
9D004FF0  1040FF94   BEQ V0, ZERO, 0x9D004E44
9D004FF4  3C023FF0   LUI V0, 16368
9D004FF8  0262982A   SLT S3, S3, V0
9D004FFC  56600015   BNEL S3, ZERO, 0x9D005054
9D005000  AFA00010   SW ZERO, 16(SP)
9D005004  44800000   MTC1 ZERO, F0
9D005008  44900800   MTC1 S0, F1
9D00500C  44E00000   MTHC1 ZERO, F0
9D005010  44F10800   MTHC1 S1, F1
9D005014  2A520000   SLTI S2, S2, 0
9D005018  46320053   MOVN.D F1, F0, S2
9D00501C  F7A10010   SDC1 F1, 16(SP)
9D005020  8FBF0044   LW RA, 68(SP)
9D005024  D7A00010   LDC1 F0, 16(SP)
9D005028  8FB70040   LW S7, 64(SP)
9D00502C  8FB6003C   LW S6, 60(SP)
9D005030  8FB50038   LW S5, 56(SP)
9D005034  8FB40034   LW S4, 52(SP)
9D005038  8FB30030   LW S3, 48(SP)
9D00503C  8FB2002C   LW S2, 44(SP)
9D005040  8FB10028   LW S1, 40(SP)
9D005044  8FB00024   LW S0, 36(SP)
9D005048  D7B40048   LDC1 F20, 72(SP)
9D00504C  03E00008   JR RA
9D005050  27BD0058   ADDIU SP, SP, 88
9D005054  0641FFF2   BGEZ S2, 0x9D005020
9D005058  AFA00014   SW ZERO, 20(SP)
9D00505C  3C028000   LUI V0, -32768
9D005060  00511026   XOR V0, V0, S1
9D005064  AFB00010   SW S0, 16(SP)
9D005068  1000FFED   BEQ ZERO, ZERO, 0x9D005020
9D00506C  AFA20014   SW V0, 20(SP)
9D005070  16420003   BNE S2, V0, 0x9D005080
9D005074  3C023FE0   LUI V0, 16352
9D005078  1000FF89   BEQ ZERO, ZERO, 0x9D004EA0
9D00507C  4634A002   MUL.D F0, F20, F20
9D005080  1642FFA3   BNE S2, V0, 0x9D004F10
9D005084  00000000   NOP
9D005088  06C0FFA1   BLTZ S6, 0x9D004F10
9D00508C  00000000   NOP
9D005090  0F402B36   JAL sqrt
9D005094  4620A306   MOV.D F12, F20
9D005098  1000FFE1   BEQ ZERO, ZERO, 0x9D005020
9D00509C  F7A00010   SDC1 F0, 16(SP)
9D0050A0  16A2FFE0   BNE S5, V0, 0x9D005024
9D0050A4  8FBF0044   LW RA, 68(SP)
9D0050A8  8FA20010   LW V0, 16(SP)
9D0050AC  8FA30014   LW V1, 20(SP)
9D0050B0  AFA20018   SW V0, 24(SP)
9D0050B4  3C028000   LUI V0, -32768
9D0050B8  00431026   XOR V0, V0, V1
9D0050BC  AFA2001C   SW V0, 28(SP)
9D0050C0  1000FF77   BEQ ZERO, ZERO, 0x9D004EA0
9D0050C4  D7A00018   LDC1 F0, 24(SP)
9D0050C8  06C10021   BGEZ S6, 0x9D005150
9D0050CC  3C029D01   LUI V0, -25343
9D0050D0  16A00007   BNE S5, ZERO, 0x9D0050F0
9D0050D4  24020001   ADDIU V0, ZERO, 1
9D0050D8  4634A501   SUB.D F20, F20, F20
9D0050DC  3C028000   LUI V0, -32768
9D0050E0  24030021   ADDIU V1, ZERO, 33
9D0050E4  AC433598   SW V1, 13720(V0)
9D0050E8  1000FF6D   BEQ ZERO, ZERO, 0x9D004EA0
9D0050EC  4634A003   DIV.D F0, F20, F20
9D0050F0  16A20017   BNE S5, V0, 0x9D005150
9D0050F4  3C029D01   LUI V0, -25343
9D0050F8  3C029D01   LUI V0, -25343
9D0050FC  D454E1D0   LDC1 F20, -7728(V0)
9D005100  3C0341E0   LUI V1, 16864
9D005104  24630001   ADDIU V1, V1, 1
9D005108  0283182A   SLT V1, S4, V1
9D00510C  146000BB   BNE V1, ZERO, 0x9D0053FC
9D005110  3C027FF0   LUI V0, 32752
9D005114  3C0243F0   LUI V0, 17392
9D005118  24420001   ADDIU V0, V0, 1
9D00511C  0282102A   SLT V0, S4, V0
9D005120  14400012   BNE V0, ZERO, 0x9D00516C
9D005124  3C023FEF   LUI V0, 16367
9D005128  3C023FF0   LUI V0, 16368
9D00512C  0262982A   SLT S3, S3, V0
9D005130  12600009   BEQ S3, ZERO, 0x9D005158
9D005134  00000000   NOP
9D005138  0641000A   BGEZ S2, 0x9D005164
9D00513C  3C029D01   LUI V0, -25343
9D005140  3C029D01   LUI V0, -25343
9D005144  D440E1D8   LDC1 F0, -7720(V0)
9D005148  1000FF55   BEQ ZERO, ZERO, 0x9D004EA0
9D00514C  46200002   MUL.D F0, F0, F0
9D005150  1000FFEB   BEQ ZERO, ZERO, 0x9D005100
9D005154  D454E1C8   LDC1 F20, -7736(V0)
9D005158  1E40FFFA   BGTZ S2, 0x9D005144
9D00515C  3C029D01   LUI V0, -25343
9D005160  3C029D01   LUI V0, -25343
9D005164  1000FFF8   BEQ ZERO, ZERO, 0x9D005148
9D005168  D440E1E0   LDC1 F0, -7712(V0)
9D00516C  3442FFFF   ORI V0, V0, -1
9D005170  0262182A   SLT V1, S3, V0
9D005174  10600008   BEQ V1, ZERO, 0x9D005198
9D005178  24420002   ADDIU V0, V0, 2
9D00517C  0641000C   BGEZ S2, 0x9D0051B0
9D005180  3C029D01   LUI V0, -25343
9D005184  3C029D01   LUI V0, -25343
9D005188  D440E1D8   LDC1 F0, -7720(V0)
9D00518C  4620A502   MUL.D F20, F20, F0
9D005190  1000FF43   BEQ ZERO, ZERO, 0x9D004EA0
9D005194  46340002   MUL.D F0, F0, F20
9D005198  0262982A   SLT S3, S3, V0
9D00519C  16600006   BNE S3, ZERO, 0x9D0051B8
9D0051A0  3C029D01   LUI V0, -25343
9D0051A4  1E40FFF8   BGTZ S2, 0x9D005188
9D0051A8  3C029D01   LUI V0, -25343
9D0051AC  3C029D01   LUI V0, -25343
9D0051B0  1000FFF6   BEQ ZERO, ZERO, 0x9D00518C
9D0051B4  D440E1E0   LDC1 F0, -7712(V0)
9D0051B8  D440E1C8   LDC1 F0, -7736(V0)
9D0051BC  D7A10010   LDC1 F1, 16(SP)
9D0051C0  3C029D01   LUI V0, -25343
9D0051C4  D446E1E8   LDC1 F6, -7704(V0)
9D0051C8  46200801   SUB.D F0, F1, F0
9D0051CC  3C029D01   LUI V0, -25343
9D0051D0  D444E1F8   LDC1 F4, -7688(V0)
9D0051D4  3C029D01   LUI V0, -25343
9D0051D8  D442E200   LDC1 F2, -7680(V0)
9D0051DC  46240102   MUL.D F4, F0, F4
9D0051E0  3C029D01   LUI V0, -25343
9D0051E4  46260182   MUL.D F6, F0, F6
9D0051E8  46241101   SUB.D F4, F2, F4
9D0051EC  D442E208   LDC1 F2, -7672(V0)
9D0051F0  3C029D01   LUI V0, -25343
9D0051F4  46202102   MUL.D F4, F4, F0
9D0051F8  46241081   SUB.D F2, F2, F4
9D0051FC  46200102   MUL.D F4, F0, F0
9D005200  46241082   MUL.D F2, F2, F4
9D005204  D444E210   LDC1 F4, -7664(V0)
9D005208  3C029D01   LUI V0, -25343
9D00520C  46241082   MUL.D F2, F2, F4
9D005210  D444E1F0   LDC1 F4, -7696(V0)
9D005214  00001025   OR V0, ZERO, ZERO
9D005218  4C440029   MSUB.D F0, F2, F0, F4
9D00521C  44822000   MTC1 V0, F4
9D005220  46203040   ADD.D F1, F6, F0
9D005224  44650800   MFHC1 A1, F1
9D005228  44E52000   MTHC1 A1, F4
9D00522C  46262181   SUB.D F6, F4, F6
9D005230  46260001   SUB.D F0, F0, F6
9D005234  44900800   MTC1 S0, F1
9D005238  00001025   OR V0, ZERO, ZERO
9D00523C  44F10800   MTHC1 S1, F1
9D005240  44823000   MTC1 V0, F6
9D005244  46210002   MUL.D F0, F0, F1
9D005248  44F23000   MTHC1 S2, F6
9D00524C  3C024090   LUI V0, 16528
9D005250  46260881   SUB.D F2, F1, F6
9D005254  4C041021   MADD.D F0, F0, F2, F4
9D005258  46262102   MUL.D F4, F4, F6
9D00525C  46240040   ADD.D F1, F0, F4
9D005260  44650800   MFHC1 A1, F1
9D005264  44040800   MFC1 A0, F1
9D005268  00A2302A   SLT A2, A1, V0
9D00526C  14C000F2   BNE A2, ZERO, 0x9D005638
9D005270  00A01825   OR V1, A1, ZERO
9D005274  00A21023   SUBU V0, A1, V0
9D005278  00441025   OR V0, V0, A0
9D00527C  1440FFC1   BNE V0, ZERO, 0x9D005184
9D005280  3C029D01   LUI V0, -25343
9D005284  44840800   MTC1 A0, F1
9D005288  D442E270   LDC1 F2, -7568(V0)
9D00528C  44E50800   MTHC1 A1, F1
9D005290  46220080   ADD.D F2, F0, F2
9D005294  46240981   SUB.D F6, F1, F4
9D005298  4622303C   C.LT.D F6, F2
9D00529C  4501FFBA   BC1T 0x9D005188
9D0052A0  3C029D01   LUI V0, -25343
9D0052A4  3C043FE0   LUI A0, 16352
9D0052A8  7C62F000   EXT V0, V1, 0, 31
9D0052AC  24840001   ADDIU A0, A0, 1
9D0052B0  0044202A   SLT A0, V0, A0
9D0052B4  14800017   BNE A0, ZERO, 0x9D005314
9D0052B8  00003025   OR A2, ZERO, ZERO
9D0052BC  00021503   SRA V0, V0, 20
9D0052C0  3C060010   LUI A2, 16
9D0052C4  2442FC02   ADDIU V0, V0, -1022
9D0052C8  00461007   SRAV V0, A2, V0
9D0052CC  00431021   ADDU V0, V0, V1
9D0052D0  7C485500   EXT T0, V0, 20, 11
9D0052D4  2508FC01   ADDIU T0, T0, -1023
9D0052D8  24C7FFFF   ADDIU A3, A2, -1
9D0052DC  01073807   SRAV A3, A3, T0
9D0052E0  00073827   NOR A3, ZERO, A3
9D0052E4  00E22824   AND A1, A3, V0
9D0052E8  00002025   OR A0, ZERO, ZERO
9D0052EC  7C429800   EXT V0, V0, 0, 20
9D0052F0  00461025   OR V0, V0, A2
9D0052F4  44841000   MTC1 A0, F2
9D0052F8  24060014   ADDIU A2, ZERO, 20
9D0052FC  00C83023   SUBU A2, A2, T0
9D005300  44E51000   MTHC1 A1, F2
9D005304  04610002   BGEZ V1, 0x9D005310
9D005308  00C23007   SRAV A2, V0, A2
9D00530C  00063023   SUBU A2, ZERO, A2
9D005310  46222101   SUB.D F4, F4, F2
9D005314  46202040   ADD.D F1, F4, F0
9D005318  00008025   OR S0, ZERO, ZERO
9D00531C  44903000   MTC1 S0, F6
9D005320  3C029D01   LUI V0, -25343
9D005324  44630800   MFHC1 V1, F1
9D005328  D442E278   LDC1 F2, -7560(V0)
9D00532C  44E33000   MTHC1 V1, F6
9D005330  3C029D01   LUI V0, -25343
9D005334  46243101   SUB.D F4, F6, F4
9D005338  46223082   MUL.D F2, F6, F2
9D00533C  00062500   SLL A0, A2, 20
9D005340  46240001   SUB.D F0, F0, F4
9D005344  D444E288   LDC1 F4, -7544(V0)
9D005348  3C029D01   LUI V0, -25343
9D00534C  46243182   MUL.D F6, F6, F4
9D005350  D444E280   LDC1 F4, -7552(V0)
9D005354  3C029D01   LUI V0, -25343
9D005358  4CC40021   MADD.D F0, F6, F0, F4
9D00535C  46201100   ADD.D F4, F2, F0
9D005360  46242182   MUL.D F6, F4, F4
9D005364  46222081   SUB.D F2, F4, F2
9D005368  46220001   SUB.D F0, F0, F2
9D00536C  D442E290   LDC1 F2, -7536(V0)
9D005370  3C029D01   LUI V0, -25343
9D005374  D448E298   LDC1 F8, -7528(V0)
9D005378  3C029D01   LUI V0, -25343
9D00537C  4C002021   MADD.D F0, F0, F4, F0
9D005380  4D0230A9   MSUB.D F2, F8, F6, F2
9D005384  D448E2A0   LDC1 F8, -7520(V0)
9D005388  3C029D01   LUI V0, -25343
9D00538C  4D0610A1   MADD.D F2, F8, F2, F6
9D005390  D448E2A8   LDC1 F8, -7512(V0)
9D005394  3C029D01   LUI V0, -25343
9D005398  4D0610A9   MSUB.D F2, F8, F2, F6
9D00539C  D448E2B0   LDC1 F8, -7504(V0)
9D0053A0  3C029D01   LUI V0, -25343
9D0053A4  4D0610A1   MADD.D F2, F8, F2, F6
9D0053A8  D448E2B8   LDC1 F8, -7496(V0)
9D0053AC  3C029D01   LUI V0, -25343
9D0053B0  46261082   MUL.D F2, F2, F6
9D0053B4  46222081   SUB.D F2, F4, F2
9D0053B8  46222182   MUL.D F6, F4, F2
9D0053BC  46281081   SUB.D F2, F2, F8
9D0053C0  46223083   DIV.D F2, F6, F2
9D0053C4  46201081   SUB.D F2, F2, F0
9D0053C8  D440E1C8   LDC1 F0, -7736(V0)
9D0053CC  46241081   SUB.D F2, F2, F4
9D0053D0  46220001   SUB.D F0, F0, F2
9D0053D4  F7A00010   SDC1 F0, 16(SP)
9D0053D8  8FA20014   LW V0, 20(SP)
9D0053DC  00822021   ADDU A0, A0, V0
9D0053E0  00041503   SRA V0, A0, 20
9D0053E4  1C4000A7   BGTZ V0, 0x9D005684
9D0053E8  8FA50010   LW A1, 16(SP)
9D0053EC  0F404096   JAL scalbn
9D0053F0  46200306   MOV.D F12, F0
9D0053F4  1000FEAA   BEQ ZERO, ZERO, 0x9D004EA0
9D0053F8  46340002   MUL.D F0, F0, F20
9D0053FC  02C2B024   AND S6, S6, V0
9D005400  16C00008   BNE S6, ZERO, 0x9D005424
9D005404  00001025   OR V0, ZERO, ZERO
9D005408  3C029D01   LUI V0, -25343
9D00540C  D440E218   LDC1 F0, -7656(V0)
9D005410  D7A10010   LDC1 F1, 16(SP)
9D005414  2402FFCB   ADDIU V0, ZERO, -53
9D005418  46200802   MUL.D F0, F1, F0
9D00541C  F7A00010   SDC1 F0, 16(SP)
9D005420  8FB30014   LW S3, 20(SP)
9D005424  00132503   SRA A0, S3, 20
9D005428  2484FC01   ADDIU A0, A0, -1023
9D00542C  00822021   ADDU A0, A0, V0
9D005430  3C020003   LUI V0, 3
9D005434  7E739800   EXT S3, S3, 0, 20
9D005438  3442988F   ORI V0, V0, -26481
9D00543C  3C063FF0   LUI A2, 16368
9D005440  0262102A   SLT V0, S3, V0
9D005444  02663025   OR A2, S3, A2
9D005448  1440000A   BNE V0, ZERO, 0x9D005474
9D00544C  00003825   OR A3, ZERO, ZERO
9D005450  3C02000B   LUI V0, 11
9D005454  3442B67A   ORI V0, V0, -18822
9D005458  0262982A   SLT S3, S3, V0
9D00545C  16600005   BNE S3, ZERO, 0x9D005474
9D005460  24070001   ADDIU A3, ZERO, 1
9D005464  3C02FFF0   LUI V0, -16
9D005468  24840001   ADDIU A0, A0, 1
9D00546C  00C23021   ADDU A2, A2, V0
9D005470  00003825   OR A3, ZERO, ZERO
9D005474  8FA50010   LW A1, 16(SP)
9D005478  3C029D01   LUI V0, -25343
9D00547C  24421918   ADDIU V0, V0, 6424
9D005480  44856000   MTC1 A1, F12
9D005484  000728C0   SLL A1, A3, 3
9D005488  4CA20181   LDXC1 F6, 2(A1)
9D00548C  44E66000   MTHC1 A2, F12
9D005490  3C029D01   LUI V0, -25343
9D005494  462C3000   ADD.D F0, F6, F12
9D005498  D448E1C8   LDC1 F8, -7736(V0)
9D00549C  46266281   SUB.D F10, F12, F6
9D0054A0  00004025   OR T0, ZERO, ZERO
9D0054A4  46204203   DIV.D F8, F8, F0
9D0054A8  00063043   SRA A2, A2, 1
9D0054AC  00073C80   SLL A3, A3, 18
9D0054B0  46285002   MUL.D F0, F10, F8
9D0054B4  44630000   MFHC1 V1, F0
9D0054B8  44020000   MFC1 V0, F0
9D0054BC  44880000   MTC1 T0, F0
9D0054C0  3C082000   LUI T0, 8192
9D0054C4  00C83025   OR A2, A2, T0
9D0054C8  3C080008   LUI T0, 8
9D0054CC  00C83021   ADDU A2, A2, T0
9D0054D0  00004025   OR T0, ZERO, ZERO
9D0054D4  44882000   MTC1 T0, F4
9D0054D8  00C74821   ADDU T1, A2, A3
9D0054DC  44E30000   MTHC1 V1, F0
9D0054E0  44E92000   MTHC1 T1, F4
9D0054E4  44820800   MTC1 V0, F1
9D0054E8  46240082   MUL.D F2, F0, F4
9D0054EC  46262101   SUB.D F4, F4, F6
9D0054F0  44E30800   MTHC1 V1, F1
9D0054F4  3C069D01   LUI A2, -25343
9D0054F8  D4C6E220   LDC1 F6, -7648(A2)
9D0054FC  46246101   SUB.D F4, F12, F4
9D005500  3C069D01   LUI A2, -25343
9D005504  46225281   SUB.D F10, F10, F2
9D005508  46202102   MUL.D F4, F4, F0
9D00550C  D4C2E228   LDC1 F2, -7640(A2)
9D005510  3C069D01   LUI A2, -25343
9D005514  46245101   SUB.D F4, F10, F4
9D005518  46282202   MUL.D F8, F4, F8
9D00551C  46210902   MUL.D F4, F1, F1
9D005520  4C4621A1   MADD.D F6, F2, F4, F6
9D005524  D4C2E230   LDC1 F2, -7632(A2)
9D005528  3C069D01   LUI A2, -25343
9D00552C  4C4431A1   MADD.D F6, F2, F6, F4
9D005530  D4C2E238   LDC1 F2, -7624(A2)
9D005534  3C069D01   LUI A2, -25343
9D005538  4C4431A1   MADD.D F6, F2, F6, F4
9D00553C  D4C2E240   LDC1 F2, -7616(A2)
9D005540  3C069D01   LUI A2, -25343
9D005544  4C4431A1   MADD.D F6, F2, F6, F4
9D005548  D4C2E248   LDC1 F2, -7608(A2)
9D00554C  3C069D01   LUI A2, -25343
9D005550  4C4431A1   MADD.D F6, F2, F6, F4
9D005554  46200880   ADD.D F2, F1, F0
9D005558  46242102   MUL.D F4, F4, F4
9D00555C  46281082   MUL.D F2, F2, F8
9D005560  4C443121   MADD.D F4, F2, F6, F4
9D005564  46200082   MUL.D F2, F0, F0
9D005568  D4C6E250   LDC1 F6, -7600(A2)
9D00556C  00003025   OR A2, ZERO, ZERO
9D005570  46261280   ADD.D F10, F2, F6
9D005574  46245040   ADD.D F1, F10, F4
9D005578  44865000   MTC1 A2, F10
9D00557C  44690800   MFHC1 T1, F1
9D005580  44820800   MTC1 V0, F1
9D005584  44E95000   MTHC1 T1, F10
9D005588  44E30800   MTHC1 V1, F1
9D00558C  46265181   SUB.D F6, F10, F6
9D005590  462A0002   MUL.D F0, F0, F10
9D005594  00001025   OR V0, ZERO, ZERO
9D005598  46223081   SUB.D F2, F6, F2
9D00559C  46222101   SUB.D F4, F4, F2
9D0055A0  462A4082   MUL.D F2, F8, F10
9D0055A4  4C4120A1   MADD.D F2, F2, F4, F1
9D0055A8  44822000   MTC1 V0, F4
9D0055AC  3C029D01   LUI V0, -25343
9D0055B0  D446E258   LDC1 F6, -7592(V0)
9D0055B4  3C029D01   LUI V0, -25343
9D0055B8  46220040   ADD.D F1, F0, F2
9D0055BC  44670800   MFHC1 A3, F1
9D0055C0  44840800   MTC1 A0, F1
9D0055C4  44E72000   MTHC1 A3, F4
9D0055C8  3C049D01   LUI A0, -25343
9D0055CC  46202001   SUB.D F0, F4, F0
9D0055D0  46262182   MUL.D F6, F4, F6
9D0055D4  24841908   ADDIU A0, A0, 6408
9D0055D8  4CA40201   LDXC1 F8, 4(A1)
9D0055DC  46201081   SUB.D F2, F2, F0
9D0055E0  D440E268   LDC1 F0, -7576(V0)
9D0055E4  3C029D01   LUI V0, -25343
9D0055E8  00002025   OR A0, ZERO, ZERO
9D0055EC  46202002   MUL.D F0, F4, F0
9D0055F0  D444E260   LDC1 F4, -7584(V0)
9D0055F4  3C029D01   LUI V0, -25343
9D0055F8  244218F8   ADDIU V0, V0, 6392
9D0055FC  4C041021   MADD.D F0, F0, F2, F4
9D005600  4CA20081   LDXC1 F2, 2(A1)
9D005604  46220000   ADD.D F0, F0, F2
9D005608  468008A1   CVT.D.W F2, F1
9D00560C  46203100   ADD.D F4, F6, F0
9D005610  46282100   ADD.D F4, F4, F8
9D005614  46222040   ADD.D F1, F4, F2
9D005618  44842000   MTC1 A0, F4
9D00561C  44630800   MFHC1 V1, F1
9D005620  44E32000   MTHC1 V1, F4
9D005624  46222081   SUB.D F2, F4, F2
9D005628  46281081   SUB.D F2, F2, F8
9D00562C  46261081   SUB.D F2, F2, F6
9D005630  1000FF00   BEQ ZERO, ZERO, 0x9D005234
9D005634  46220001   SUB.D F0, F0, F2
9D005638  7CA6F000   EXT A2, A1, 0, 31
9D00563C  3442CC00   ORI V0, V0, -13312
9D005640  00C2102A   SLT V0, A2, V0
9D005644  5440FF18   BNEL V0, ZERO, 0x9D0052A8
9D005648  3C043FE0   LUI A0, 16352
9D00564C  3C023F6F   LUI V0, 16239
9D005650  24423400   ADDIU V0, V0, 13312
9D005654  00A21021   ADDU V0, A1, V0
9D005658  00441025   OR V0, V0, A0
9D00565C  1440FED4   BNE V0, ZERO, 0x9D0051B0
9D005660  3C029D01   LUI V0, -25343
9D005664  44840800   MTC1 A0, F1
9D005668  44E50800   MTHC1 A1, F1
9D00566C  46240881   SUB.D F2, F1, F4
9D005670  4622013E   C.LE.D 1, F0, F2
9D005674  4506FF0C   BC1FL 1, 0x9D0052A8
9D005678  3C043FE0   LUI A0, 16352
9D00567C  1000FEC3   BEQ ZERO, ZERO, 0x9D00518C
9D005680  D440E1E0   LDC1 F0, -7712(V0)
9D005684  44850000   MTC1 A1, F0
9D005688  1000FEC1   BEQ ZERO, ZERO, 0x9D005190
9D00568C  44E40000   MTHC1 A0, F0
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/math/fmodl.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D011C68  27BDFFE8   ADDIU SP, SP, -24
9D011C6C  AFBF0014   SW RA, 20(SP)
9D011C70  0F4029F0   JAL fmod
9D011C74  00000000   NOP
9D011C78  8FBF0014   LW RA, 20(SP)
9D011C7C  03E00008   JR RA
9D011C80  27BD0018   ADDIU SP, SP, 24
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/math/fmod.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00A7C0  27BDFFD0   ADDIU SP, SP, -48
9D00A7C4  F7AE0038   SDC1 F14, 56(SP)
9D00A7C8  AFB3001C   SW S3, 28(SP)
9D00A7CC  AFB20018   SW S2, 24(SP)
9D00A7D0  8FB3003C   LW S3, 60(SP)
9D00A7D4  8FB20038   LW S2, 56(SP)
9D00A7D8  AFBF002C   SW RA, 44(SP)
9D00A7DC  00131040   SLL V0, S3, 1
9D00A7E0  00121FC2   SRL V1, S2, 31
9D00A7E4  00621025   OR V0, V1, V0
9D00A7E8  00122840   SLL A1, S2, 1
9D00A7EC  00A21825   OR V1, A1, V0
9D00A7F0  AFB60028   SW S6, 40(SP)
9D00A7F4  AFB50024   SW S5, 36(SP)
9D00A7F8  AFB40020   SW S4, 32(SP)
9D00A7FC  AFB10014   SW S1, 20(SP)
9D00A800  AFB00010   SW S0, 16(SP)
9D00A804  1060000F   BEQ V1, ZERO, 0x9D00A844
9D00A808  F7AC0030   SDC1 F12, 48(SP)
9D00A80C  3C047FF0   LUI A0, 32752
9D00A810  7E66F000   EXT A2, S3, 0, 31
9D00A814  24830001   ADDIU V1, A0, 1
9D00A818  00C3182B   SLTU V1, A2, V1
9D00A81C  1060000A   BEQ V1, ZERO, 0x9D00A848
9D00A820  D7A00030   LDC1 F0, 48(SP)
9D00A824  14C40003   BNE A2, A0, 0x9D00A834
9D00A828  8FB40034   LW S4, 52(SP)
9D00A82C  16400007   BNE S2, ZERO, 0x9D00A84C
9D00A830  D7A10038   LDC1 F1, 56(SP)
9D00A834  240307FF   ADDIU V1, ZERO, 2047
9D00A838  7E955500   EXT S5, S4, 20, 11
9D00A83C  16A30011   BNE S5, V1, 0x9D00A884
9D00A840  8FA40030   LW A0, 48(SP)
9D00A844  D7A00030   LDC1 F0, 48(SP)
9D00A848  D7A10038   LDC1 F1, 56(SP)
9D00A84C  46210002   MUL.D F0, F0, F1
9D00A850  46200003   DIV.D F0, F0, F0
9D00A854  F7A00030   SDC1 F0, 48(SP)
9D00A858  8FBF002C   LW RA, 44(SP)
9D00A85C  D7A00030   LDC1 F0, 48(SP)
9D00A860  8FB60028   LW S6, 40(SP)
9D00A864  8FB50024   LW S5, 36(SP)
9D00A868  8FB40020   LW S4, 32(SP)
9D00A86C  8FB3001C   LW S3, 28(SP)
9D00A870  8FB20018   LW S2, 24(SP)
9D00A874  8FB10014   LW S1, 20(SP)
9D00A878  8FB00010   LW S0, 16(SP)
9D00A87C  03E00008   JR RA
9D00A880  27BD0030   ADDIU SP, SP, 48
9D00A884  000437C2   SRL A2, A0, 31
9D00A888  00141840   SLL V1, S4, 1
9D00A88C  00C31825   OR V1, A2, V1
9D00A890  0043382B   SLTU A3, V0, V1
9D00A894  14E0000E   BNE A3, ZERO, 0x9D00A8D0
9D00A898  00043040   SLL A2, A0, 1
9D00A89C  14620003   BNE V1, V0, 0x9D00A8AC
9D00A8A0  00A6382B   SLTU A3, A1, A2
9D00A8A4  14E0000A   BNE A3, ZERO, 0x9D00A8D0
9D00A8A8  00000000   NOP
9D00A8AC  14A6FFEB   BNE A1, A2, 0x9D00A85C
9D00A8B0  8FBF002C   LW RA, 44(SP)
9D00A8B4  5443FFEA   BNEL V0, V1, 0x9D00A860
9D00A8B8  D7A00030   LDC1 F0, 48(SP)
9D00A8BC  44800000   MTC1 ZERO, F0
9D00A8C0  D7A10030   LDC1 F1, 48(SP)
9D00A8C4  44E00000   MTHC1 ZERO, F0
9D00A8C8  1000FFE2   BEQ ZERO, ZERO, 0x9D00A854
9D00A8CC  46200802   MUL.D F0, F1, F0
9D00A8D0  16A0003D   BNE S5, ZERO, 0x9D00A9C8
9D00A8D4  7E839800   EXT V1, S4, 0, 20
9D00A8D8  00041502   SRL V0, A0, 20
9D00A8DC  00141B00   SLL V1, S4, 12
9D00A8E0  00431825   OR V1, V0, V1
9D00A8E4  00041300   SLL V0, A0, 12
9D00A8E8  04610032   BGEZ V1, 0x9D00A9B4
9D00A8EC  000237C2   SRL A2, V0, 31
9D00A8F0  24060001   ADDIU A2, ZERO, 1
9D00A8F4  00D53023   SUBU A2, A2, S5
9D00A8F8  0F404595   JAL __ashldi3
9D00A8FC  02802825   OR A1, S4, ZERO
9D00A900  00408025   OR S0, V0, ZERO
9D00A904  00608825   OR S1, V1, ZERO
9D00A908  7E765500   EXT S6, S3, 20, 11
9D00A90C  56C00037   BNEL S6, ZERO, 0x9D00A9EC
9D00A910  7E739800   EXT S3, S3, 0, 20
9D00A914  00121D02   SRL V1, S2, 20
9D00A918  00131300   SLL V0, S3, 12
9D00A91C  00621025   OR V0, V1, V0
9D00A920  00122300   SLL A0, S2, 12
9D00A924  0441002C   BGEZ V0, 0x9D00A9D8
9D00A928  00042FC2   SRL A1, A0, 31
9D00A92C  24060001   ADDIU A2, ZERO, 1
9D00A930  02402025   OR A0, S2, ZERO
9D00A934  02602825   OR A1, S3, ZERO
9D00A938  0F404595   JAL __ashldi3
9D00A93C  00D63023   SUBU A2, A2, S6
9D00A940  00609825   OR S3, V1, ZERO
9D00A944  00409025   OR S2, V0, ZERO
9D00A948  02121823   SUBU V1, S0, S2
9D00A94C  0203202B   SLTU A0, S0, V1
9D00A950  02331023   SUBU V0, S1, S3
9D00A954  00441023   SUBU V0, V0, A0
9D00A958  02D5202A   SLT A0, S6, S5
9D00A95C  14800026   BNE A0, ZERO, 0x9D00A9F8
9D00A960  00000000   NOP
9D00A964  04400004   BLTZ V0, 0x9D00A978
9D00A968  00622025   OR A0, V1, V0
9D00A96C  1080FFD3   BEQ A0, ZERO, 0x9D00A8BC
9D00A970  00608025   OR S0, V1, ZERO
9D00A974  00408825   OR S1, V0, ZERO
9D00A978  00111502   SRL V0, S1, 20
9D00A97C  50400029   BEQL V0, ZERO, 0x9D00AA24
9D00A980  001017C2   SRL V0, S0, 31
9D00A984  5AA0002C   BLEZL S5, 0x9D00AA38
9D00A988  24060001   ADDIU A2, ZERO, 1
9D00A98C  3C03FFF0   LUI V1, -16
9D00A990  02238821   ADDU S1, S1, V1
9D00A994  00151D00   SLL V1, S5, 20
9D00A998  00711825   OR V1, V1, S1
9D00A99C  02802825   OR A1, S4, ZERO
9D00A9A0  7C05F004   INS A1, ZERO, 0, 31
9D00A9A4  00A33825   OR A3, A1, V1
9D00A9A8  AFB00030   SW S0, 48(SP)
9D00A9AC  1000FFAA   BEQ ZERO, ZERO, 0x9D00A858
9D00A9B0  AFA70034   SW A3, 52(SP)
9D00A9B4  00032840   SLL A1, V1, 1
9D00A9B8  26B5FFFF   ADDIU S5, S5, -1
9D00A9BC  00C51825   OR V1, A2, A1
9D00A9C0  1000FFC9   BEQ ZERO, ZERO, 0x9D00A8E8
9D00A9C4  00021040   SLL V0, V0, 1
9D00A9C8  3C110010   LUI S1, 16
9D00A9CC  00808025   OR S0, A0, ZERO
9D00A9D0  1000FFCD   BEQ ZERO, ZERO, 0x9D00A908
9D00A9D4  02238825   OR S1, S1, V1
9D00A9D8  00021840   SLL V1, V0, 1
9D00A9DC  26D6FFFF   ADDIU S6, S6, -1
9D00A9E0  00A31025   OR V0, A1, V1
9D00A9E4  1000FFCF   BEQ ZERO, ZERO, 0x9D00A924
9D00A9E8  00042040   SLL A0, A0, 1
9D00A9EC  3C030010   LUI V1, 16
9D00A9F0  1000FFD5   BEQ ZERO, ZERO, 0x9D00A948
9D00A9F4  00739825   OR S3, V1, S3
9D00A9F8  04400004   BLTZ V0, 0x9D00AA0C
9D00A9FC  00622025   OR A0, V1, V0
9D00AA00  1080FFAE   BEQ A0, ZERO, 0x9D00A8BC
9D00AA04  00608025   OR S0, V1, ZERO
9D00AA08  00408825   OR S1, V0, ZERO
9D00AA0C  001017C2   SRL V0, S0, 31
9D00AA10  00118840   SLL S1, S1, 1
9D00AA14  00518825   OR S1, V0, S1
9D00AA18  00108040   SLL S0, S0, 1
9D00AA1C  1000FFCA   BEQ ZERO, ZERO, 0x9D00A948
9D00AA20  26B5FFFF   ADDIU S5, S5, -1
9D00AA24  00118840   SLL S1, S1, 1
9D00AA28  00518825   OR S1, V0, S1
9D00AA2C  00108040   SLL S0, S0, 1
9D00AA30  1000FFD1   BEQ ZERO, ZERO, 0x9D00A978
9D00AA34  26B5FFFF   ADDIU S5, S5, -1
9D00AA38  02002025   OR A0, S0, ZERO
9D00AA3C  00D53023   SUBU A2, A2, S5
9D00AA40  0F404586   JAL __lshrdi3
9D00AA44  02202825   OR A1, S1, ZERO
9D00AA48  1000FFD4   BEQ ZERO, ZERO, 0x9D00A99C
9D00AA4C  00408025   OR S0, V0, ZERO
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/math/fma.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D007474  27BDFF70   ADDIU SP, SP, -144
9D007478  44066000   MFC1 A2, F12
9D00747C  44676000   MFHC1 A3, F12
9D007480  27A40030   ADDIU A0, SP, 48
9D007484  F7AC0090   SDC1 F12, 144(SP)
9D007488  AFBF007C   SW RA, 124(SP)
9D00748C  AFB00058   SW S0, 88(SP)
9D007490  F7B40080   SDC1 F20, 128(SP)
9D007494  F7AE0098   SDC1 F14, 152(SP)
9D007498  D7B400A0   LDC1 F20, 160(SP)
9D00749C  AFBE0078   SW FP, 120(SP)
9D0074A0  AFB70074   SW S7, 116(SP)
9D0074A4  AFB60070   SW S6, 112(SP)
9D0074A8  AFB5006C   SW S5, 108(SP)
9D0074AC  AFB40068   SW S4, 104(SP)
9D0074B0  AFB30064   SW S3, 100(SP)
9D0074B4  AFB20060   SW S2, 96(SP)
9D0074B8  0F404073   JAL normalize
9D0074BC  AFB1005C   SW S1, 92(SP)
9D0074C0  D7AE0098   LDC1 F14, 152(SP)
9D0074C4  27A40020   ADDIU A0, SP, 32
9D0074C8  8FAE0038   LW T6, 56(SP)
9D0074CC  44067000   MFC1 A2, F14
9D0074D0  0F404073   JAL normalize
9D0074D4  44677000   MFHC1 A3, F14
9D0074D8  4406A000   MFC1 A2, F20
9D0074DC  4467A000   MFHC1 A3, F20
9D0074E0  27A40010   ADDIU A0, SP, 16
9D0074E4  0F404073   JAL normalize
9D0074E8  8FB00028   LW S0, 40(SP)
9D0074EC  29C203CB   SLTI V0, T6, 971
9D0074F0  D7AE0098   LDC1 F14, 152(SP)
9D0074F4  10400004   BEQ V0, ZERO, 0x9D007508
9D0074F8  D7AC0090   LDC1 F12, 144(SP)
9D0074FC  2A0203CB   SLTI V0, S0, 971
9D007500  14400003   BNE V0, ZERO, 0x9D007510
9D007504  8FA80018   LW T0, 24(SP)
9D007508  10000006   BEQ ZERO, ZERO, 0x9D007524
9D00750C  4E8E6521   MADD.D F20, F20, F12, F14
9D007510  290203CB   SLTI V0, T0, 971
9D007514  14400011   BNE V0, ZERO, 0x9D00755C
9D007518  240203CB   ADDIU V0, ZERO, 971
9D00751C  55020001   BNEL T0, V0, 0x9D007524
9D007520  4E8E6521   MADD.D F20, F20, F12, F14
9D007524  8FBF007C   LW RA, 124(SP)
9D007528  4620A006   MOV.D F0, F20
9D00752C  8FBE0078   LW FP, 120(SP)
9D007530  8FB70074   LW S7, 116(SP)
9D007534  8FB60070   LW S6, 112(SP)
9D007538  8FB5006C   LW S5, 108(SP)
9D00753C  8FB40068   LW S4, 104(SP)
9D007540  8FB30064   LW S3, 100(SP)
9D007544  8FB20060   LW S2, 96(SP)
9D007548  8FB1005C   LW S1, 92(SP)
9D00754C  8FB00058   LW S0, 88(SP)
9D007550  D7B40080   LDC1 F20, 128(SP)
9D007554  03E00008   JR RA
9D007558  27BD0090   ADDIU SP, SP, 144
9D00755C  8FA40030   LW A0, 48(SP)
9D007560  8FB80020   LW T8, 32(SP)
9D007564  8FA20024   LW V0, 36(SP)
9D007568  8FA70034   LW A3, 52(SP)
9D00756C  00980019   MULTU 0, A0, T8
9D007570  020E8021   ADDU S0, S0, T6
9D007574  01108823   SUBU S1, T0, S0
9D007578  8FB40010   LW S4, 16(SP)
9D00757C  8FAA0014   LW T2, 20(SP)
9D007580  00006810   MFHI T5
9D007584  00006012   MFLO T4
9D007588  01805825   OR T3, T4, ZERO
9D00758C  00820019   MULTU 0, A0, V0
9D007590  00009012   MFLO S2
9D007594  00009810   MFHI S3
9D007598  00F80019   MULTU 0, A3, T8
9D00759C  0000C012   MFLO T8
9D0075A0  02584821   ADDU T1, S2, T8
9D0075A4  0132202B   SLTU A0, T1, S2
9D0075A8  0000C810   MFHI T9
9D0075AC  0279B021   ADDU S6, S3, T9
9D0075B0  00962021   ADDU A0, A0, S6
9D0075B4  00E20019   MULTU 0, A3, V0
9D0075B8  012D4821   ADDU T1, T1, T5
9D0075BC  012D382B   SLTU A3, T1, T5
9D0075C0  00001012   MFLO V0
9D0075C4  00442021   ADDU A0, V0, A0
9D0075C8  00873821   ADDU A3, A0, A3
9D0075CC  00001810   MFHI V1
9D0075D0  0082B02B   SLTU S6, A0, V0
9D0075D4  02C3B021   ADDU S6, S6, V1
9D0075D8  00E4182B   SLTU V1, A3, A0
9D0075DC  00E09825   OR S3, A3, ZERO
9D0075E0  1A2000A4   BLEZ S1, 0x9D007874
9D0075E4  0076B021   ADDU S6, V1, S6
9D0075E8  2A220040   SLTI V0, S1, 64
9D0075EC  50400070   BEQL V0, ZERO, 0x9D0077B0
9D0075F0  2631FFC0   ADDIU S1, S1, -64
9D0075F4  02802025   OR A0, S4, ZERO
9D0075F8  01402825   OR A1, T2, ZERO
9D0075FC  02203025   OR A2, S1, ZERO
9D007600  AFA90050   SW T1, 80(SP)
9D007604  AFAC0044   SW T4, 68(SP)
9D007608  F7AE0098   SDC1 F14, 152(SP)
9D00760C  F7AC0090   SDC1 F12, 144(SP)
9D007610  0F404595   JAL __ashldi3
9D007614  AFAA0048   SW T2, 72(SP)
9D007618  8FAA0048   LW T2, 72(SP)
9D00761C  24060040   ADDIU A2, ZERO, 64
9D007620  02802025   OR A0, S4, ZERO
9D007624  01402825   OR A1, T2, ZERO
9D007628  00D13023   SUBU A2, A2, S1
9D00762C  00409025   OR S2, V0, ZERO
9D007630  0F404586   JAL __lshrdi3
9D007634  AFA30040   SW V1, 64(SP)
9D007638  8FAC0040   LW T4, 64(SP)
9D00763C  D7AC0090   LDC1 F12, 144(SP)
9D007640  D7AE0098   LDC1 F14, 152(SP)
9D007644  8FAB0044   LW T3, 68(SP)
9D007648  8FA90050   LW T1, 80(SP)
9D00764C  0040A025   OR S4, V0, ZERO
9D007650  00605025   OR T2, V1, ZERO
9D007654  8FA2002C   LW V0, 44(SP)
9D007658  8FB1003C   LW S1, 60(SP)
9D00765C  02228826   XOR S1, S1, V0
9D007660  8FA2001C   LW V0, 28(SP)
9D007664  145100AF   BNE V0, S1, 0x9D007924
9D007668  01724023   SUBU T0, T3, S2
9D00766C  024B4021   ADDU T0, S2, T3
9D007670  0112302B   SLTU A2, T0, S2
9D007674  01892821   ADDU A1, T4, T1
9D007678  00C5B821   ADDU S7, A2, A1
9D00767C  02EC102B   SLTU V0, S7, T4
9D007680  14400007   BNE V0, ZERO, 0x9D0076A0
9D007684  24040001   ADDIU A0, ZERO, 1
9D007688  55970005   BNEL T4, S7, 0x9D0076A0
9D00768C  00002025   OR A0, ZERO, ZERO
9D007690  0112302B   SLTU A2, T0, S2
9D007694  14C00003   BNE A2, ZERO, 0x9D0076A4
9D007698  0293A821   ADDU S5, S4, S3
9D00769C  00002025   OR A0, ZERO, ZERO
9D0076A0  0293A821   ADDU S5, S4, S3
9D0076A4  02B4F02B   SLTU FP, S5, S4
9D0076A8  01561821   ADDU V1, T2, S6
9D0076AC  0095A821   ADDU S5, A0, S5
9D0076B0  03C3F021   ADDU FP, FP, V1
9D0076B4  02A4182B   SLTU V1, S5, A0
9D0076B8  007EF021   ADDU FP, V1, FP
9D0076BC  02A02025   OR A0, S5, ZERO
9D0076C0  03C02825   OR A1, FP, ZERO
9D0076C4  0F40427A   JAL a_clz_64
9D0076C8  AFA80040   SW T0, 64(SP)
9D0076CC  8FA80040   LW T0, 64(SP)
9D0076D0  2452FFFF   ADDIU S2, V0, -1
9D0076D4  24060040   ADDIU A2, ZERO, 64
9D0076D8  01002025   OR A0, T0, ZERO
9D0076DC  00D23023   SUBU A2, A2, S2
9D0076E0  0F404586   JAL __lshrdi3
9D0076E4  02E02825   OR A1, S7, ZERO
9D0076E8  02403025   OR A2, S2, ZERO
9D0076EC  02A02025   OR A0, S5, ZERO
9D0076F0  03C02825   OR A1, FP, ZERO
9D0076F4  0040A025   OR S4, V0, ZERO
9D0076F8  0F404595   JAL __ashldi3
9D0076FC  00609825   OR S3, V1, ZERO
9D007700  8FA80040   LW T0, 64(SP)
9D007704  02403025   OR A2, S2, ZERO
9D007708  02E02825   OR A1, S7, ZERO
9D00770C  01002025   OR A0, T0, ZERO
9D007710  0282A025   OR S4, S4, V0
9D007714  0F404595   JAL __ashldi3
9D007718  02639825   OR S3, S3, V1
9D00771C  00431025   OR V0, V0, V1
9D007720  0002102B   SLTU V0, ZERO, V0
9D007724  26100040   ADDIU S0, S0, 64
9D007728  02821025   OR V0, S4, V0
9D00772C  02123023   SUBU A2, S0, S2
9D007730  00402025   OR A0, V0, ZERO
9D007734  12200006   BEQ S1, ZERO, 0x9D007750
9D007738  02602825   OR A1, S3, ZERO
9D00773C  00023823   SUBU A3, ZERO, V0
9D007740  0007182B   SLTU V1, ZERO, A3
9D007744  00134023   SUBU T0, ZERO, S3
9D007748  00E02025   OR A0, A3, ZERO
9D00774C  01032823   SUBU A1, T0, V1
9D007750  44840000   MTC1 A0, F0
9D007754  28C3FBC4   SLTI V1, A2, -1084
9D007758  44E50000   MTHC1 A1, F0
9D00775C  106000CF   BEQ V1, ZERO, 0x9D007A9C
9D007760  46A00321   CVT.D.L F12, F0
9D007764  2403FBC3   ADDIU V1, ZERO, -1085
9D007768  14C300D0   BNE A2, V1, 0x9D007AAC
9D00776C  00133D80   SLL A3, S3, 22
9D007770  122000AE   BEQ S1, ZERO, 0x9D007A2C
9D007774  3C039D01   LUI V1, -25343
9D007778  3C039D01   LUI V1, -25343
9D00777C  D4621BA8   LDC1 F2, 7080(V1)
9D007780  462C1032   C.EQ.D F2, F12
9D007784  450000AB   BC1F 0x9D007A34
9D007788  00021D40   SLL V1, V0, 21
9D00778C  3C029D01   LUI V0, -25343
9D007790  D4401BB0   LDC1 F0, 7088(V0)
9D007794  3C029D01   LUI V0, -25343
9D007798  D4541BB8   LDC1 F20, 7096(V0)
9D00779C  46206302   MUL.D F12, F12, F0
9D0077A0  46206320   CVT.S.D F12, F12
9D0077A4  46006321   CVT.D.S F12, F12
9D0077A8  1000FF5E   BEQ ZERO, ZERO, 0x9D007524
9D0077AC  46346502   MUL.D F20, F12, F20
9D0077B0  12200053   BEQ S1, ZERO, 0x9D007900
9D0077B4  2510FFC0   ADDIU S0, T0, -64
9D0077B8  2A220040   SLTI V0, S1, 64
9D0077BC  5040004D   BEQL V0, ZERO, 0x9D0078F4
9D0077C0  240B0001   ADDIU T3, ZERO, 1
9D0077C4  24150040   ADDIU S5, ZERO, 64
9D0077C8  02B1A823   SUBU S5, S5, S1
9D0077CC  01802025   OR A0, T4, ZERO
9D0077D0  01202825   OR A1, T1, ZERO
9D0077D4  02A03025   OR A2, S5, ZERO
9D0077D8  AFAA0044   SW T2, 68(SP)
9D0077DC  F7AE0098   SDC1 F14, 152(SP)
9D0077E0  F7AC0090   SDC1 F12, 144(SP)
9D0077E4  AFAD004C   SW T5, 76(SP)
9D0077E8  AFAC0048   SW T4, 72(SP)
9D0077EC  0F404595   JAL __ashldi3
9D0077F0  AFA90040   SW T1, 64(SP)
9D0077F4  8FAC0048   LW T4, 72(SP)
9D0077F8  8FA90040   LW T1, 64(SP)
9D0077FC  00439025   OR S2, V0, V1
9D007800  01802025   OR A0, T4, ZERO
9D007804  01202825   OR A1, T1, ZERO
9D007808  0F404586   JAL __lshrdi3
9D00780C  02203025   OR A2, S1, ZERO
9D007810  0012902B   SLTU S2, ZERO, S2
9D007814  02602025   OR A0, S3, ZERO
9D007818  02C02825   OR A1, S6, ZERO
9D00781C  02A03025   OR A2, S5, ZERO
9D007820  02429025   OR S2, S2, V0
9D007824  0F404595   JAL __ashldi3
9D007828  0060B825   OR S7, V1, ZERO
9D00782C  02425825   OR T3, S2, V0
9D007830  02E34825   OR T1, S7, V1
9D007834  02602025   OR A0, S3, ZERO
9D007838  02C02825   OR A1, S6, ZERO
9D00783C  02203025   OR A2, S1, ZERO
9D007840  AFAB0048   SW T3, 72(SP)
9D007844  0F404586   JAL __lshrdi3
9D007848  AFA90040   SW T1, 64(SP)
9D00784C  00409825   OR S3, V0, ZERO
9D007850  0060B025   OR S6, V1, ZERO
9D007854  00009025   OR S2, ZERO, ZERO
9D007858  00006025   OR T4, ZERO, ZERO
9D00785C  8FA90040   LW T1, 64(SP)
9D007860  8FAB0048   LW T3, 72(SP)
9D007864  D7AC0090   LDC1 F12, 144(SP)
9D007868  D7AE0098   LDC1 F14, 152(SP)
9D00786C  1000FF79   BEQ ZERO, ZERO, 0x9D007654
9D007870  8FAA0044   LW T2, 68(SP)
9D007874  02088823   SUBU S1, S0, T0
9D007878  12200024   BEQ S1, ZERO, 0x9D00790C
9D00787C  02809025   OR S2, S4, ZERO
9D007880  2A220040   SLTI V0, S1, 64
9D007884  50400025   BEQL V0, ZERO, 0x9D00791C
9D007888  24120001   ADDIU S2, ZERO, 1
9D00788C  24060040   ADDIU A2, ZERO, 64
9D007890  02802025   OR A0, S4, ZERO
9D007894  01402825   OR A1, T2, ZERO
9D007898  00D13023   SUBU A2, A2, S1
9D00789C  AFA90044   SW T1, 68(SP)
9D0078A0  AFAC0048   SW T4, 72(SP)
9D0078A4  F7AE0098   SDC1 F14, 152(SP)
9D0078A8  F7AC0090   SDC1 F12, 144(SP)
9D0078AC  0F404595   JAL __ashldi3
9D0078B0  AFAA0040   SW T2, 64(SP)
9D0078B4  8FAA0040   LW T2, 64(SP)
9D0078B8  00439025   OR S2, V0, V1
9D0078BC  02802025   OR A0, S4, ZERO
9D0078C0  01402825   OR A1, T2, ZERO
9D0078C4  0F404586   JAL __lshrdi3
9D0078C8  02203025   OR A2, S1, ZERO
9D0078CC  0012902B   SLTU S2, ZERO, S2
9D0078D0  02429025   OR S2, S2, V0
9D0078D4  00606025   OR T4, V1, ZERO
9D0078D8  0000A025   OR S4, ZERO, ZERO
9D0078DC  00005025   OR T2, ZERO, ZERO
9D0078E0  D7AC0090   LDC1 F12, 144(SP)
9D0078E4  D7AE0098   LDC1 F14, 152(SP)
9D0078E8  8FAB0048   LW T3, 72(SP)
9D0078EC  1000FF59   BEQ ZERO, ZERO, 0x9D007654
9D0078F0  8FA90044   LW T1, 68(SP)
9D0078F4  00004825   OR T1, ZERO, ZERO
9D0078F8  00009825   OR S3, ZERO, ZERO
9D0078FC  0000B025   OR S6, ZERO, ZERO
9D007900  00009025   OR S2, ZERO, ZERO
9D007904  1000FF53   BEQ ZERO, ZERO, 0x9D007654
9D007908  00006025   OR T4, ZERO, ZERO
9D00790C  01406025   OR T4, T2, ZERO
9D007910  0000A025   OR S4, ZERO, ZERO
9D007914  1000FF4F   BEQ ZERO, ZERO, 0x9D007654
9D007918  00005025   OR T2, ZERO, ZERO
9D00791C  1000FFFC   BEQ ZERO, ZERO, 0x9D007910
9D007920  00006025   OR T4, ZERO, ZERO
9D007924  0168182B   SLTU V1, T3, T0
9D007928  012C2823   SUBU A1, T1, T4
9D00792C  00A3B823   SUBU S7, A1, V1
9D007930  0137102B   SLTU V0, T1, S7
9D007934  24040001   ADDIU A0, ZERO, 1
9D007938  14400007   BNE V0, ZERO, 0x9D007958
9D00793C  00006825   OR T5, ZERO, ZERO
9D007940  56E90005   BNEL S7, T1, 0x9D007958
9D007944  00002025   OR A0, ZERO, ZERO
9D007948  14600004   BNE V1, ZERO, 0x9D00795C
9D00794C  02742823   SUBU A1, S3, S4
9D007950  00002025   OR A0, ZERO, ZERO
9D007954  00006825   OR T5, ZERO, ZERO
9D007958  02742823   SUBU A1, S3, S4
9D00795C  0265F02B   SLTU FP, S3, A1
9D007960  02CA1823   SUBU V1, S6, T2
9D007964  007E1823   SUBU V1, V1, FP
9D007968  00A4A823   SUBU S5, A1, A0
9D00796C  00B5282B   SLTU A1, A1, S5
9D007970  006D1823   SUBU V1, V1, T5
9D007974  0065F023   SUBU FP, V1, A1
9D007978  07C10014   BGEZ FP, 0x9D0079CC
9D00797C  02BE1025   OR V0, S5, FP
9D007980  024B4023   SUBU T0, S2, T3
9D007984  0248302B   SLTU A2, S2, T0
9D007988  01892823   SUBU A1, T4, T1
9D00798C  02933823   SUBU A3, S4, S3
9D007990  00A6B823   SUBU S7, A1, A2
9D007994  0287102B   SLTU V0, S4, A3
9D007998  01561823   SUBU V1, T2, S6
9D00799C  0117A825   OR S5, T0, S7
9D0079A0  00E4F021   ADDU FP, A3, A0
9D0079A4  00621823   SUBU V1, V1, V0
9D0079A8  0015A82B   SLTU S5, ZERO, S5
9D0079AC  03C7382B   SLTU A3, FP, A3
9D0079B0  006D1821   ADDU V1, V1, T5
9D0079B4  03D5A823   SUBU S5, FP, S5
9D0079B8  00E31821   ADDU V1, A3, V1
9D0079BC  03D5F02B   SLTU FP, FP, S5
9D0079C0  007EF023   SUBU FP, V1, FP
9D0079C4  2E310001   SLTIU S1, S1, 1
9D0079C8  02BE1025   OR V0, S5, FP
9D0079CC  1440FF3C   BNE V0, ZERO, 0x9D0076C0
9D0079D0  02A02025   OR A0, S5, ZERO
9D0079D4  01171025   OR V0, T0, S7
9D0079D8  1040FECB   BEQ V0, ZERO, 0x9D007508
9D0079DC  01002025   OR A0, T0, ZERO
9D0079E0  02E02825   OR A1, S7, ZERO
9D0079E4  0F40427A   JAL a_clz_64
9D0079E8  AFA80040   SW T0, 64(SP)
9D0079EC  2452FFFF   ADDIU S2, V0, -1
9D0079F0  06410008   BGEZ S2, 0x9D007A14
9D0079F4  8FA80040   LW T0, 64(SP)
9D0079F8  00081042   SRL V0, T0, 1
9D0079FC  00171FC0   SLL V1, S7, 31
9D007A00  00621025   OR V0, V1, V0
9D007A04  31080001   ANDI T0, T0, 1
9D007A08  00481025   OR V0, V0, T0
9D007A0C  1000FF47   BEQ ZERO, ZERO, 0x9D00772C
9D007A10  00179842   SRL S3, S7, 1
9D007A14  02403025   OR A2, S2, ZERO
9D007A18  01002025   OR A0, T0, ZERO
9D007A1C  0F404595   JAL __ashldi3
9D007A20  02E02825   OR A1, S7, ZERO
9D007A24  1000FF41   BEQ ZERO, ZERO, 0x9D00772C
9D007A28  00609825   OR S3, V1, ZERO
9D007A2C  1000FF54   BEQ ZERO, ZERO, 0x9D007780
9D007A30  D4621BA0   LDC1 F2, 7072(V1)
9D007A34  10600019   BEQ V1, ZERO, 0x9D007A9C
9D007A38  00022042   SRL A0, V0, 1
9D007A3C  00131FC0   SLL V1, S3, 31
9D007A40  30420001   ANDI V0, V0, 1
9D007A44  00642025   OR A0, V1, A0
9D007A48  0013B842   SRL S7, S3, 1
9D007A4C  00824025   OR T0, A0, V0
9D007A50  3C024000   LUI V0, 16384
9D007A54  12200006   BEQ S1, ZERO, 0x9D007A70
9D007A58  00574825   OR T1, V0, S7
9D007A5C  00081023   SUBU V0, ZERO, T0
9D007A60  0002182B   SLTU V1, ZERO, V0
9D007A64  00092023   SUBU A0, ZERO, T1
9D007A68  00404025   OR T0, V0, ZERO
9D007A6C  00834823   SUBU T1, A0, V1
9D007A70  44880000   MTC1 T0, F0
9D007A74  3C029D01   LUI V0, -25343
9D007A78  44E90000   MTHC1 T1, F0
9D007A7C  D44C1BB8   LDC1 F12, 7096(V0)
9D007A80  46A00021   CVT.D.L F0, F0
9D007A84  46200000   ADD.D F0, F0, F0
9D007A88  46220001   SUB.D F0, F0, F2
9D007A8C  462C0302   MUL.D F12, F0, F12
9D007A90  46200081   SUB.D F2, F0, F0
9D007A94  462C6302   MUL.D F12, F12, F12
9D007A98  4C026321   MADD.D F12, F0, F12, F2
9D007A9C  0F404096   JAL scalbn
9D007AA0  00000000   NOP
9D007AA4  1000FE9F   BEQ ZERO, ZERO, 0x9D007524
9D007AA8  46200506   MOV.D F20, F0
9D007AAC  00022580   SLL A0, V0, 22
9D007AB0  00021282   SRL V0, V0, 10
9D007AB4  0004202B   SLTU A0, ZERO, A0
9D007AB8  00E21025   OR V0, A3, V0
9D007ABC  00821025   OR V0, A0, V0
9D007AC0  00023D82   SRL A3, V0, 22
9D007AC4  7C134804   INS S3, ZERO, 0, 10
9D007AC8  00F32825   OR A1, A3, S3
9D007ACC  12200006   BEQ S1, ZERO, 0x9D007AE8
9D007AD0  00022280   SLL A0, V0, 10
9D007AD4  00041023   SUBU V0, ZERO, A0
9D007AD8  0002182B   SLTU V1, ZERO, V0
9D007ADC  00053823   SUBU A3, ZERO, A1
9D007AE0  00402025   OR A0, V0, ZERO
9D007AE4  00E32823   SUBU A1, A3, V1
9D007AE8  44840000   MTC1 A0, F0
9D007AEC  44E50000   MTHC1 A1, F0
9D007AF0  1000FFEA   BEQ ZERO, ZERO, 0x9D007A9C
9D007AF4  46A00321   CVT.D.L F12, F0
9D0101CC  AFA7000C   SW A3, 12(SP)
9D0101D0  8FA3000C   LW V1, 12(SP)
9D0101D4  AFA60008   SW A2, 8(SP)
9D0101D8  00801025   OR V0, A0, ZERO
9D0101DC  00032D02   SRL A1, V1, 20
9D0101E0  30A80800   ANDI T0, A1, 2048
9D0101E4  30A507FF   ANDI A1, A1, 2047
9D0101E8  14A0000E   BNE A1, ZERO, normalize
9D0101EC  8FA40008   LW A0, 8(SP)
9D0101F0  3C039D01   LUI V1, -25343
9D0101F4  44860800   MTC1 A2, F1
9D0101F8  D4601BA0   LDC1 F0, 7072(V1)
9D0101FC  44E70800   MTHC1 A3, F1
9D010200  24050800   ADDIU A1, ZERO, 2048
9D010204  46200802   MUL.D F0, F1, F0
9D010208  44060000   MFC1 A2, F0
9D01020C  44670000   MFHC1 A3, F0
9D010210  00C02025   OR A0, A2, ZERO
9D010214  7CE65500   EXT A2, A3, 20, 11
9D010218  10C00002   BEQ A2, ZERO, normalize
9D01021C  00E01825   OR V1, A3, ZERO
9D010220  24C5FFC1   ADDIU A1, A2, -63
9D010224  000437C2   SRL A2, A0, 31
9D010228  00031840   SLL V1, V1, 1
9D01022C  00C31825   OR V1, A2, V1
9D010230  00042040   SLL A0, A0, 1
9D010234  AC440000   SW A0, 0(V0)
9D010238  7C63A000   EXT V1, V1, 0, 21
9D01023C  3C040020   LUI A0, 32
9D010240  00831825   OR V1, A0, V1
9D010244  24A5FBCC   ADDIU A1, A1, -1076
9D010248  AC430004   SW V1, 4(V0)
9D01024C  AC450008   SW A1, 8(V0)
9D010250  03E00008   JR RA
9D010254  AC48000C   SW T0, 12(V0)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/math/floor.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00F588  27BDFFF8   ADDIU SP, SP, -8
9D00F58C  F7AC0008   SDC1 F12, 8(SP)
9D00F590  8FA3000C   LW V1, 12(SP)
9D00F594  7C625500   EXT V0, V1, 20, 11
9D00F598  28440433   SLTI A0, V0, 1075
9D00F59C  10800015   BEQ A0, ZERO, 0x9D00F5F4
9D00F5A0  D7A00008   LDC1 F0, 8(SP)
9D00F5A4  44801000   MTC1 ZERO, F2
9D00F5A8  44E01000   MTHC1 ZERO, F2
9D00F5AC  46226032   C.EQ.D F12, F2
9D00F5B0  45010010   BC1T 0x9D00F5F4
9D00F5B4  00000000   NOP
9D00F5B8  3C049D01   LUI A0, -25343
9D00F5BC  0461000F   BGEZ V1, 0x9D00F5FC
9D00F5C0  D4841D08   LDC1 F4, 7432(A0)
9D00F5C4  46246001   SUB.D F0, F12, F4
9D00F5C8  46240000   ADD.D F0, F0, F4
9D00F5CC  462C0001   SUB.D F0, F0, F12
9D00F5D0  284203FF   SLTI V0, V0, 1023
9D00F5D4  1040000E   BEQ V0, ZERO, 0x9D00F610
9D00F5D8  D7A10008   LDC1 F1, 8(SP)
9D00F5DC  F7A00000   SDC1 F0, 0(SP)
9D00F5E0  04600014   BLTZ V1, 0x9D00F634
9D00F5E4  3C029D01   LUI V0, -25343
9D00F5E8  AFA00008   SW ZERO, 8(SP)
9D00F5EC  AFA0000C   SW ZERO, 12(SP)
9D00F5F0  D7A00008   LDC1 F0, 8(SP)
9D00F5F4  03E00008   JR RA
9D00F5F8  27BD0008   ADDIU SP, SP, 8
9D00F5FC  D7A10008   LDC1 F1, 8(SP)
9D00F600  46240000   ADD.D F0, F0, F4
9D00F604  46240001   SUB.D F0, F0, F4
9D00F608  1000FFF1   BEQ ZERO, ZERO, 0x9D00F5D0
9D00F60C  46210001   SUB.D F0, F0, F1
9D00F610  4620113C   C.LT.D 1, F2, F0
9D00F614  46200840   ADD.D F1, F1, F0
9D00F618  4504FFF5   BC1F 1, 0x9D00F5F0
9D00F61C  F7A10008   SDC1 F1, 8(SP)
9D00F620  3C029D01   LUI V0, -25343
9D00F624  D4401D10   LDC1 F0, 7440(V0)
9D00F628  46200801   SUB.D F0, F1, F0
9D00F62C  1000FFF0   BEQ ZERO, ZERO, 0x9D00F5F0
9D00F630  F7A00008   SDC1 F0, 8(SP)
9D00F634  1000FFFD   BEQ ZERO, ZERO, 0x9D00F62C
9D00F638  D4401D00   LDC1 F0, 7424(V0)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/math/fabsl.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D011C4C  27BDFFE8   ADDIU SP, SP, -24
9D011C50  AFBF0014   SW RA, 20(SP)
9D011C54  0F404746   JAL fabs
9D011C58  00000000   NOP
9D011C5C  8FBF0014   LW RA, 20(SP)
9D011C60  03E00008   JR RA
9D011C64  27BD0018   ADDIU SP, SP, 24
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/math/fabs.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D011D18  44046000   MFC1 A0, F12
9D011D1C  44656000   MFHC1 A1, F12
9D011D20  44840000   MTC1 A0, F0
9D011D24  7CA3F000   EXT V1, A1, 0, 31
9D011D28  03E00008   JR RA
9D011D2C  44E30000   MTHC1 V1, F0
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/math/cos.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00DECC  27BDFFC8   ADDIU SP, SP, -56
9D00DED0  F7AC0038   SDC1 F12, 56(SP)
9D00DED4  8FA2003C   LW V0, 60(SP)
9D00DED8  3C033FE9   LUI V1, 16361
9D00DEDC  246321FC   ADDIU V1, V1, 8700
9D00DEE0  7C42F000   EXT V0, V0, 0, 31
9D00DEE4  0043182B   SLTU V1, V0, V1
9D00DEE8  10600013   BEQ V1, ZERO, 0x9D00DF38
9D00DEEC  AFBF0034   SW RA, 52(SP)
9D00DEF0  3C033E46   LUI V1, 15942
9D00DEF4  3463A09E   ORI V1, V1, -24418
9D00DEF8  0043102B   SLTU V0, V0, V1
9D00DEFC  10400008   BEQ V0, ZERO, 0x9D00DF20
9D00DF00  3C029D01   LUI V0, -25343
9D00DF04  D4401D88   LDC1 F0, 7560(V0)
9D00DF08  3C029D01   LUI V0, -25343
9D00DF0C  46206000   ADD.D F0, F12, F0
9D00DF10  F7A00018   SDC1 F0, 24(SP)
9D00DF14  D4401D80   LDC1 F0, 7552(V0)
9D00DF18  10000024   BEQ ZERO, ZERO, 0x9D00DFAC
9D00DF1C  F7A00028   SDC1 F0, 40(SP)
9D00DF20  44807000   MTC1 ZERO, F14
9D00DF24  44E07000   MTHC1 ZERO, F14
9D00DF28  0F404120   JAL __cos
9D00DF2C  00000000   NOP
9D00DF30  1000001E   BEQ ZERO, ZERO, 0x9D00DFAC
9D00DF34  F7A00028   SDC1 F0, 40(SP)
9D00DF38  3C037FF0   LUI V1, 32752
9D00DF3C  0043102B   SLTU V0, V0, V1
9D00DF40  14400003   BNE V0, ZERO, 0x9D00DF50
9D00DF44  D7A00038   LDC1 F0, 56(SP)
9D00DF48  1000FFF3   BEQ ZERO, ZERO, 0x9D00DF18
9D00DF4C  46200001   SUB.D F0, F0, F0
9D00DF50  0F402186   JAL __rem_pio2
9D00DF54  27A60018   ADDIU A2, SP, 24
9D00DF58  30420003   ANDI V0, V0, 3
9D00DF5C  24030001   ADDIU V1, ZERO, 1
9D00DF60  D7AE0020   LDC1 F14, 32(SP)
9D00DF64  10430009   BEQ V0, V1, 0x9D00DF8C
9D00DF68  D7AC0018   LDC1 F12, 24(SP)
9D00DF6C  1040FFEE   BEQ V0, ZERO, 0x9D00DF28
9D00DF70  24040002   ADDIU A0, ZERO, 2
9D00DF74  10440011   BEQ V0, A0, 0x9D00DFBC
9D00DF78  00000000   NOP
9D00DF7C  0F404009   JAL __sin
9D00DF80  AFA30010   SW V1, 16(SP)
9D00DF84  10000009   BEQ ZERO, ZERO, 0x9D00DFAC
9D00DF88  F7A00028   SDC1 F0, 40(SP)
9D00DF8C  0F404009   JAL __sin
9D00DF90  AFA20010   SW V0, 16(SP)
9D00DF94  44650000   MFHC1 A1, F0
9D00DF98  44040000   MFC1 A0, F0
9D00DF9C  3C028000   LUI V0, -32768
9D00DFA0  00451026   XOR V0, V0, A1
9D00DFA4  AFA40028   SW A0, 40(SP)
9D00DFA8  AFA2002C   SW V0, 44(SP)
9D00DFAC  8FBF0034   LW RA, 52(SP)
9D00DFB0  D7A00028   LDC1 F0, 40(SP)
9D00DFB4  03E00008   JR RA
9D00DFB8  27BD0038   ADDIU SP, SP, 56
9D00DFBC  0F404120   JAL __cos
9D00DFC0  00000000   NOP
9D00DFC4  1000FFF4   BEQ ZERO, ZERO, 0x9D00DF98
9D00DFC8  44650000   MFHC1 A1, F0
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/math/copysignl.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D011C30  27BDFFE8   ADDIU SP, SP, -24
9D011C34  AFBF0014   SW RA, 20(SP)
9D011C38  0F404677   JAL copysign
9D011C3C  00000000   NOP
9D011C40  8FBF0014   LW RA, 20(SP)
9D011C44  03E00008   JR RA
9D011C48  27BD0018   ADDIU SP, SP, 24
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/math/copysign.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0119DC  44026000   MFC1 V0, F12
9D0119E0  44697000   MFHC1 T1, F14
9D0119E4  44636000   MFHC1 V1, F12
9D0119E8  00403025   OR A2, V0, ZERO
9D0119EC  01202025   OR A0, T1, ZERO
9D0119F0  7C65F000   EXT A1, V1, 0, 31
9D0119F4  7C04F004   INS A0, ZERO, 0, 31
9D0119F8  44860000   MTC1 A2, F0
9D0119FC  00A41825   OR V1, A1, A0
9D011A00  03E00008   JR RA
9D011A04  44E30000   MTHC1 V1, F0
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/math/__sin.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D010024  462C6182   MUL.D F6, F12, F12
9D010028  3C039D01   LUI V1, -25343
9D01002C  D46A14E8   LDC1 F10, 5352(V1)
9D010030  3C039D01   LUI V1, -25343
9D010034  D46214F0   LDC1 F2, 5360(V1)
9D010038  3C039D01   LUI V1, -25343
9D01003C  D46814F8   LDC1 F8, 5368(V1)
9D010040  3C039D01   LUI V1, -25343
9D010044  4C4A32A9   MSUB.D F10, F2, F6, F10
9D010048  D4621500   LDC1 F2, 5376(V1)
9D01004C  46263102   MUL.D F4, F6, F6
9D010050  3C039D01   LUI V1, -25343
9D010054  4C483229   MSUB.D F8, F2, F6, F8
9D010058  D4621508   LDC1 F2, 5384(V1)
9D01005C  8FA20010   LW V0, 16(SP)
9D010060  46266002   MUL.D F0, F12, F6
9D010064  46262102   MUL.D F4, F4, F6
9D010068  4C4640A1   MADD.D F2, F2, F8, F6
9D01006C  14400006   BNE V0, ZERO, 0x9D010088
9D010070  4C4A20A1   MADD.D F2, F2, F4, F10
9D010074  3C029D01   LUI V0, -25343
9D010078  D44E1510   LDC1 F14, 5392(V0)
9D01007C  4DC230A9   MSUB.D F2, F14, F6, F2
9D010080  03E00008   JR RA
9D010084  4D801021   MADD.D F0, F12, F2, F0
9D010088  46201082   MUL.D F2, F2, F0
9D01008C  3C029D01   LUI V0, -25343
9D010090  D4441518   LDC1 F4, 5400(V0)
9D010094  3C029D01   LUI V0, -25343
9D010098  4C4470A9   MSUB.D F2, F2, F14, F4
9D01009C  4DC610A9   MSUB.D F2, F14, F2, F6
9D0100A0  D4461520   LDC1 F6, 5408(V0)
9D0100A4  46260002   MUL.D F0, F0, F6
9D0100A8  46201001   SUB.D F0, F2, F0
9D0100AC  03E00008   JR RA
9D0100B0  46206001   SUB.D F0, F12, F0
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/math/__rem_pio2_large.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D005690  27BDFD50   ADDIU SP, SP, -688
9D005694  AFB20260   SW S2, 608(SP)
9D005698  8FB202C0   LW S2, 704(SP)
9D00569C  3C039D01   LUI V1, -25343
9D0056A0  2463CA60   ADDIU V1, V1, -13728
9D0056A4  00121080   SLL V0, S2, 2
9D0056A8  00431021   ADDU V0, V0, V1
9D0056AC  AFB1025C   SW S1, 604(SP)
9D0056B0  8C510000   LW S1, 0(V0)
9D0056B4  28C2FFEC   SLTI V0, A2, -20
9D0056B8  AFB5026C   SW S5, 620(SP)
9D0056BC  AFB40268   SW S4, 616(SP)
9D0056C0  AFBF027C   SW RA, 636(SP)
9D0056C4  AFBE0278   SW FP, 632(SP)
9D0056C8  AFB70274   SW S7, 628(SP)
9D0056CC  AFB60270   SW S6, 624(SP)
9D0056D0  AFB30264   SW S3, 612(SP)
9D0056D4  AFB00258   SW S0, 600(SP)
9D0056D8  F7BC02A0   SDC1 F28, 672(SP)
9D0056DC  F7BA0298   SDC1 F26, 664(SP)
9D0056E0  F7B80290   SDC1 F24, 656(SP)
9D0056E4  F7B60288   SDC1 F22, 648(SP)
9D0056E8  F7B40280   SDC1 F20, 640(SP)
9D0056EC  AFA402B0   SW A0, 688(SP)
9D0056F0  00A0A825   OR S5, A1, ZERO
9D0056F4  24E9FFFF   ADDIU T1, A3, -1
9D0056F8  14400006   BNE V0, ZERO, 0x9D005714
9D0056FC  0000A025   OR S4, ZERO, ZERO
9D005700  24C4FFFD   ADDIU A0, A2, -3
9D005704  24020018   ADDIU V0, ZERO, 24
9D005708  0082001A   DIV A0, V0
9D00570C  004001F4   TEQ V0, ZERO
9D005710  0000A012   MFLO S4
9D005714  26970001   ADDIU S7, S4, 1
9D005718  2402FFE8   ADDIU V0, ZERO, -24
9D00571C  72E21802   MUL V1, S7, V0
9D005720  02895023   SUBU T2, S4, T1
9D005724  3C089D01   LUI T0, -25343
9D005728  02295821   ADDU T3, S1, T1
9D00572C  01401025   OR V0, T2, ZERO
9D005730  2508C958   ADDIU T0, T0, -13992
9D005734  0066B821   ADDU S7, V1, A2
9D005738  27A30150   ADDIU V1, SP, 336
9D00573C  004A3023   SUBU A2, V0, T2
9D005740  0166302A   SLT A2, T3, A2
9D005744  50C00087   BEQL A2, ZERO, 0x9D005964
9D005748  44800000   MTC1 ZERO, F0
9D00574C  27A30150   ADDIU V1, SP, 336
9D005750  000710C0   SLL V0, A3, 3
9D005754  00621021   ADDU V0, V1, V0
9D005758  27AB0010   ADDIU T3, SP, 16
9D00575C  00001825   OR V1, ZERO, ZERO
9D005760  0223302A   SLT A2, S1, V1
9D005764  50C00098   BEQL A2, ZERO, 0x9D0059C8
9D005768  44800000   MTC1 ZERO, F0
9D00576C  00111080   SLL V0, S1, 2
9D005770  27A301F0   ADDIU V1, SP, 496
9D005774  00621021   ADDU V0, V1, V0
9D005778  AFA20240   SW V0, 576(SP)
9D00577C  3C029D01   LUI V0, -25343
9D005780  D4541928   LDC1 F20, 6440(V0)
9D005784  3C029D01   LUI V0, -25343
9D005788  D4561930   LDC1 F22, 6448(V0)
9D00578C  3C029D01   LUI V0, -25343
9D005790  D45A1938   LDC1 F26, 6456(V0)
9D005794  3C029D01   LUI V0, -25343
9D005798  D4581940   LDC1 F24, 6464(V0)
9D00579C  3C029D01   LUI V0, -25343
9D0057A0  0220F025   OR FP, S1, ZERO
9D0057A4  AFA20248   SW V0, 584(SP)
9D0057A8  001E18C0   SLL V1, FP, 3
9D0057AC  27B30010   ADDIU S3, SP, 16
9D0057B0  4C730301   LDXC1 F12, 19(V1)
9D0057B4  27A801F0   ADDIU T0, SP, 496
9D0057B8  01005025   OR T2, T0, ZERO
9D0057BC  03C03025   OR A2, FP, ZERO
9D0057C0  5CC00085   BGTZL A2, 0x9D0059D8
9D0057C4  46346002   MUL.D F0, F12, F20
9D0057C8  02E03025   OR A2, S7, ZERO
9D0057CC  AFA702BC   SW A3, 700(SP)
9D0057D0  AFA80254   SW T0, 596(SP)
9D0057D4  0F404096   JAL scalbn
9D0057D8  AFA90250   SW T1, 592(SP)
9D0057DC  463A0302   MUL.D F12, F0, F26
9D0057E0  0F403D62   JAL floor
9D0057E4  46200706   MOV.D F28, F0
9D0057E8  46380002   MUL.D F0, F0, F24
9D0057EC  8FA90250   LW T1, 592(SP)
9D0057F0  8FA80254   LW T0, 596(SP)
9D0057F4  8FA702BC   LW A3, 700(SP)
9D0057F8  4620E701   SUB.D F28, F28, F0
9D0057FC  4620E00D   TRUNC.W.D F0, F28
9D005800  44100000   MFC1 S0, F0
9D005804  46800021   CVT.D.W F0, F0
9D005808  1AE0007F   BLEZ S7, 0x9D005A08
9D00580C  4620E701   SUB.D F28, F28, F0
9D005810  27C3FFFF   ADDIU V1, FP, -1
9D005814  00031880   SLL V1, V1, 2
9D005818  02631821   ADDU V1, S3, V1
9D00581C  8C6A01E0   LW T2, 480(V1)
9D005820  24160018   ADDIU S6, ZERO, 24
9D005824  02D7B023   SUBU S6, S6, S7
9D005828  02CA3007   SRAV A2, T2, S6
9D00582C  02C6B004   SLLV S6, A2, S6
9D005830  0156B023   SUBU S6, T2, S6
9D005834  AC7601E0   SW S6, 480(V1)
9D005838  24030017   ADDIU V1, ZERO, 23
9D00583C  00771823   SUBU V1, V1, S7
9D005840  02068021   ADDU S0, S0, A2
9D005844  0076B007   SRAV S6, S6, V1
9D005848  5AC0001F   BLEZL S6, 0x9D0058C8
9D00584C  44800000   MTC1 ZERO, F0
9D005850  3C0B00FF   LUI T3, 255
9D005854  26100001   ADDIU S0, S0, 1
9D005858  00005025   OR T2, ZERO, ZERO
9D00585C  00003025   OR A2, ZERO, ZERO
9D005860  356BFFFF   ORI T3, T3, -1
9D005864  3C0C0100   LUI T4, 256
9D005868  015E182A   SLT V1, T2, FP
9D00586C  14600074   BNE V1, ZERO, 0x9D005A40
9D005870  00000000   NOP
9D005874  1AE00005   BLEZ S7, 0x9D00588C
9D005878  24030001   ADDIU V1, ZERO, 1
9D00587C  12E3007F   BEQ S7, V1, 0x9D005A7C
9D005880  24030002   ADDIU V1, ZERO, 2
9D005884  12E30084   BEQ S7, V1, 0x9D005A98
9D005888  27C3FFFF   ADDIU V1, FP, -1
9D00588C  24030002   ADDIU V1, ZERO, 2
9D005890  56C3000D   BNEL S6, V1, 0x9D0058C8
9D005894  44800000   MTC1 ZERO, F0
9D005898  8FA20248   LW V0, 584(SP)
9D00589C  D44C1950   LDC1 F12, 6480(V0)
9D0058A0  10C00008   BEQ A2, ZERO, 0x9D0058C4
9D0058A4  463C6701   SUB.D F28, F12, F28
9D0058A8  02E03025   OR A2, S7, ZERO
9D0058AC  AFA702BC   SW A3, 700(SP)
9D0058B0  0F404096   JAL scalbn
9D0058B4  AFA90250   SW T1, 592(SP)
9D0058B8  4620E701   SUB.D F28, F28, F0
9D0058BC  8FA702BC   LW A3, 700(SP)
9D0058C0  8FA90250   LW T1, 592(SP)
9D0058C4  44800000   MTC1 ZERO, F0
9D0058C8  44E00000   MTHC1 ZERO, F0
9D0058CC  4620E132   C.EQ.D 1, F28, F0
9D0058D0  450400A8   BC1F 1, 0x9D005B74
9D0058D4  00004025   OR T0, ZERO, ZERO
9D0058D8  27C3FFFF   ADDIU V1, FP, -1
9D0058DC  00603025   OR A2, V1, ZERO
9D0058E0  00D1502A   SLT T2, A2, S1
9D0058E4  51400071   BEQL T2, ZERO, 0x9D005AAC
9D0058E8  00065080   SLL T2, A2, 2
9D0058EC  51000096   BEQL T0, ZERO, 0x9D005B48
9D0058F0  8FA30240   LW V1, 576(SP)
9D0058F4  00032080   SLL A0, V1, 2
9D0058F8  27A201F0   ADDIU V0, SP, 496
9D0058FC  00442021   ADDU A0, V0, A0
9D005900  8C840000   LW A0, 0(A0)
9D005904  10800099   BEQ A0, ZERO, 0x9D005B6C
9D005908  26F7FFE8   ADDIU S7, S7, -24
9D00590C  3C049D01   LUI A0, -25343
9D005910  D48C1950   LDC1 F12, 6480(A0)
9D005914  02E03025   OR A2, S7, ZERO
9D005918  0F404096   JAL scalbn
9D00591C  AFA30240   SW V1, 576(SP)
9D005920  8FA30240   LW V1, 576(SP)
9D005924  3C069D01   LUI A2, -25343
9D005928  D4C41928   LDC1 F4, 6440(A2)
9D00592C  00602025   OR A0, V1, ZERO
9D005930  048100AD   BGEZ A0, 0x9D005BE8
9D005934  00043080   SLL A2, A0, 2
9D005938  3C099D01   LUI T1, -25343
9D00593C  00603825   OR A3, V1, ZERO
9D005940  00004025   OR T0, ZERO, ZERO
9D005944  2529C918   ADDIU T1, T1, -14056
9D005948  04E000C2   BLTZ A3, 0x9D005C54
9D00594C  000730C0   SLL A2, A3, 3
9D005950  44800000   MTC1 ZERO, F0
9D005954  02663021   ADDU A2, S3, A2
9D005958  44E00000   MTHC1 ZERO, F0
9D00595C  100000B2   BEQ ZERO, ZERO, 0x9D005C28
9D005960  00002025   OR A0, ZERO, ZERO
9D005964  04400006   BLTZ V0, 0x9D005980
9D005968  44E00000   MTHC1 ZERO, F0
9D00596C  00023080   SLL A2, V0, 2
9D005970  01063021   ADDU A2, T0, A2
9D005974  8CC60000   LW A2, 0(A2)
9D005978  44860000   MTC1 A2, F0
9D00597C  46800021   CVT.D.W F0, F0
9D005980  F4600000   SDC1 F0, 0(V1)
9D005984  24420001   ADDIU V0, V0, 1
9D005988  1000FF6C   BEQ ZERO, ZERO, 0x9D00573C
9D00598C  24630008   ADDIU V1, V1, 8
9D005990  8FA402B0   LW A0, 688(SP)
9D005994  000650C0   SLL T2, A2, 3
9D005998  D5010000   LDC1 F1, 0(T0)
9D00599C  4D440081   LDXC1 F2, 4(T2)
9D0059A0  24C60001   ADDIU A2, A2, 1
9D0059A4  4C011021   MADD.D F0, F0, F2, F1
9D0059A8  0126502A   SLT T2, T1, A2
9D0059AC  1140FFF8   BEQ T2, ZERO, 0x9D005990
9D0059B0  2508FFF8   ADDIU T0, T0, -8
9D0059B4  000330C0   SLL A2, V1, 3
9D0059B8  4CCB0009   SDXC1 F0, 11(A2)
9D0059BC  24630001   ADDIU V1, V1, 1
9D0059C0  1000FF67   BEQ ZERO, ZERO, 0x9D005760
9D0059C4  24420008   ADDIU V0, V0, 8
9D0059C8  00404025   OR T0, V0, ZERO
9D0059CC  44E00000   MTHC1 ZERO, F0
9D0059D0  1000FFF5   BEQ ZERO, ZERO, 0x9D0059A8
9D0059D4  00003025   OR A2, ZERO, ZERO
9D0059D8  24C6FFFF   ADDIU A2, A2, -1
9D0059DC  000618C0   SLL V1, A2, 3
9D0059E0  254A0004   ADDIU T2, T2, 4
9D0059E4  4620000D   TRUNC.W.D F0, F0
9D0059E8  46800021   CVT.D.W F0, F0
9D0059EC  46360082   MUL.D F2, F0, F22
9D0059F0  46226301   SUB.D F12, F12, F2
9D0059F4  4620604D   TRUNC.W.D F1, F12
9D0059F8  4C730301   LDXC1 F12, 19(V1)
9D0059FC  E541FFFC   SWC1 F1, -4(T2)
9D005A00  1000FF6F   BEQ ZERO, ZERO, 0x9D0057C0
9D005A04  462C0300   ADD.D F12, F0, F12
9D005A08  16E00007   BNE S7, ZERO, 0x9D005A28
9D005A0C  3C039D01   LUI V1, -25343
9D005A10  27C3FFFF   ADDIU V1, FP, -1
9D005A14  00031880   SLL V1, V1, 2
9D005A18  02631821   ADDU V1, S3, V1
9D005A1C  8C7601E0   LW S6, 480(V1)
9D005A20  1000FF89   BEQ ZERO, ZERO, 0x9D005848
9D005A24  0016B5C3   SRA S6, S6, 23
9D005A28  D4601948   LDC1 F0, 6472(V1)
9D005A2C  463C003E   C.LE.D F0, F28
9D005A30  4500FFA4   BC1F 0x9D0058C4
9D005A34  0000B025   OR S6, ZERO, ZERO
9D005A38  1000FF85   BEQ ZERO, ZERO, 0x9D005850
9D005A3C  24160002   ADDIU S6, ZERO, 2
9D005A40  14C0000A   BNE A2, ZERO, 0x9D005A6C
9D005A44  8D030000   LW V1, 0(T0)
9D005A48  50600005   BEQL V1, ZERO, 0x9D005A60
9D005A4C  254A0001   ADDIU T2, T2, 1
9D005A50  01831823   SUBU V1, T4, V1
9D005A54  AD030000   SW V1, 0(T0)
9D005A58  24030001   ADDIU V1, ZERO, 1
9D005A5C  254A0001   ADDIU T2, T2, 1
9D005A60  25080004   ADDIU T0, T0, 4
9D005A64  1000FF80   BEQ ZERO, ZERO, 0x9D005868
9D005A68  00603025   OR A2, V1, ZERO
9D005A6C  01631823   SUBU V1, T3, V1
9D005A70  AD030000   SW V1, 0(T0)
9D005A74  1000FFF9   BEQ ZERO, ZERO, 0x9D005A5C
9D005A78  00C01825   OR V1, A2, ZERO
9D005A7C  27C3FFFF   ADDIU V1, FP, -1
9D005A80  00031880   SLL V1, V1, 2
9D005A84  02631821   ADDU V1, S3, V1
9D005A88  8C6801E0   LW T0, 480(V1)
9D005A8C  7D08B000   EXT T0, T0, 0, 23
9D005A90  1000FF7E   BEQ ZERO, ZERO, 0x9D00588C
9D005A94  AC6801E0   SW T0, 480(V1)
9D005A98  00031880   SLL V1, V1, 2
9D005A9C  02631821   ADDU V1, S3, V1
9D005AA0  8C6801E0   LW T0, 480(V1)
9D005AA4  1000FFFA   BEQ ZERO, ZERO, 0x9D005A90
9D005AA8  7D08A800   EXT T0, T0, 0, 22
9D005AAC  27A201F0   ADDIU V0, SP, 496
9D005AB0  004A5021   ADDU T2, V0, T2
9D005AB4  8D4A0000   LW T2, 0(T2)
9D005AB8  24C6FFFF   ADDIU A2, A2, -1
9D005ABC  1000FF88   BEQ ZERO, ZERO, 0x9D0058E0
9D005AC0  010A4025   OR T0, T0, T2
9D005AC4  2463FFFC   ADDIU V1, V1, -4
9D005AC8  8C660000   LW A2, 0(V1)
9D005ACC  50C0FFFD   BEQL A2, ZERO, 0x9D005AC4
9D005AD0  25080001   ADDIU T0, T0, 1
9D005AD4  03C71821   ADDU V1, FP, A3
9D005AD8  000318C0   SLL V1, V1, 3
9D005ADC  27A20150   ADDIU V0, SP, 336
9D005AE0  3C0A9D01   LUI T2, -25343
9D005AE4  27C60001   ADDIU A2, FP, 1
9D005AE8  00431821   ADDU V1, V0, V1
9D005AEC  03C8F021   ADDU FP, FP, T0
9D005AF0  254AC958   ADDIU T2, T2, -13992
9D005AF4  03C6402A   SLT T0, FP, A2
9D005AF8  1500FF2B   BNE T0, ZERO, 0x9D0057A8
9D005AFC  02864021   ADDU T0, S4, A2
9D005B00  00084080   SLL T0, T0, 2
9D005B04  01484021   ADDU T0, T2, T0
9D005B08  8D080000   LW T0, 0(T0)
9D005B0C  00605825   OR T3, V1, ZERO
9D005B10  44880000   MTC1 T0, F0
9D005B14  00004025   OR T0, ZERO, ZERO
9D005B18  46800021   CVT.D.W F0, F0
9D005B1C  F4600000   SDC1 F0, 0(V1)
9D005B20  44800000   MTC1 ZERO, F0
9D005B24  44E00000   MTHC1 ZERO, F0
9D005B28  0128602A   SLT T4, T1, T0
9D005B2C  11800008   BEQ T4, ZERO, 0x9D005B50
9D005B30  8FA202B0   LW V0, 688(SP)
9D005B34  000640C0   SLL T0, A2, 3
9D005B38  4D130009   SDXC1 F0, 19(T0)
9D005B3C  24C60001   ADDIU A2, A2, 1
9D005B40  1000FFEC   BEQ ZERO, ZERO, 0x9D005AF4
9D005B44  24630008   ADDIU V1, V1, 8
9D005B48  1000FFDE   BEQ ZERO, ZERO, 0x9D005AC4
9D005B4C  24080001   ADDIU T0, ZERO, 1
9D005B50  000860C0   SLL T4, T0, 3
9D005B54  D5610000   LDC1 F1, 0(T3)
9D005B58  4D820081   LDXC1 F2, 2(T4)
9D005B5C  25080001   ADDIU T0, T0, 1
9D005B60  256BFFF8   ADDIU T3, T3, -8
9D005B64  1000FFF0   BEQ ZERO, ZERO, 0x9D005B28
9D005B68  4C011021   MADD.D F0, F0, F2, F1
9D005B6C  1000FF61   BEQ ZERO, ZERO, 0x9D0058F4
9D005B70  2463FFFF   ADDIU V1, V1, -1
9D005B74  4620E306   MOV.D F12, F28
9D005B78  0F404096   JAL scalbn
9D005B7C  00173023   SUBU A2, ZERO, S7
9D005B80  3C039D01   LUI V1, -25343
9D005B84  D4641930   LDC1 F4, 6448(V1)
9D005B88  4620223E   C.LE.D 2, F4, F0
9D005B8C  45080011   BC1F 2, 0x9D005BD4
9D005B90  001E1880   SLL V1, FP, 2
9D005B94  3C049D01   LUI A0, -25343
9D005B98  D4821928   LDC1 F2, 6440(A0)
9D005B9C  02632021   ADDU A0, S3, V1
9D005BA0  27C30001   ADDIU V1, FP, 1
9D005BA4  46220082   MUL.D F2, F0, F2
9D005BA8  26F70018   ADDIU S7, S7, 24
9D005BAC  4620104D   TRUNC.W.D F1, F2
9D005BB0  468008A1   CVT.D.W F2, F1
9D005BB4  46241082   MUL.D F2, F2, F4
9D005BB8  46220001   SUB.D F0, F0, F2
9D005BBC  4620000D   TRUNC.W.D F0, F0
9D005BC0  E48001E0   SWC1 F0, 480(A0)
9D005BC4  00032080   SLL A0, V1, 2
9D005BC8  02642021   ADDU A0, S3, A0
9D005BCC  1000FF4F   BEQ ZERO, ZERO, 0x9D00590C
9D005BD0  E48101E0   SWC1 F1, 480(A0)
9D005BD4  02632021   ADDU A0, S3, V1
9D005BD8  4620000D   TRUNC.W.D F0, F0
9D005BDC  E48001E0   SWC1 F0, 480(A0)
9D005BE0  1000FF4A   BEQ ZERO, ZERO, 0x9D00590C
9D005BE4  03C01825   OR V1, FP, ZERO
9D005BE8  27A201F0   ADDIU V0, SP, 496
9D005BEC  00463021   ADDU A2, V0, A2
9D005BF0  8CC60000   LW A2, 0(A2)
9D005BF4  000438C0   SLL A3, A0, 3
9D005BF8  2484FFFF   ADDIU A0, A0, -1
9D005BFC  44860800   MTC1 A2, F1
9D005C00  468008A1   CVT.D.W F2, F1
9D005C04  46201082   MUL.D F2, F2, F0
9D005C08  46240002   MUL.D F0, F0, F4
9D005C0C  1000FF48   BEQ ZERO, ZERO, 0x9D005930
9D005C10  4CF31009   SDXC1 F2, 19(A3)
9D005C14  D4C10000   LDC1 F1, 0(A2)
9D005C18  4D490081   LDXC1 F2, 9(T2)
9D005C1C  24840001   ADDIU A0, A0, 1
9D005C20  24C60008   ADDIU A2, A2, 8
9D005C24  4C011021   MADD.D F0, F0, F2, F1
9D005C28  0224502A   SLT T2, S1, A0
9D005C2C  15400003   BNE T2, ZERO, 0x9D005C3C
9D005C30  0104502A   SLT T2, T0, A0
9D005C34  1140FFF7   BEQ T2, ZERO, 0x9D005C14
9D005C38  000450C0   SLL T2, A0, 3
9D005C3C  000820C0   SLL A0, T0, 3
9D005C40  02642021   ADDU A0, S3, A0
9D005C44  F48000A0   SDC1 F0, 160(A0)
9D005C48  24E7FFFF   ADDIU A3, A3, -1
9D005C4C  1000FF3E   BEQ ZERO, ZERO, 0x9D005948
9D005C50  25080001   ADDIU T0, T0, 1
9D005C54  2A420003   SLTI V0, S2, 3
9D005C58  50400019   BEQL V0, ZERO, 0x9D005CC0
9D005C5C  24020003   ADDIU V0, ZERO, 3
9D005C60  1E40006D   BGTZ S2, 0x9D005E18
9D005C64  00601025   OR V0, V1, ZERO
9D005C68  AFA00240   SW ZERO, 576(SP)
9D005C6C  AFA00244   SW ZERO, 580(SP)
9D005C70  12400035   BEQ S2, ZERO, 0x9D005D48
9D005C74  27A400B0   ADDIU A0, SP, 176
9D005C78  8FBF027C   LW RA, 636(SP)
9D005C7C  32020007   ANDI V0, S0, 7
9D005C80  8FBE0278   LW FP, 632(SP)
9D005C84  8FB70274   LW S7, 628(SP)
9D005C88  8FB60270   LW S6, 624(SP)
9D005C8C  8FB5026C   LW S5, 620(SP)
9D005C90  8FB40268   LW S4, 616(SP)
9D005C94  8FB30264   LW S3, 612(SP)
9D005C98  8FB20260   LW S2, 608(SP)
9D005C9C  8FB1025C   LW S1, 604(SP)
9D005CA0  8FB00258   LW S0, 600(SP)
9D005CA4  D7BC02A0   LDC1 F28, 672(SP)
9D005CA8  D7BA0298   LDC1 F26, 664(SP)
9D005CAC  D7B80290   LDC1 F24, 656(SP)
9D005CB0  D7B60288   LDC1 F22, 648(SP)
9D005CB4  D7B40280   LDC1 F20, 640(SP)
9D005CB8  03E00008   JR RA
9D005CBC  27BD02B0   ADDIU SP, SP, 688
9D005CC0  1642FFED   BNE S2, V0, 0x9D005C78
9D005CC4  27A800B0   ADDIU T0, SP, 176
9D005CC8  000310C0   SLL V0, V1, 3
9D005CCC  01021021   ADDU V0, T0, V0
9D005CD0  00402025   OR A0, V0, ZERO
9D005CD4  00603025   OR A2, V1, ZERO
9D005CD8  1CC0005B   BGTZ A2, 0x9D005E48
9D005CDC  2484FFF8   ADDIU A0, A0, -8
9D005CE0  00602025   OR A0, V1, ZERO
9D005CE4  28860002   SLTI A2, A0, 2
9D005CE8  10C00060   BEQ A2, ZERO, 0x9D005E6C
9D005CEC  2442FFF8   ADDIU V0, V0, -8
9D005CF0  00003025   OR A2, ZERO, ZERO
9D005CF4  00003825   OR A3, ZERO, ZERO
9D005CF8  28620002   SLTI V0, V1, 2
9D005CFC  10400064   BEQ V0, ZERO, 0x9D005E90
9D005D00  000310C0   SLL V0, V1, 3
9D005D04  8FA400B0   LW A0, 176(SP)
9D005D08  8FA500B4   LW A1, 180(SP)
9D005D0C  8FA800B8   LW T0, 184(SP)
9D005D10  8FA900BC   LW T1, 188(SP)
9D005D14  16C00066   BNE S6, ZERO, 0x9D005EB0
9D005D18  AEA40000   SW A0, 0(S5)
9D005D1C  AEA50004   SW A1, 4(S5)
9D005D20  AEA80008   SW T0, 8(S5)
9D005D24  AEA9000C   SW T1, 12(S5)
9D005D28  AEA60010   SW A2, 16(S5)
9D005D2C  1000FFD2   BEQ ZERO, ZERO, 0x9D005C78
9D005D30  AEA70014   SW A3, 20(S5)
9D005D34  D7A10240   LDC1 F1, 576(SP)
9D005D38  4C440001   LDXC1 F0, 4(V0)
9D005D3C  2463FFFF   ADDIU V1, V1, -1
9D005D40  46200800   ADD.D F0, F1, F0
9D005D44  F7A00240   SDC1 F0, 576(SP)
9D005D48  0461FFFA   BGEZ V1, 0x9D005D34
9D005D4C  000310C0   SLL V0, V1, 3
9D005D50  12C0000A   BEQ S6, ZERO, 0x9D005D7C
9D005D54  D7A00240   LDC1 F0, 576(SP)
9D005D58  8FA20240   LW V0, 576(SP)
9D005D5C  8FA30244   LW V1, 580(SP)
9D005D60  AFA20248   SW V0, 584(SP)
9D005D64  3C028000   LUI V0, -32768
9D005D68  00431026   XOR V0, V0, V1
9D005D6C  AFA2024C   SW V0, 588(SP)
9D005D70  D7A00248   LDC1 F0, 584(SP)
9D005D74  F7A00240   SDC1 F0, 576(SP)
9D005D78  D7A00240   LDC1 F0, 576(SP)
9D005D7C  1000FFBE   BEQ ZERO, ZERO, 0x9D005C78
9D005D80  F6A00000   SDC1 F0, 0(S5)
9D005D84  D7A10240   LDC1 F1, 576(SP)
9D005D88  4C860001   LDXC1 F0, 6(A0)
9D005D8C  2442FFFF   ADDIU V0, V0, -1
9D005D90  46200800   ADD.D F0, F1, F0
9D005D94  F7A00240   SDC1 F0, 576(SP)
9D005D98  0441FFFA   BGEZ V0, 0x9D005D84
9D005D9C  000220C0   SLL A0, V0, 3
9D005DA0  8FA60240   LW A2, 576(SP)
9D005DA4  12C00005   BEQ S6, ZERO, 0x9D005DBC
9D005DA8  8FA70244   LW A3, 580(SP)
9D005DAC  8FA40244   LW A0, 580(SP)
9D005DB0  8FA60240   LW A2, 576(SP)
9D005DB4  3C028000   LUI V0, -32768
9D005DB8  00443826   XOR A3, V0, A0
9D005DBC  D7A000B0   LDC1 F0, 176(SP)
9D005DC0  D7A10240   LDC1 F1, 576(SP)
9D005DC4  AEA60000   SW A2, 0(S5)
9D005DC8  AEA70004   SW A3, 4(S5)
9D005DCC  46210001   SUB.D F0, F0, F1
9D005DD0  24020001   ADDIU V0, ZERO, 1
9D005DD4  27A800B0   ADDIU T0, SP, 176
9D005DD8  44060000   MFC1 A2, F0
9D005DDC  44670000   MFHC1 A3, F0
9D005DE0  0062202A   SLT A0, V1, V0
9D005DE4  50800010   BEQL A0, ZERO, 0x9D005E28
9D005DE8  000220C0   SLL A0, V0, 3
9D005DEC  52C00008   BEQL S6, ZERO, 0x9D005E10
9D005DF0  AEA60008   SW A2, 8(S5)
9D005DF4  3C028000   LUI V0, -32768
9D005DF8  00471026   XOR V0, V0, A3
9D005DFC  AFA60240   SW A2, 576(SP)
9D005E00  AFA20244   SW V0, 580(SP)
9D005E04  8FA60240   LW A2, 576(SP)
9D005E08  8FA70244   LW A3, 580(SP)
9D005E0C  AEA60008   SW A2, 8(S5)
9D005E10  1000FF99   BEQ ZERO, ZERO, 0x9D005C78
9D005E14  AEA7000C   SW A3, 12(S5)
9D005E18  AFA00240   SW ZERO, 576(SP)
9D005E1C  AFA00244   SW ZERO, 580(SP)
9D005E20  1000FFDD   BEQ ZERO, ZERO, 0x9D005D98
9D005E24  27A600B0   ADDIU A2, SP, 176
9D005E28  44860800   MTC1 A2, F1
9D005E2C  4C880001   LDXC1 F0, 8(A0)
9D005E30  44E70800   MTHC1 A3, F1
9D005E34  24420001   ADDIU V0, V0, 1
9D005E38  46200800   ADD.D F0, F1, F0
9D005E3C  44060000   MFC1 A2, F0
9D005E40  1000FFE7   BEQ ZERO, ZERO, 0x9D005DE0
9D005E44  44670000   MFHC1 A3, F0
9D005E48  D4800000   LDC1 F0, 0(A0)
9D005E4C  D4810008   LDC1 F1, 8(A0)
9D005E50  24C6FFFF   ADDIU A2, A2, -1
9D005E54  46210080   ADD.D F2, F0, F1
9D005E58  46220001   SUB.D F0, F0, F2
9D005E5C  F4820000   SDC1 F2, 0(A0)
9D005E60  46210000   ADD.D F0, F0, F1
9D005E64  1000FF9C   BEQ ZERO, ZERO, 0x9D005CD8
9D005E68  F4800008   SDC1 F0, 8(A0)
9D005E6C  D4400000   LDC1 F0, 0(V0)
9D005E70  D4410008   LDC1 F1, 8(V0)
9D005E74  2484FFFF   ADDIU A0, A0, -1
9D005E78  46210080   ADD.D F2, F0, F1
9D005E7C  46220001   SUB.D F0, F0, F2
9D005E80  F4420000   SDC1 F2, 0(V0)
9D005E84  46210000   ADD.D F0, F0, F1
9D005E88  1000FF96   BEQ ZERO, ZERO, 0x9D005CE4
9D005E8C  F4400008   SDC1 F0, 8(V0)
9D005E90  44860800   MTC1 A2, F1
9D005E94  4C480001   LDXC1 F0, 8(V0)
9D005E98  44E70800   MTHC1 A3, F1
9D005E9C  2463FFFF   ADDIU V1, V1, -1
9D005EA0  46200800   ADD.D F0, F1, F0
9D005EA4  44060000   MFC1 A2, F0
9D005EA8  1000FF93   BEQ ZERO, ZERO, 0x9D005CF8
9D005EAC  44670000   MFHC1 A3, F0
9D005EB0  3C028000   LUI V0, -32768
9D005EB4  00451826   XOR V1, V0, A1
9D005EB8  AEA30004   SW V1, 4(S5)
9D005EBC  00491826   XOR V1, V0, T1
9D005EC0  00471026   XOR V0, V0, A3
9D005EC4  AEA80008   SW T0, 8(S5)
9D005EC8  AEA3000C   SW V1, 12(S5)
9D005ECC  AEA60010   SW A2, 16(S5)
9D005ED0  1000FF69   BEQ ZERO, ZERO, 0x9D005C78
9D005ED4  AEA20014   SW V0, 20(S5)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/math/__rem_pio2.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D008618  27BDFFB0   ADDIU SP, SP, -80
9D00861C  F7AC0050   SDC1 F12, 80(SP)
9D008620  8FA20054   LW V0, 84(SP)
9D008624  3C03400F   LUI V1, 16399
9D008628  24636A7B   ADDIU V1, V1, 27259
9D00862C  7C45F000   EXT A1, V0, 0, 31
9D008630  00A3182B   SLTU V1, A1, V1
9D008634  AFB10048   SW S1, 72(SP)
9D008638  AFBF004C   SW RA, 76(SP)
9D00863C  AFB00044   SW S0, 68(SP)
9D008640  8FA70050   LW A3, 80(SP)
9D008644  1060003B   BEQ V1, ZERO, 0x9D008734
9D008648  00028FC2   SRL S1, V0, 31
9D00864C  3C030009   LUI V1, 9
9D008650  7C429800   EXT V0, V0, 0, 20
9D008654  246321FB   ADDIU V1, V1, 8699
9D008658  1043007B   BEQ V0, V1, 0x9D008848
9D00865C  3C024002   LUI V0, 16386
9D008660  3442D97D   ORI V0, V0, -9859
9D008664  00A2282B   SLTU A1, A1, V0
9D008668  10A0001C   BEQ A1, ZERO, 0x9D0086DC
9D00866C  3C039D01   LUI V1, -25343
9D008670  3C039D01   LUI V1, -25343
9D008674  3C029D01   LUI V0, -25343
9D008678  1620000E   BNE S1, ZERO, 0x9D0086B4
9D00867C  D4600888   LDC1 F0, 2184(V1)
9D008680  46206001   SUB.D F0, F12, F0
9D008684  D4420890   LDC1 F2, 2192(V0)
9D008688  24020001   ADDIU V0, ZERO, 1
9D00868C  46220101   SUB.D F4, F0, F2
9D008690  46240001   SUB.D F0, F0, F4
9D008694  F4C40000   SDC1 F4, 0(A2)
9D008698  46220001   SUB.D F0, F0, F2
9D00869C  F4C00008   SDC1 F0, 8(A2)
9D0086A0  8FBF004C   LW RA, 76(SP)
9D0086A4  8FB10048   LW S1, 72(SP)
9D0086A8  8FB00044   LW S0, 68(SP)
9D0086AC  03E00008   JR RA
9D0086B0  27BD0050   ADDIU SP, SP, 80
9D0086B4  D7A10050   LDC1 F1, 80(SP)
9D0086B8  D4420890   LDC1 F2, 2192(V0)
9D0086BC  2402FFFF   ADDIU V0, ZERO, -1
9D0086C0  46200800   ADD.D F0, F1, F0
9D0086C4  46220100   ADD.D F4, F0, F2
9D0086C8  46240001   SUB.D F0, F0, F4
9D0086CC  F4C40000   SDC1 F4, 0(A2)
9D0086D0  46220000   ADD.D F0, F0, F2
9D0086D4  1000FFF2   BEQ ZERO, ZERO, 0x9D0086A0
9D0086D8  F4C00008   SDC1 F0, 8(A2)
9D0086DC  3C029D01   LUI V0, -25343
9D0086E0  D4600898   LDC1 F0, 2200(V1)
9D0086E4  1620000A   BNE S1, ZERO, 0x9D008710
9D0086E8  D7A10050   LDC1 F1, 80(SP)
9D0086EC  46200801   SUB.D F0, F1, F0
9D0086F0  D44208A0   LDC1 F2, 2208(V0)
9D0086F4  24020002   ADDIU V0, ZERO, 2
9D0086F8  46220101   SUB.D F4, F0, F2
9D0086FC  46240001   SUB.D F0, F0, F4
9D008700  F4C40000   SDC1 F4, 0(A2)
9D008704  46220001   SUB.D F0, F0, F2
9D008708  1000FFE5   BEQ ZERO, ZERO, 0x9D0086A0
9D00870C  F4C00008   SDC1 F0, 8(A2)
9D008710  46200800   ADD.D F0, F1, F0
9D008714  D44208A0   LDC1 F2, 2208(V0)
9D008718  2402FFFE   ADDIU V0, ZERO, -2
9D00871C  46220100   ADD.D F4, F0, F2
9D008720  46240001   SUB.D F0, F0, F4
9D008724  F4C40000   SDC1 F4, 0(A2)
9D008728  46220000   ADD.D F0, F0, F2
9D00872C  1000FFDC   BEQ ZERO, ZERO, 0x9D0086A0
9D008730  F4C00008   SDC1 F0, 8(A2)
9D008734  3C03401C   LUI V1, 16412
9D008738  2463463C   ADDIU V1, V1, 17980
9D00873C  00A3182B   SLTU V1, A1, V1
9D008740  5060003D   BEQL V1, ZERO, 0x9D008838
9D008744  3C034139   LUI V1, 16697
9D008748  3C024015   LUI V0, 16405
9D00874C  3442FDBD   ORI V0, V0, -579
9D008750  00A2102B   SLTU V0, A1, V0
9D008754  1040001F   BEQ V0, ZERO, 0x9D0087D4
9D008758  3C024019   LUI V0, 16409
9D00875C  3C024012   LUI V0, 16402
9D008760  3442D97C   ORI V0, V0, -9860
9D008764  10A20038   BEQ A1, V0, 0x9D008848
9D008768  3C029D01   LUI V0, -25343
9D00876C  D4400890   LDC1 F0, 2192(V0)
9D008770  3C029D01   LUI V0, -25343
9D008774  D44408A8   LDC1 F4, 2216(V0)
9D008778  3C029D01   LUI V0, -25343
9D00877C  1620000B   BNE S1, ZERO, 0x9D0087AC
9D008780  46240102   MUL.D F4, F0, F4
9D008784  D44208B0   LDC1 F2, 2224(V0)
9D008788  D7A00050   LDC1 F0, 80(SP)
9D00878C  24020003   ADDIU V0, ZERO, 3
9D008790  46220081   SUB.D F2, F0, F2
9D008794  46241001   SUB.D F0, F2, F4
9D008798  46201081   SUB.D F2, F2, F0
9D00879C  F4C00000   SDC1 F0, 0(A2)
9D0087A0  46241081   SUB.D F2, F2, F4
9D0087A4  1000FFBE   BEQ ZERO, ZERO, 0x9D0086A0
9D0087A8  F4C20008   SDC1 F2, 8(A2)
9D0087AC  D44008B0   LDC1 F0, 2224(V0)
9D0087B0  D7A10050   LDC1 F1, 80(SP)
9D0087B4  2402FFFD   ADDIU V0, ZERO, -3
9D0087B8  46200800   ADD.D F0, F1, F0
9D0087BC  46202080   ADD.D F2, F4, F0
9D0087C0  46220001   SUB.D F0, F0, F2
9D0087C4  F4C20000   SDC1 F2, 0(A2)
9D0087C8  46240000   ADD.D F0, F0, F4
9D0087CC  1000FFB4   BEQ ZERO, ZERO, 0x9D0086A0
9D0087D0  F4C00008   SDC1 F0, 8(A2)
9D0087D4  244221FB   ADDIU V0, V0, 8699
9D0087D8  10A2001B   BEQ A1, V0, 0x9D008848
9D0087DC  3C039D01   LUI V1, -25343
9D0087E0  3C029D01   LUI V0, -25343
9D0087E4  D46008B8   LDC1 F0, 2232(V1)
9D0087E8  1620000A   BNE S1, ZERO, 0x9D008814
9D0087EC  D7A10050   LDC1 F1, 80(SP)
9D0087F0  46200801   SUB.D F0, F1, F0
9D0087F4  D44208C0   LDC1 F2, 2240(V0)
9D0087F8  24020004   ADDIU V0, ZERO, 4
9D0087FC  46220101   SUB.D F4, F0, F2
9D008800  46240001   SUB.D F0, F0, F4
9D008804  F4C40000   SDC1 F4, 0(A2)
9D008808  46220001   SUB.D F0, F0, F2
9D00880C  1000FFA4   BEQ ZERO, ZERO, 0x9D0086A0
9D008810  F4C00008   SDC1 F0, 8(A2)
9D008814  46200800   ADD.D F0, F1, F0
9D008818  D44208C0   LDC1 F2, 2240(V0)
9D00881C  2402FFFC   ADDIU V0, ZERO, -4
9D008820  46220100   ADD.D F4, F0, F2
9D008824  46240001   SUB.D F0, F0, F4
9D008828  F4C40000   SDC1 F4, 0(A2)
9D00882C  46220000   ADD.D F0, F0, F2
9D008830  1000FF9B   BEQ ZERO, ZERO, 0x9D0086A0
9D008834  F4C00008   SDC1 F0, 8(A2)
9D008838  246321FB   ADDIU V1, V1, 8699
9D00883C  00A3182B   SLTU V1, A1, V1
9D008840  10600040   BEQ V1, ZERO, 0x9D008944
9D008844  3C037FF0   LUI V1, 32752
9D008848  3C029D01   LUI V0, -25343
9D00884C  D44008D0   LDC1 F0, 2256(V0)
9D008850  3C029D01   LUI V0, -25343
9D008854  D7A10050   LDC1 F1, 80(SP)
9D008858  D44408C8   LDC1 F4, 2248(V0)
9D00885C  3C039D01   LUI V1, -25343
9D008860  00052D02   SRL A1, A1, 20
9D008864  4C040921   MADD.D F4, F0, F1, F4
9D008868  46202101   SUB.D F4, F4, F0
9D00886C  4620200D   TRUNC.W.D F0, F4
9D008870  44020000   MFC1 V0, F0
9D008874  D4600888   LDC1 F0, 2184(V1)
9D008878  3C039D01   LUI V1, -25343
9D00887C  D4620890   LDC1 F2, 2192(V1)
9D008880  46202002   MUL.D F0, F4, F0
9D008884  46222082   MUL.D F2, F4, F2
9D008888  46200801   SUB.D F0, F1, F0
9D00888C  46220041   SUB.D F1, F0, F2
9D008890  44690800   MFHC1 T1, F1
9D008894  7D235500   EXT V1, T1, 20, 11
9D008898  00A31823   SUBU V1, A1, V1
9D00889C  28630011   SLTI V1, V1, 17
9D0088A0  10600008   BEQ V1, ZERO, 0x9D0088C4
9D0088A4  44080800   MFC1 T0, F1
9D0088A8  ACC80000   SW T0, 0(A2)
9D0088AC  ACC90004   SW T1, 4(A2)
9D0088B0  D4C10000   LDC1 F1, 0(A2)
9D0088B4  46210001   SUB.D F0, F0, F1
9D0088B8  46220001   SUB.D F0, F0, F2
9D0088BC  1000FF78   BEQ ZERO, ZERO, 0x9D0086A0
9D0088C0  F4C00008   SDC1 F0, 8(A2)
9D0088C4  3C039D01   LUI V1, -25343
9D0088C8  D46208D8   LDC1 F2, 2264(V1)
9D0088CC  3C039D01   LUI V1, -25343
9D0088D0  46222082   MUL.D F2, F4, F2
9D0088D4  46220181   SUB.D F6, F0, F2
9D0088D8  46260001   SUB.D F0, F0, F6
9D0088DC  46220081   SUB.D F2, F0, F2
9D0088E0  D46008E0   LDC1 F0, 2272(V1)
9D0088E4  4C4020A9   MSUB.D F2, F2, F4, F0
9D0088E8  46223001   SUB.D F0, F6, F2
9D0088EC  44690000   MFHC1 T1, F0
9D0088F0  7D235500   EXT V1, T1, 20, 11
9D0088F4  00A32823   SUBU A1, A1, V1
9D0088F8  28A50032   SLTI A1, A1, 50
9D0088FC  10A00005   BEQ A1, ZERO, 0x9D008914
9D008900  44080000   MFC1 T0, F0
9D008904  ACC80000   SW T0, 0(A2)
9D008908  ACC90004   SW T1, 4(A2)
9D00890C  1000FFE8   BEQ ZERO, ZERO, 0x9D0088B0
9D008910  46203006   MOV.D F0, F6
9D008914  3C039D01   LUI V1, -25343
9D008918  D46208E8   LDC1 F2, 2280(V1)
9D00891C  3C039D01   LUI V1, -25343
9D008920  46222082   MUL.D F2, F4, F2
9D008924  46223001   SUB.D F0, F6, F2
9D008928  46203181   SUB.D F6, F6, F0
9D00892C  46223181   SUB.D F6, F6, F2
9D008930  D46208F0   LDC1 F2, 2288(V1)
9D008934  4CC220A9   MSUB.D F2, F6, F4, F2
9D008938  46220101   SUB.D F4, F0, F2
9D00893C  1000FFDC   BEQ ZERO, ZERO, 0x9D0088B0
9D008940  F4C40000   SDC1 F4, 0(A2)
9D008944  00A3182B   SLTU V1, A1, V1
9D008948  14600007   BNE V1, ZERO, 0x9D008968
9D00894C  7C449800   EXT A0, V0, 0, 20
9D008950  D7A00050   LDC1 F0, 80(SP)
9D008954  00001025   OR V0, ZERO, ZERO
9D008958  46200001   SUB.D F0, F0, F0
9D00895C  F4C00008   SDC1 F0, 8(A2)
9D008960  1000FF4F   BEQ ZERO, ZERO, 0x9D0086A0
9D008964  F4C00000   SDC1 F0, 0(A2)
9D008968  00E01025   OR V0, A3, ZERO
9D00896C  44821000   MTC1 V0, F2
9D008970  3C074160   LUI A3, 16736
9D008974  00E41825   OR V1, A3, A0
9D008978  44E31000   MTHC1 V1, F2
9D00897C  3C029D01   LUI V0, -25343
9D008980  4620100D   TRUNC.W.D F0, F2
9D008984  46800021   CVT.D.W F0, F0
9D008988  F7A00018   SDC1 F0, 24(SP)
9D00898C  46201001   SUB.D F0, F2, F0
9D008990  D44408F8   LDC1 F4, 2296(V0)
9D008994  27A20018   ADDIU V0, SP, 24
9D008998  24070002   ADDIU A3, ZERO, 2
9D00899C  46240002   MUL.D F0, F0, F4
9D0089A0  00402025   OR A0, V0, ZERO
9D0089A4  4620004D   TRUNC.W.D F1, F0
9D0089A8  468008A1   CVT.D.W F2, F1
9D0089AC  46220001   SUB.D F0, F0, F2
9D0089B0  F7A20020   SDC1 F2, 32(SP)
9D0089B4  46240002   MUL.D F0, F0, F4
9D0089B8  F7A00028   SDC1 F0, 40(SP)
9D0089BC  44800000   MTC1 ZERO, F0
9D0089C0  44E00000   MTHC1 ZERO, F0
9D0089C4  2442FFF8   ADDIU V0, V0, -8
9D0089C8  D4410018   LDC1 F1, 24(V0)
9D0089CC  46200832   C.EQ.D F1, F0
9D0089D0  4503FFFC   BC1TL 0x9D0089C4
9D0089D4  24E7FFFF   ADDIU A3, A3, -1
9D0089D8  00C08025   OR S0, A2, ZERO
9D0089DC  24020001   ADDIU V0, ZERO, 1
9D0089E0  00053502   SRL A2, A1, 20
9D0089E4  AFA20010   SW V0, 16(SP)
9D0089E8  24E70001   ADDIU A3, A3, 1
9D0089EC  24C6FBEA   ADDIU A2, A2, -1046
9D0089F0  0F4015A4   JAL __rem_pio2_large
9D0089F4  27A50030   ADDIU A1, SP, 48
9D0089F8  1220000E   BEQ S1, ZERO, 0x9D008A34
9D0089FC  D7A00030   LDC1 F0, 48(SP)
9D008A00  8FA30030   LW V1, 48(SP)
9D008A04  8FA40034   LW A0, 52(SP)
9D008A08  3C058000   LUI A1, -32768
9D008A0C  AE030000   SW V1, 0(S0)
9D008A10  8FA30038   LW V1, 56(SP)
9D008A14  00852026   XOR A0, A0, A1
9D008A18  AE040004   SW A0, 4(S0)
9D008A1C  AE030008   SW V1, 8(S0)
9D008A20  8FA3003C   LW V1, 60(SP)
9D008A24  00021023   SUBU V0, ZERO, V0
9D008A28  00651826   XOR V1, V1, A1
9D008A2C  1000FF1C   BEQ ZERO, ZERO, 0x9D0086A0
9D008A30  AE03000C   SW V1, 12(S0)
9D008A34  F6000000   SDC1 F0, 0(S0)
9D008A38  D7A00038   LDC1 F0, 56(SP)
9D008A3C  1000FF18   BEQ ZERO, ZERO, 0x9D0086A0
9D008A40  F6000008   SDC1 F0, 8(S0)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/math/__cos.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D010480  462C6482   MUL.D F18, F12, F12
9D010484  3C029D01   LUI V0, -25343
9D010488  D44A14A8   LDC1 F10, 5288(V0)
9D01048C  3C029D01   LUI V0, -25343
9D010490  D45014B0   LDC1 F16, 5296(V0)
9D010494  3C029D01   LUI V0, -25343
9D010498  D44414B8   LDC1 F4, 5304(V0)
9D01049C  3C029D01   LUI V0, -25343
9D0104A0  D44214C0   LDC1 F2, 5312(V0)
9D0104A4  3C029D01   LUI V0, -25343
9D0104A8  46329202   MUL.D F8, F18, F18
9D0104AC  4C449121   MADD.D F4, F2, F18, F4
9D0104B0  D44214C8   LDC1 F2, 5320(V0)
9D0104B4  3C029D01   LUI V0, -25343
9D0104B8  D44614D0   LDC1 F6, 5328(V0)
9D0104BC  3C029D01   LUI V0, -25343
9D0104C0  462A9282   MUL.D F10, F18, F10
9D0104C4  462E6382   MUL.D F14, F12, F14
9D0104C8  46284202   MUL.D F8, F8, F8
9D0104CC  4C522129   MSUB.D F4, F2, F4, F18
9D0104D0  D44214D8   LDC1 F2, 5336(V0)
9D0104D4  3C029D01   LUI V0, -25343
9D0104D8  4C4691A9   MSUB.D F6, F2, F18, F6
9D0104DC  D44214E0   LDC1 F2, 5344(V0)
9D0104E0  462A8001   SUB.D F0, F16, F10
9D0104E4  4C5231A1   MADD.D F6, F2, F6, F18
9D0104E8  46323182   MUL.D F6, F6, F18
9D0104EC  4CC820A1   MADD.D F2, F6, F4, F8
9D0104F0  4DD210A9   MSUB.D F2, F14, F2, F18
9D0104F4  46208381   SUB.D F14, F16, F0
9D0104F8  462A7381   SUB.D F14, F14, F10
9D0104FC  462E1080   ADD.D F2, F2, F14
9D010500  03E00008   JR RA
9D010504  46201000   ADD.D F0, F2, F0
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/malloc/pic32m/expand_heap.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D0115A0  8C840000   LW A0, 0(A0)
9D0115A4  04810003   BGEZ A0, __expand_heap
9D0115A8  00001025   OR V0, ZERO, ZERO
9D0115AC  03E00008   JR RA
9D0115B0  00000000   NOP
9D0115B4  27BDFFE8   ADDIU SP, SP, -24
9D0115B8  AFBF0014   SW RA, 20(SP)
9D0115BC  0F403D8F   JAL _sbrk
9D0115C0  00000000   NOP
9D0115C4  2403FFFF   ADDIU V1, ZERO, -1
9D0115C8  50430001   BEQL V0, V1, __expand_heap
9D0115CC  00001025   OR V0, ZERO, ZERO
9D0115D0  8FBF0014   LW RA, 20(SP)
9D0115D4  03E00008   JR RA
9D0115D8  27BD0018   ADDIU SP, SP, 24
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/malloc/mchp/malloc.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
0000000C  00000000   NOP
00000014  00000000   NOP
0000001C  00000000   NOP
00000020  00000000   NOP
00000024  00000000   NOP
00000028  00000000   NOP
0000002C  00000000   NOP
00000030  00000000   NOP
00000040  00000000   NOP
00000048  00000000   NOP
00000054  00000000   NOP
00000058  00000000   NOP
00000060  00000000   NOP
00000068  00000000   NOP
0000006C  00000000   NOP
00000070  00000000   NOP
00000074  00000000   NOP
00000078  00000000   NOP
00000084  00000000   NOP
0000008C  00000000   NOP
00000098  00000000   NOP
000000A0  00000000   NOP
000000A8  00000000   NOP
000000B0  00000000   NOP
000000B4  00000000   NOP
000000B8  00000000   NOP
000000BC  00000000   NOP
000000C0  00000000   NOP
000000C4  00000000   NOP
000000C8  00000000   NOP
000000D0  00000000   NOP
000000D8  00000000   NOP
000000E0  00000000   NOP
000000E8  00000000   NOP
000000F0  00000000   NOP
00000100  00000000   NOP
00000108  00000000   NOP
00000110  00000000   NOP
9D000190  8C860004   LW A2, 4(A0)
9D000194  30C20001   ANDI V0, A2, 1
9D000198  10400008   BEQ V0, ZERO, alloc_fwd
9D00019C  00803825   OR A3, A0, ZERO
9D0001A0  03E00008   JR RA
9D0001A4  00001025   OR V0, ZERO, ZERO
9D0001A8  30C20001   ANDI V0, A2, 1
9D0001AC  10400005   BEQ V0, ZERO, alloc_fwd
9D0001B0  00001025   OR V0, ZERO, ZERO
9D0001B4  10000010   BEQ ZERO, ZERO, alloc_fwd
9D0001B8  8FBF0014   LW RA, 20(SP)
9D0001BC  27BDFFE8   ADDIU SP, SP, -24
9D0001C0  AFBF0014   SW RA, 20(SP)
9D0001C4  0F4042FF   JAL bin_index
9D0001C8  00C02025   OR A0, A2, ZERO
9D0001CC  00402025   OR A0, V0, ZERO
9D0001D0  0F4045E8   JAL lock_bin
9D0001D4  00404025   OR T0, V0, ZERO
9D0001D8  8CE20004   LW V0, 4(A3)
9D0001DC  5446FFF2   BNEL V0, A2, alloc_fwd
9D0001E0  8CE60004   LW A2, 4(A3)
9D0001E4  01002825   OR A1, T0, ZERO
9D0001E8  0F403DE6   JAL unbin
9D0001EC  00E02025   OR A0, A3, ZERO
9D0001F0  24020001   ADDIU V0, ZERO, 1
9D0001F4  8FBF0014   LW RA, 20(SP)
9D0001F8  03E00008   JR RA
9D0001FC  27BD0018   ADDIU SP, SP, 24
9D00A28C  27BDFFD8   ADDIU SP, SP, -40
9D00A290  AFA40028   SW A0, 40(SP)
9D00A294  27A40028   ADDIU A0, SP, 40
9D00A298  AFBF0024   SW RA, 36(SP)
9D00A29C  AFB10020   SW S1, 32(SP)
9D00A2A0  0F4043E8   JAL adjust_size
9D00A2A4  AFB0001C   SW S0, 28(SP)
9D00A2A8  04410007   BGEZ V0, malloc::bin_index_up
9D00A2AC  8FA20028   LW V0, 40(SP)
9D00A2B0  00001025   OR V0, ZERO, ZERO
9D00A2B4  8FBF0024   LW RA, 36(SP)
9D00A2B8  8FB10020   LW S1, 32(SP)
9D00A2BC  8FB0001C   LW S0, 28(SP)
9D00A2C0  03E00008   JR RA
9D00A2C4  27BD0028   ADDIU SP, SP, 40
9D00A2C8  00021102   SRL V0, V0, 4
9D00A2CC  2451FFFF   ADDIU S1, V0, -1
9D00A2D0  2E230021   SLTIU V1, S1, 33
9D00A2D4  14600009   BNE V1, ZERO, 0x9D00A2FC
9D00A2D8  2442FFFE   ADDIU V0, V0, -2
9D00A2DC  3C039D01   LUI V1, -25343
9D00A2E0  2C440200   SLTIU A0, V0, 512
9D00A2E4  10800023   BEQ A0, ZERO, malloc::bin_index_up
9D00A2E8  24630DA0   ADDIU V1, V1, 3488
9D00A2EC  000210C2   SRL V0, V0, 3
9D00A2F0  00621021   ADDU V0, V1, V0
9D00A2F4  9051FFFC   LBU S1, -4(V0)
9D00A2F8  26310001   ADDIU S1, S1, 1
9D00A2FC  02203025   OR A2, S1, ZERO
9D00A300  24040001   ADDIU A0, ZERO, 1
9D00A304  0F404595   JAL __ashldi3
9D00A308  00002825   OR A1, ZERO, ZERO
9D00A30C  00025823   SUBU T3, ZERO, V0
9D00A310  000B382B   SLTU A3, ZERO, T3
9D00A314  00031823   SUBU V1, ZERO, V1
9D00A318  3C0A8000   LUI T2, -32768
9D00A31C  3C089D01   LUI T0, -25343
9D00A320  00673823   SUBU A3, V1, A3
9D00A324  25080D80   ADDIU T0, T0, 3456
9D00A32C  25493038   ADDIU T1, T2, 12344
9D00A330  8D423038   LW V0, 12344(T2)
9D00A334  8D43303C   LW V1, 12348(T2)
9D00A338  01622824   AND A1, T3, V0
9D00A33C  00E31824   AND V1, A3, V1
9D00A340  00A32025   OR A0, A1, V1
9D00A344  14800039   BNE A0, ZERO, first_set
9D00A348  8FA20028   LW V0, 40(SP)
9D00A34C  27A40010   ADDIU A0, SP, 16
9D00A350  24420010   ADDIU V0, V0, 16
9D00A354  0F404568   JAL __expand_heap
9D00A358  AFA20010   SW V0, 16(SP)
9D00A35C  1440000A   BNE V0, ZERO, expand_heap
9D00A360  3C038000   LUI V1, -32768
9D00A364  3C038000   LUI V1, -32768
9D00A368  2404000C   ADDIU A0, ZERO, 12
9D00A36C  1000FFD1   BEQ ZERO, ZERO, 0x9D00A2B4
9D00A370  AC643598   SW A0, 13720(V1)
9D00A374  000211C2   SRL V0, V0, 7
9D00A378  00621021   ADDU V0, V1, V0
9D00A37C  9051FFFC   LBU S1, -4(V0)
9D00A380  1000FFDE   BEQ ZERO, ZERO, 0x9D00A2FC
9D00A384  26310011   ADDIU S1, S1, 17
9D00A388  8C713030   LW S1, 12336(V1)
9D00A38C  10510006   BEQ V0, S1, 0x9D00A3A8
9D00A390  8FA40010   LW A0, 16(SP)
9D00A394  24510010   ADDIU S1, V0, 16
9D00A398  2484FFF0   ADDIU A0, A0, -16
9D00A39C  AFA40010   SW A0, 16(SP)
9D00A3A0  24040001   ADDIU A0, ZERO, 1
9D00A3A4  AC440008   SW A0, 8(V0)
9D00A3A8  8FA20010   LW V0, 16(SP)
9D00A3AC  2630FFF8   ADDIU S0, S1, -8
9D00A3B0  02222021   ADDU A0, S1, V0
9D00A3B4  AC643030   SW A0, 12336(V1)
9D00A3B8  34420001   ORI V0, V0, 1
9D00A3BC  24030001   ADDIU V1, ZERO, 1
9D00A3C0  AC82FFF8   SW V0, -8(A0)
9D00A3C4  AC83FFFC   SW V1, -4(A0)
9D00A3C8  1200FFB9   BEQ S0, ZERO, 0x9D00A2B0
9D00A3CC  AE22FFFC   SW V0, -4(S1)
9D00A3D0  0F40425D   JAL alloc_rev
9D00A3D4  02002025   OR A0, S0, ZERO
9D00A3D8  10400010   BEQ V0, ZERO, 0x9D00A41C
9D00A3DC  8FA50028   LW A1, 40(SP)
9D00A3E0  8E23FFF8   LW V1, -8(S1)
9D00A3E4  2402FFFE   ADDIU V0, ZERO, -2
9D00A3E8  8E25FFFC   LW A1, -4(S1)
9D00A3EC  00431824   AND V1, V0, V1
9D00A3F0  02031823   SUBU V1, S0, V1
9D00A3F4  8C640004   LW A0, 4(V1)
9D00A3F8  00442024   AND A0, V0, A0
9D00A3FC  00852021   ADDU A0, A0, A1
9D00A400  AC640004   SW A0, 4(V1)
9D00A404  8E25FFFC   LW A1, -4(S1)
9D00A408  00451024   AND V0, V0, A1
9D00A40C  02028021   ADDU S0, S0, V0
9D00A410  AE040000   SW A0, 0(S0)
9D00A414  00608025   OR S0, V1, ZERO
9D00A418  8FA50028   LW A1, 40(SP)
9D00A41C  0F4043FE   JAL trim
9D00A420  02002025   OR A0, S0, ZERO
9D00A424  1000FFA3   BEQ ZERO, ZERO, 0x9D00A2B4
9D00A428  26020008   ADDIU V0, S0, 8
9D00A42C  54A00032   BNEL A1, ZERO, first_set
9D00A454  0F4045E8   JAL lock_bin
9D00A45C  24C40001   ADDIU A0, A2, 1
9D00A460  000420C0   SLL A0, A0, 3
9D00A464  00891021   ADDU V0, A0, T1
9D00A468  8C500000   LW S0, 0(V0)
9D00A46C  2484FFF8   ADDIU A0, A0, -8
9D00A470  01242021   ADDU A0, T1, A0
9D00A474  1204FFAE   BEQ S0, A0, 0x9D00A330
9D00A478  28C20028   SLTI V0, A2, 40
9D00A47C  14400025   BNE V0, ZERO, 0x9D00A514
9D00A480  26310002   ADDIU S1, S1, 2
9D00A484  0226882A   SLT S1, S1, A2
9D00A488  56200005   BNEL S1, ZERO, 0x9D00A4A0
9D00A48C  8E070004   LW A3, 4(S0)
9D00A490  2402003F   ADDIU V0, ZERO, 63
9D00A494  14C20020   BNE A2, V0, 0x9D00A518
9D00A498  00C02825   OR A1, A2, ZERO
9D00A49C  8E070004   LW A3, 4(S0)
9D00A4A0  8FA50028   LW A1, 40(SP)
9D00A4A4  7C070004   INS A3, ZERO, 0, 1
9D00A4A8  00E54023   SUBU T0, A3, A1
9D00A4AC  0F4042FF   JAL bin_index
9D00A4B0  01002025   OR A0, T0, ZERO
9D00A4B4  54C20018   BNEL A2, V0, 0x9D00A518
9D00A4B8  00C02825   OR A1, A2, ZERO
9D00A4BC  8E03000C   LW V1, 12(S0)
9D00A4C0  8E040008   LW A0, 8(S0)
9D00A4C4  02051021   ADDU V0, S0, A1
9D00A4C8  AC43000C   SW V1, 12(V0)
9D00A4CC  AC440008   SW A0, 8(V0)
9D00A4D0  AC620008   SW V0, 8(V1)
9D00A4D4  8C430008   LW V1, 8(V0)
9D00A4D8  34A50001   ORI A1, A1, 1
9D00A4DC  02073821   ADDU A3, S0, A3
9D00A4E0  AC62000C   SW V0, 12(V1)
9D00A4E4  AC450000   SW A1, 0(V0)
9D00A4E8  AC480004   SW T0, 4(V0)
9D00A4EC  ACE80000   SW T0, 0(A3)
9D00A4F0  1000FFC9   BEQ ZERO, ZERO, 0x9D00A418
9D00A4F4  AE050004   SW A1, 4(S0)
9D00A514  00C02825   OR A1, A2, ZERO
9D00A518  0F403DE6   JAL unbin
9D00A51C  02002025   OR A0, S0, ZERO
9D00A520  1000FFBE   BEQ ZERO, ZERO, 0x9D00A41C
9D00A524  8FA50028   LW A1, 40(SP)
9D00BEB8  10800064   BEQ A0, ZERO, 0x9D00C04C
9D00BEBC  00000000   NOP
9D00BEC0  8C82FFFC   LW V0, -4(A0)
9D00BEC4  27BDFFD0   ADDIU SP, SP, -48
9D00BEC8  AFB2001C   SW S2, 28(SP)
9D00BECC  00409025   OR S2, V0, ZERO
9D00BED0  AFB00014   SW S0, 20(SP)
9D00BED4  7C120004   INS S2, ZERO, 0, 1
9D00BED8  2490FFF8   ADDIU S0, A0, -8
9D00BEDC  AFB10018   SW S1, 24(SP)
9D00BEE0  02128821   ADDU S1, S0, S2
9D00BEE4  8E230000   LW V1, 0(S1)
9D00BEE8  AFB40024   SW S4, 36(SP)
9D00BEEC  AFBF002C   SW RA, 44(SP)
9D00BEF0  AFB50028   SW S5, 40(SP)
9D00BEF4  AFB30020   SW S3, 32(SP)
9D00BEF8  10430003   BEQ V0, V1, 0x9D00BF08
9D00BEFC  2414FFFE   ADDIU S4, ZERO, -2
9D00BF00  A0000000   SB ZERO, 0(ZERO)
9D00BF08  8E020000   LW V0, 0(S0)
9D00BF0C  8E230004   LW V1, 4(S1)
9D00BF10  00431024   AND V0, V0, V1
9D00BF14  30420001   ANDI V0, V0, 1
9D00BF18  1440000E   BNE V0, ZERO, 0x9D00BF54
9D00BF1C  36420001   ORI V0, S2, 1
9D00BF20  0F40425D   JAL alloc_rev
9D00BF24  02002025   OR A0, S0, ZERO
9D00BF28  54400042   BNEL V0, ZERO, 0x9D00C034
9D00BF2C  8E020000   LW V0, 0(S0)
9D00BF30  0F400064   JAL alloc_fwd
9D00BF34  02202025   OR A0, S1, ZERO
9D00BF38  5040FFF4   BEQL V0, ZERO, 0x9D00BF0C
9D00BF3C  8E020000   LW V0, 0(S0)
9D00BF40  8E220004   LW V0, 4(S1)
9D00BF44  02821024   AND V0, S4, V0
9D00BF48  02429021   ADDU S2, S2, V0
9D00BF4C  1000FFEE   BEQ ZERO, ZERO, 0x9D00BF08
9D00BF50  02228821   ADDU S1, S1, V0
9D00BF54  AE020004   SW V0, 4(S0)
9D00BF58  02402025   OR A0, S2, ZERO
9D00BF5C  0F4042FF   JAL bin_index
9D00BF60  AE220000   SW V0, 0(S1)
9D00BF64  00402025   OR A0, V0, ZERO
9D00BF68  0F4045E8   JAL lock_bin
9D00BF6C  00409825   OR S3, V0, ZERO
9D00BF70  8E020000   LW V0, 0(S0)
9D00BF74  8E230004   LW V1, 4(S1)
9D00BF78  00431024   AND V0, V0, V1
9D00BF7C  30420001   ANDI V0, V0, 1
9D00BF80  1040FFE7   BEQ V0, ZERO, 0x9D00BF20
9D00BF84  3C158000   LUI S5, -32768
9D00BF88  8EA43038   LW A0, 12344(S5)
9D00BF8C  8EA5303C   LW A1, 12348(S5)
9D00BF90  02603025   OR A2, S3, ZERO
9D00BF94  0F404586   JAL __lshrdi3
9D00BF98  26B43038   ADDIU S4, S5, 12344
9D00BF9C  30420001   ANDI V0, V0, 1
9D00BFA0  54400010   BNEL V0, ZERO, 0x9D00BFE4
9D00BFA4  26730001   ADDIU S3, S3, 1
9D00BFA8  00002825   OR A1, ZERO, ZERO
9D00BFAC  02603025   OR A2, S3, ZERO
9D00BFB0  0F404595   JAL __ashldi3
9D00BFB4  24040001   ADDIU A0, ZERO, 1
9D00BFE0  26730001   ADDIU S3, S3, 1
9D00BFE4  001398C0   SLL S3, S3, 3
9D00BFE8  02939821   ADDU S3, S4, S3
9D00BFEC  2662FFF8   ADDIU V0, S3, -8
9D00BFF0  AE120004   SW S2, 4(S0)
9D00BFF4  AE320000   SW S2, 0(S1)
9D00BFF8  AE020008   SW V0, 8(S0)
9D00BFFC  8E620004   LW V0, 4(S3)
9D00C000  8FBF002C   LW RA, 44(SP)
9D00C004  8FB50028   LW S5, 40(SP)
9D00C008  AE02000C   SW V0, 12(S0)
9D00C00C  AE700004   SW S0, 4(S3)
9D00C010  8E02000C   LW V0, 12(S0)
9D00C014  8FB40024   LW S4, 36(SP)
9D00C018  8FB30020   LW S3, 32(SP)
9D00C01C  AC500008   SW S0, 8(V0)
9D00C020  8FB2001C   LW S2, 28(SP)
9D00C024  8FB10018   LW S1, 24(SP)
9D00C028  8FB00014   LW S0, 20(SP)
9D00C02C  03E00008   JR RA
9D00C030  27BD0030   ADDIU SP, SP, 48
9D00C034  02821024   AND V0, S4, V0
9D00C038  02028023   SUBU S0, S0, V0
9D00C03C  8E020004   LW V0, 4(S0)
9D00C040  02821024   AND V0, S4, V0
9D00C044  1000FFBA   BEQ ZERO, ZERO, 0x9D00BF30
9D00C048  02429021   ADDU S2, S2, V0
9D00C04C  03E00008   JR RA
9D00C050  00000000   NOP
9D00F798  27BDFFE0   ADDIU SP, SP, -32
9D00F79C  AFB20018   SW S2, 24(SP)
9D00F7A0  AFB10014   SW S1, 20(SP)
9D00F7A4  8C92000C   LW S2, 12(A0)
9D00F7A8  8C910008   LW S1, 8(A0)
9D00F7AC  AFB00010   SW S0, 16(SP)
9D00F7B0  AFBF001C   SW RA, 28(SP)
9D00F7B4  16510013   BNE S2, S1, unbin
9D00F7B8  00808025   OR S0, A0, ZERO
9D00F7BC  00A03025   OR A2, A1, ZERO
9D00F7C0  24040001   ADDIU A0, ZERO, 1
9D00F7C4  0F404595   JAL __ashldi3
9D00F7C8  00002825   OR A1, ZERO, ZERO
9D00F7CC  00031827   NOR V1, ZERO, V1
9D00F804  8E020004   LW V0, 4(S0)
9D00F808  AE510008   SW S1, 8(S2)
9D00F80C  AE32000C   SW S2, 12(S1)
9D00F810  34430001   ORI V1, V0, 1
9D00F814  7C020004   INS V0, ZERO, 0, 1
9D00F818  AE030004   SW V1, 4(S0)
9D00F81C  02028021   ADDU S0, S0, V0
9D00F820  8E020000   LW V0, 0(S0)
9D00F824  8FBF001C   LW RA, 28(SP)
9D00F828  8FB20018   LW S2, 24(SP)
9D00F82C  34420001   ORI V0, V0, 1
9D00F830  AE020000   SW V0, 0(S0)
9D00F834  8FB10014   LW S1, 20(SP)
9D00F838  8FB00010   LW S0, 16(SP)
9D00F83C  03E00008   JR RA
9D00F840  27BD0020   ADDIU SP, SP, 32
9D010974  8C860000   LW A2, 0(A0)
9D010978  30C20001   ANDI V0, A2, 1
9D01097C  10400008   BEQ V0, ZERO, alloc_rev
9D010980  00803825   OR A3, A0, ZERO
9D010984  03E00008   JR RA
9D010988  00001025   OR V0, ZERO, ZERO
9D01098C  30C20001   ANDI V0, A2, 1
9D010990  10400005   BEQ V0, ZERO, alloc_rev
9D010994  00001025   OR V0, ZERO, ZERO
9D010998  10000011   BEQ ZERO, ZERO, alloc_rev
9D01099C  8FBF0014   LW RA, 20(SP)
9D0109A0  27BDFFE8   ADDIU SP, SP, -24
9D0109A4  AFBF0014   SW RA, 20(SP)
9D0109A8  0F4042FF   JAL bin_index
9D0109AC  00C02025   OR A0, A2, ZERO
9D0109B0  00402025   OR A0, V0, ZERO
9D0109B4  0F4045E8   JAL lock_bin
9D0109B8  00404025   OR T0, V0, ZERO
9D0109BC  8CE40000   LW A0, 0(A3)
9D0109C0  5486FFF2   BNEL A0, A2, alloc_rev
9D0109C4  8CE60000   LW A2, 0(A3)
9D0109C8  7C040004   INS A0, ZERO, 0, 1
9D0109CC  01002825   OR A1, T0, ZERO
9D0109D0  0F403DE6   JAL unbin
9D0109D4  00E42023   SUBU A0, A3, A0
9D0109D8  24020001   ADDIU V0, ZERO, 1
9D0109DC  8FBF0014   LW RA, 20(SP)
9D0109E0  03E00008   JR RA
9D0109E4  27BD0018   ADDIU SP, SP, 24
9D010BFC  00042102   SRL A0, A0, 4
9D010C00  2484FFFF   ADDIU A0, A0, -1
9D010C04  2C820021   SLTIU V0, A0, 33
9D010C08  50400003   BEQL V0, ZERO, bin_index
9D010C0C  2C820200   SLTIU V0, A0, 512
9D010C10  03E00008   JR RA
9D010C14  00801025   OR V0, A0, ZERO
9D010C18  10400007   BEQ V0, ZERO, bin_index
9D010C1C  2C831C01   SLTIU V1, A0, 7169
9D010C20  3C029D01   LUI V0, -25343
9D010C24  24420DA0   ADDIU V0, V0, 3488
9D010C28  000420C2   SRL A0, A0, 3
9D010C2C  00822021   ADDU A0, A0, V0
9D010C30  03E00008   JR RA
9D010C34  9082FFFC   LBU V0, -4(A0)
9D010C38  10600007   BEQ V1, ZERO, bin_index
9D010C3C  2402003F   ADDIU V0, ZERO, 63
9D010C40  3C029D01   LUI V0, -25343
9D010C44  24420DA0   ADDIU V0, V0, 3488
9D010C48  000421C2   SRL A0, A0, 7
9D010C4C  00822021   ADDU A0, A0, V0
9D010C50  9082FFFC   LBU V0, -4(A0)
9D010C54  24420010   ADDIU V0, V0, 16
9D010C58  03E00008   JR RA
9D010C5C  00000000   NOP
9D010FA0  3C038000   LUI V1, -32768
9D010FA4  8C66350C   LW A2, 13580(V1)
9D010FA8  8C820000   LW V0, 0(A0)
9D010FAC  3C037FFF   LUI V1, 32767
9D010FB0  3463FFEF   ORI V1, V1, -17
9D010FB4  2445FFFF   ADDIU A1, V0, -1
9D010FB8  00661823   SUBU V1, V1, A2
9D010FBC  0065182B   SLTU V1, V1, A1
9D010FC0  5060000B   BEQL V1, ZERO, adjust_size
9D010FC4  24420017   ADDIU V0, V0, 23
9D010FC8  50400006   BEQL V0, ZERO, adjust_size
9D010FCC  24020010   ADDIU V0, ZERO, 16
9D010FD0  3C028000   LUI V0, -32768
9D010FD4  2403000C   ADDIU V1, ZERO, 12
9D010FD8  AC433598   SW V1, 13720(V0)
9D010FDC  03E00008   JR RA
9D010FE0  2402FFFF   ADDIU V0, ZERO, -1
9D010FE4  AC820000   SW V0, 0(A0)
9D010FE8  03E00008   JR RA
9D010FEC  00001025   OR V0, ZERO, ZERO
9D010FF0  1000FFFC   BEQ ZERO, ZERO, adjust_size
9D010FF4  7C021804   INS V0, ZERO, 0, 4
9D010FF8  8C820004   LW V0, 4(A0)
9D010FFC  7C020004   INS V0, ZERO, 0, 1
9D011000  00451823   SUBU V1, V0, A1
9D011004  2C660011   SLTIU A2, V1, 17
9D011008  14C0000F   BNE A2, ZERO, trim
9D01100C  00853021   ADDU A2, A0, A1
9D011010  27BDFFE8   ADDIU SP, SP, -24
9D011014  34A50001   ORI A1, A1, 1
9D011018  34630001   ORI V1, V1, 1
9D01101C  00821021   ADDU V0, A0, V0
9D011020  AFBF0014   SW RA, 20(SP)
9D011024  ACC50000   SW A1, 0(A2)
9D011028  ACC30004   SW V1, 4(A2)
9D01102C  AC430000   SW V1, 0(V0)
9D011030  AC850004   SW A1, 4(A0)
9D011034  0F402FAE   JAL free
9D011038  24C40008   ADDIU A0, A2, 8
9D01103C  8FBF0014   LW RA, 20(SP)
9D011040  03E00008   JR RA
9D011044  27BD0018   ADDIU SP, SP, 24
9D011048  03E00008   JR RA
9D01104C  00000000   NOP
9D0117A0  24840001   ADDIU A0, A0, 1
9D0117A4  000410C0   SLL V0, A0, 3
9D0117A8  3C048000   LUI A0, -32768
9D0117AC  24843038   ADDIU A0, A0, 12344
9D0117B0  00441821   ADDU V1, V0, A0
9D0117B4  8C650000   LW A1, 0(V1)
9D0117B8  14A00004   BNE A1, ZERO, lock_bin
9D0117BC  2442FFF8   ADDIU V0, V0, -8
9D0117C0  00822021   ADDU A0, A0, V0
9D0117C4  AC640004   SW A0, 4(V1)
9D0117C8  AC640000   SW A0, 0(V1)
9D0117CC  03E00008   JR RA
9D0117D0  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/internal/shgetc.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D00D45C  27BDFFE8   ADDIU SP, SP, -24
9D00D460  AFB00010   SW S0, 16(SP)
9D00D464  00808025   OR S0, A0, ZERO
9D00D468  8E030054   LW V1, 84(S0)
9D00D46C  8C840050   LW A0, 80(A0)
9D00D470  00831025   OR V0, A0, V1
9D00D474  10400011   BEQ V0, ZERO, 0x9D00D4BC
9D00D478  AFBF0014   SW RA, 20(SP)
9D00D47C  8E02005C   LW V0, 92(S0)
9D00D480  0043282A   SLT A1, V0, V1
9D00D484  14A0000D   BNE A1, ZERO, 0x9D00D4BC
9D00D488  00000000   NOP
9D00D48C  54430006   BNEL V0, V1, 0x9D00D4A8
9D00D490  AE00004C   SW ZERO, 76(S0)
9D00D494  8E020058   LW V0, 88(S0)
9D00D498  0044102B   SLTU V0, V0, A0
9D00D49C  14400007   BNE V0, ZERO, 0x9D00D4BC
9D00D4A0  00000000   NOP
9D00D4A4  AE00004C   SW ZERO, 76(S0)
9D00D4A8  2402FFFF   ADDIU V0, ZERO, -1
9D00D4AC  8FBF0014   LW RA, 20(SP)
9D00D4B0  8FB00010   LW S0, 16(SP)
9D00D4B4  03E00008   JR RA
9D00D4B8  27BD0018   ADDIU SP, SP, 24
9D00D4BC  0F40443E   JAL __uflow
9D00D4C0  02002025   OR A0, S0, ZERO
9D00D4C4  0442FFF8   BLTZL V0, 0x9D00D4A8
9D00D4C8  AE00004C   SW ZERO, 76(S0)
9D00D4CC  8E040050   LW A0, 80(S0)
9D00D4D0  8E060054   LW A2, 84(S0)
9D00D4D4  8E030040   LW V1, 64(S0)
9D00D4D8  8E07003C   LW A3, 60(S0)
9D00D4DC  00864025   OR T0, A0, A2
9D00D4E0  11000014   BEQ T0, ZERO, 0x9D00D534
9D00D4E4  00602825   OR A1, V1, ZERO
9D00D4E8  8E090058   LW T1, 88(S0)
9D00D4EC  8E05005C   LW A1, 92(S0)
9D00D4F0  00894023   SUBU T0, A0, T1
9D00D4F4  0088502B   SLTU T2, A0, T0
9D00D4F8  00C52823   SUBU A1, A2, A1
9D00D4FC  00673023   SUBU A2, V1, A3
9D00D500  00AA2823   SUBU A1, A1, T2
9D00D504  000657C3   SRA T2, A2, 31
9D00D508  0145582A   SLT T3, T2, A1
9D00D50C  55600009   BNEL T3, ZERO, 0x9D00D534
9D00D510  00602825   OR A1, V1, ZERO
9D00D514  54AA0005   BNEL A1, T2, 0x9D00D52C
9D00D518  2484FFFF   ADDIU A0, A0, -1
9D00D51C  00C8402B   SLTU T0, A2, T0
9D00D520  15000004   BNE T0, ZERO, 0x9D00D534
9D00D524  00602825   OR A1, V1, ZERO
9D00D528  2484FFFF   ADDIU A0, A0, -1
9D00D52C  00892023   SUBU A0, A0, T1
9D00D530  00E42821   ADDU A1, A3, A0
9D00D534  1060000C   BEQ V1, ZERO, 0x9D00D568
9D00D538  AE05004C   SW A1, 76(S0)
9D00D53C  8E040058   LW A0, 88(S0)
9D00D540  8E05005C   LW A1, 92(S0)
9D00D544  00671823   SUBU V1, V1, A3
9D00D548  24630001   ADDIU V1, V1, 1
9D00D54C  000337C3   SRA A2, V1, 31
9D00D550  00831821   ADDU V1, A0, V1
9D00D554  0064202B   SLTU A0, V1, A0
9D00D558  00A62821   ADDU A1, A1, A2
9D00D55C  00852021   ADDU A0, A0, A1
9D00D560  AE030058   SW V1, 88(S0)
9D00D564  AE04005C   SW A0, 92(S0)
9D00D568  90E3FFFF   LBU V1, -1(A3)
9D00D56C  5462FFCF   BNEL V1, V0, 0x9D00D4AC
9D00D570  A0E2FFFF   SB V0, -1(A3)
9D00D574  1000FFCE   BEQ ZERO, ZERO, 0x9D00D4B0
9D00D578  8FBF0014   LW RA, 20(SP)
9D00D57C  27BDFFD0   ADDIU SP, SP, -48
9D011230  8C830040   LW V1, 64(A0)
9D011234  8C88003C   LW T0, 60(A0)
9D011238  00C74825   OR T1, A2, A3
9D01123C  AC860050   SW A2, 80(A0)
9D011240  00681023   SUBU V0, V1, T0
9D011244  00022FC3   SRA A1, V0, 31
9D011248  AC870054   SW A3, 84(A0)
9D01124C  AC820058   SW V0, 88(A0)
9D011250  11200008   BEQ T1, ZERO, 0x9D011274
9D011254  AC85005C   SW A1, 92(A0)
9D011258  00E5482A   SLT T1, A3, A1
9D01125C  55200005   BNEL T1, ZERO, 0x9D011274
9D011260  01061821   ADDU V1, T0, A2
9D011264  14A70003   BNE A1, A3, 0x9D011274
9D011268  00C2102B   SLTU V0, A2, V0
9D01126C  54400001   BNEL V0, ZERO, 0x9D011274
9D011270  01061821   ADDU V1, T0, A2
9D011274  03E00008   JR RA
9D011278  AC83004C   SW V1, 76(A0)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/internal/floatscan.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D002F2C  27BDFD88   ADDIU SP, SP, -632
9D002F30  AFB3022C   SW S3, 556(SP)
9D002F34  AFB20228   SW S2, 552(SP)
9D002F38  AFB10224   SW S1, 548(SP)
9D002F3C  AFB00220   SW S0, 544(SP)
9D002F40  AFBF0244   SW RA, 580(SP)
9D002F44  AFBE0240   SW FP, 576(SP)
9D002F48  AFB7023C   SW S7, 572(SP)
9D002F4C  AFB60238   SW S6, 568(SP)
9D002F50  AFB50234   SW S5, 564(SP)
9D002F54  AFB40230   SW S4, 560(SP)
9D002F58  F7BC0268   SDC1 F28, 616(SP)
9D002F5C  F7BA0260   SDC1 F26, 608(SP)
9D002F60  F7B80258   SDC1 F24, 600(SP)
9D002F64  F7B60250   SDC1 F22, 592(SP)
9D002F68  F7B40248   SDC1 F20, 584(SP)
9D002F6C  00808825   OR S1, A0, ZERO
9D002F70  00A01025   OR V0, A1, ZERO
9D002F74  00C09825   OR S3, A2, ZERO
9D002F78  00E09025   OR S2, A3, ZERO
9D002F7C  00001825   OR V1, ZERO, ZERO
9D002F80  24100030   ADDIU S0, ZERO, 48
9D002F84  50500046   BEQL V0, S0, decfloat
9D002F88  8E22003C   LW V0, 60(S1)
9D002F8C  2404002E   ADDIU A0, ZERO, 46
9D002F90  14440067   BNE V0, A0, decfloat
9D002F94  00004025   OR T0, ZERO, ZERO
9D002F98  8E22003C   LW V0, 60(S1)
9D002F9C  8E24004C   LW A0, 76(S1)
9D002FA0  0044202B   SLTU A0, V0, A0
9D002FA4  1080004B   BEQ A0, ZERO, decfloat
9D002FA8  24440001   ADDIU A0, V0, 1
9D002FAC  AE24003C   SW A0, 60(S1)
9D002FB0  90420000   LBU V0, 0(V0)
9D002FB4  0000A025   OR S4, ZERO, ZERO
9D002FB8  0000A825   OR S5, ZERO, ZERO
9D002FBC  24100030   ADDIU S0, ZERO, 48
9D002FC0  50500049   BEQL V0, S0, decfloat
9D002FC4  2682FFFF   ADDIU V0, S4, -1
9D002FC8  24080001   ADDIU T0, ZERO, 1
9D002FCC  AFA00010   SW ZERO, 16(SP)
9D002FD0  0000F025   OR FP, ZERO, ZERO
9D002FD4  0000B825   OR S7, ZERO, ZERO
9D002FD8  00003825   OR A3, ZERO, ZERO
9D002FDC  00008025   OR S0, ZERO, ZERO
9D002FE0  0000B025   OR S6, ZERO, ZERO
9D002FE4  2409002E   ADDIU T1, ZERO, 46
9D002FE8  240A0030   ADDIU T2, ZERO, 48
9D002FEC  240B0009   ADDIU T3, ZERO, 9
9D002FF0  2444FFD0   ADDIU A0, V0, -48
9D002FF4  2C85000A   SLTIU A1, A0, 10
9D002FF8  14A00050   BNE A1, ZERO, decfloat
9D002FFC  00000000   NOP
9D003000  10490050   BEQ V0, T1, decfloat
9D003004  00000000   NOP
9D003008  02E8A00A   MOVZ S4, S7, T0
9D00300C  00E8A80A   MOVZ S5, A3, T0
9D003010  10600287   BEQ V1, ZERO, decfloat
9D003014  34440020   ORI A0, V0, 32
9D003018  24050065   ADDIU A1, ZERO, 101
9D00301C  148502A8   BNE A0, A1, decfloat
9D003020  8FA5028C   LW A1, 652(SP)
9D003024  02202025   OR A0, S1, ZERO
9D003028  0F4027FA   JAL scanexp
9D00302C  AFA70210   SW A3, 528(SP)
9D003030  1440000E   BNE V0, ZERO, decfloat
9D003034  8FA70210   LW A3, 528(SP)
9D003038  3C048000   LUI A0, -32768
9D00303C  5464000C   BNEL V1, A0, decfloat
9D003040  02821021   ADDU V0, S4, V0
9D003044  8FA3028C   LW V1, 652(SP)
9D003048  10600287   BEQ V1, ZERO, decfloat
9D00304C  00003025   OR A2, ZERO, ZERO
9D003050  8E24004C   LW A0, 76(S1)
9D003054  10800005   BEQ A0, ZERO, decfloat
9D003058  00001825   OR V1, ZERO, ZERO
9D00305C  8E23003C   LW V1, 60(S1)
9D003060  2463FFFF   ADDIU V1, V1, -1
9D003064  AE23003C   SW V1, 60(S1)
9D003068  00001825   OR V1, ZERO, ZERO
9D00306C  02821021   ADDU V0, S4, V0
9D003070  0054202B   SLTU A0, V0, S4
9D003074  02A3A821   ADDU S5, S5, V1
9D003078  0040A025   OR S4, V0, ZERO
9D00307C  0095A821   ADDU S5, A0, S5
9D003080  C7A00288   LWC1 F0, 648(SP)
9D003084  8FA40010   LW A0, 16(SP)
9D003088  14800066   BNE A0, ZERO, decfloat
9D00308C  46800621   CVT.D.W F24, F0
9D003090  44800000   MTC1 ZERO, F0
9D003094  44E00000   MTHC1 ZERO, F0
9D003098  10000278   BEQ ZERO, ZERO, decfloat
9D00309C  46380002   MUL.D F0, F0, F24
9D0030A0  8E23004C   LW V1, 76(S1)
9D0030A4  0043182B   SLTU V1, V0, V1
9D0030A8  10600006   BEQ V1, ZERO, decfloat
9D0030AC  00000000   NOP
9D0030B0  24430001   ADDIU V1, V0, 1
9D0030B4  AE23003C   SW V1, 60(S1)
9D0030B8  90420000   LBU V0, 0(V0)
9D0030BC  1000FFB1   BEQ ZERO, ZERO, decfloat
9D0030C0  24030001   ADDIU V1, ZERO, 1
9D0030C4  0F403517   JAL __shgetc
9D0030C8  02202025   OR A0, S1, ZERO
9D0030CC  1000FFAD   BEQ ZERO, ZERO, decfloat
9D0030D0  24030001   ADDIU V1, ZERO, 1
9D0030D4  02202025   OR A0, S1, ZERO
9D0030D8  0F403517   JAL __shgetc
9D0030DC  AFA30210   SW V1, 528(SP)
9D0030E0  1000FFB4   BEQ ZERO, ZERO, decfloat
9D0030E4  8FA30210   LW V1, 528(SP)
9D0030E8  0054182B   SLTU V1, V0, S4
9D0030EC  26B5FFFF   ADDIU S5, S5, -1
9D0030F0  0040A025   OR S4, V0, ZERO
9D0030F4  0075A821   ADDU S5, V1, S5
9D0030F8  8E22003C   LW V0, 60(S1)
9D0030FC  8E23004C   LW V1, 76(S1)
9D003100  0043182B   SLTU V1, V0, V1
9D003104  10600006   BEQ V1, ZERO, decfloat
9D003108  00000000   NOP
9D00310C  24430001   ADDIU V1, V0, 1
9D003110  AE23003C   SW V1, 60(S1)
9D003114  90420000   LBU V0, 0(V0)
9D003118  1000FFA9   BEQ ZERO, ZERO, decfloat
9D00311C  24030001   ADDIU V1, ZERO, 1
9D003120  0F403517   JAL __shgetc
9D003124  02202025   OR A0, S1, ZERO
9D003128  1000FFA5   BEQ ZERO, ZERO, decfloat
9D00312C  24030001   ADDIU V1, ZERO, 1
9D003130  0000A025   OR S4, ZERO, ZERO
9D003134  1000FFA5   BEQ ZERO, ZERO, decfloat
9D003138  0000A825   OR S5, ZERO, ZERO
9D00313C  1449000D   BNE V0, T1, decfloat
9D003140  26E50001   ADDIU A1, S7, 1
9D003144  15000035   BNE T0, ZERO, decfloat
9D003148  24080001   ADDIU T0, ZERO, 1
9D00314C  02E0A025   OR S4, S7, ZERO
9D003150  00E0A825   OR S5, A3, ZERO
9D003154  8E22003C   LW V0, 60(S1)
9D003158  8E24004C   LW A0, 76(S1)
9D00315C  0044202B   SLTU A0, V0, A0
9D003160  10800022   BEQ A0, ZERO, decfloat
9D003164  24440001   ADDIU A0, V0, 1
9D003168  AE24003C   SW A0, 60(S1)
9D00316C  1000FFA0   BEQ ZERO, ZERO, decfloat
9D003170  90420000   LBU V0, 0(V0)
9D003174  00B7602B   SLTU T4, A1, S7
9D003178  00A0B825   OR S7, A1, ZERO
9D00317C  2A05007D   SLTI A1, S0, 125
9D003180  10A00014   BEQ A1, ZERO, decfloat
9D003184  01873821   ADDU A3, T4, A3
9D003188  38420030   XORI V0, V0, 48
9D00318C  02E2F00B   MOVN FP, S7, V0
9D003190  12C00007   BEQ S6, ZERO, decfloat
9D003194  00101080   SLL V0, S0, 2
9D003198  27A30010   ADDIU V1, SP, 16
9D00319C  00621821   ADDU V1, V1, V0
9D0031A0  8C630000   LW V1, 0(V1)
9D0031A4  2405000A   ADDIU A1, ZERO, 10
9D0031A8  70A33002   MUL A2, A1, V1
9D0031AC  00C42021   ADDU A0, A2, A0
9D0031B0  27A30010   ADDIU V1, SP, 16
9D0031B4  00621021   ADDU V0, V1, V0
9D0031B8  26D60001   ADDIU S6, S6, 1
9D0031BC  AC440000   SW A0, 0(V0)
9D0031C0  16CBFFE4   BNE S6, T3, decfloat
9D0031C4  24030001   ADDIU V1, ZERO, 1
9D0031C8  26100001   ADDIU S0, S0, 1
9D0031CC  1000FFE1   BEQ ZERO, ZERO, decfloat
9D0031D0  0000B025   OR S6, ZERO, ZERO
9D0031D4  104AFFDF   BEQ V0, T2, decfloat
9D0031D8  8FA20200   LW V0, 512(SP)
9D0031DC  241E045C   ADDIU FP, ZERO, 1116
9D0031E0  34420001   ORI V0, V0, 1
9D0031E4  1000FFDB   BEQ ZERO, ZERO, decfloat
9D0031E8  AFA20200   SW V0, 512(SP)
9D0031EC  02202025   OR A0, S1, ZERO
9D0031F0  AFA70218   SW A3, 536(SP)
9D0031F4  AFA80214   SW T0, 532(SP)
9D0031F8  0F403517   JAL __shgetc
9D0031FC  AFA30210   SW V1, 528(SP)
9D003200  240B0009   ADDIU T3, ZERO, 9
9D003204  240A0030   ADDIU T2, ZERO, 48
9D003208  2409002E   ADDIU T1, ZERO, 46
9D00320C  8FA70218   LW A3, 536(SP)
9D003210  8FA80214   LW T0, 532(SP)
9D003214  1000FF76   BEQ ZERO, ZERO, decfloat
9D003218  8FA30210   LW V1, 528(SP)
9D00321C  1000FF7C   BEQ ZERO, ZERO, decfloat
9D003220  2402002E   ADDIU V0, ZERO, 46
9D003224  16F40014   BNE S7, S4, decfloat
9D003228  001217C2   SRL V0, S2, 31
9D00322C  14F50013   BNE A3, S5, decfloat
9D003230  00521021   ADDU V0, V0, S2
9D003234  1EA00010   BGTZ S5, decfloat
9D003238  001217C2   SRL V0, S2, 31
9D00323C  16A00005   BNE S5, ZERO, decfloat
9D003240  2A62001F   SLTI V0, S3, 31
9D003244  2E82000A   SLTIU V0, S4, 10
9D003248  1040000B   BEQ V0, ZERO, decfloat
9D00324C  001217C2   SRL V0, S2, 31
9D003250  2A62001F   SLTI V0, S3, 31
9D003254  10400003   BEQ V0, ZERO, decfloat
9D003258  02641006   SRLV V0, A0, S3
9D00325C  14400006   BNE V0, ZERO, decfloat
9D003260  001217C2   SRL V0, S2, 31
9D003264  44840000   MTC1 A0, F0
9D003268  00001825   OR V1, ZERO, ZERO
9D00326C  44E30000   MTHC1 V1, F0
9D003270  1000FF89   BEQ ZERO, ZERO, decfloat
9D003274  46A00021   CVT.D.L F0, F0
9D003278  00521021   ADDU V0, V0, S2
9D00327C  00021043   SRA V0, V0, 1
9D003280  00021023   SUBU V0, ZERO, V0
9D003284  00021FC3   SRA V1, V0, 31
9D003288  0075202A   SLT A0, V1, S5
9D00328C  54800007   BNEL A0, ZERO, decfloat
9D003290  3C028000   LUI V0, -32768
9D003294  56A3000B   BNEL S5, V1, decfloat
9D003298  2642FF96   ADDIU V0, S2, -106
9D00329C  0054102B   SLTU V0, V0, S4
9D0032A0  10400008   BEQ V0, ZERO, decfloat
9D0032A4  2642FF96   ADDIU V0, S2, -106
9D0032A8  3C028000   LUI V0, -32768
9D0032AC  24030022   ADDIU V1, ZERO, 34
9D0032B0  AC433598   SW V1, 13720(V0)
9D0032B4  3C029D01   LUI V0, -25343
9D0032B8  D4400D20   LDC1 F0, 3360(V0)
9D0032BC  1000FF76   BEQ ZERO, ZERO, decfloat
9D0032C0  4620C602   MUL.D F24, F24, F0
9D0032C4  00021FC3   SRA V1, V0, 31
9D0032C8  02A3202A   SLT A0, S5, V1
9D0032CC  54800005   BNEL A0, ZERO, decfloat
9D0032D0  3C028000   LUI V0, -32768
9D0032D4  14750008   BNE V1, S5, decfloat
9D0032D8  0282102B   SLTU V0, S4, V0
9D0032DC  10400006   BEQ V0, ZERO, decfloat
9D0032E0  3C028000   LUI V0, -32768
9D0032E4  24030022   ADDIU V1, ZERO, 34
9D0032E8  AC433598   SW V1, 13720(V0)
9D0032EC  3C029D01   LUI V0, -25343
9D0032F0  1000FFF2   BEQ ZERO, ZERO, decfloat
9D0032F4  D4400D28   LDC1 F0, 3368(V0)
9D0032F8  12C0000A   BEQ S6, ZERO, decfloat
9D0032FC  2BC20009   SLTI V0, FP, 9
9D003300  00101080   SLL V0, S0, 2
9D003304  27A30010   ADDIU V1, SP, 16
9D003308  00621021   ADDU V0, V1, V0
9D00330C  2404000A   ADDIU A0, ZERO, 10
9D003310  2AC30009   SLTI V1, S6, 9
9D003314  54600021   BNEL V1, ZERO, decfloat
9D003318  8C430000   LW V1, 0(V0)
9D00331C  26100001   ADDIU S0, S0, 1
9D003320  2BC20009   SLTI V0, FP, 9
9D003324  10400038   BEQ V0, ZERO, decfloat
9D003328  0280B825   OR S7, S4, ZERO
9D00332C  029EF02A   SLT FP, S4, FP
9D003330  17C00036   BNE FP, ZERO, decfloat
9D003334  2603FFFF   ADDIU V1, S0, -1
9D003338  2A820012   SLTI V0, S4, 18
9D00333C  10400034   BEQ V0, ZERO, decfloat
9D003340  00031080   SLL V0, V1, 2
9D003344  24020009   ADDIU V0, ZERO, 9
9D003348  1282FFC6   BEQ S4, V0, decfloat
9D00334C  8FA40010   LW A0, 16(SP)
9D003350  2A820009   SLTI V0, S4, 9
9D003354  10400015   BEQ V0, ZERO, decfloat
9D003358  2682FFF7   ADDIU V0, S4, -9
9D00335C  44840000   MTC1 A0, F0
9D003360  00001825   OR V1, ZERO, ZERO
9D003364  44E30000   MTHC1 V1, F0
9D003368  24020008   ADDIU V0, ZERO, 8
9D00336C  0054A023   SUBU S4, V0, S4
9D003370  46A00021   CVT.D.L F0, F0
9D003374  3C029D01   LUI V0, -25343
9D003378  46380002   MUL.D F0, F0, F24
9D00337C  244219BC   ADDIU V0, V0, 6588
9D003380  0014A080   SLL S4, S4, 2
9D003384  0282A021   ADDU S4, S4, V0
9D003388  8E820000   LW V0, 0(S4)
9D00338C  44820800   MTC1 V0, F1
9D003390  46800E21   CVT.D.W F24, F1
9D003394  100001B9   BEQ ZERO, ZERO, decfloat
9D003398  46380003   DIV.D F0, F0, F24
9D00339C  26D60001   ADDIU S6, S6, 1
9D0033A0  70641802   MUL V1, V1, A0
9D0033A4  1000FFDA   BEQ ZERO, ZERO, decfloat
9D0033A8  AC430000   SW V1, 0(V0)
9D0033AC  00021880   SLL V1, V0, 2
9D0033B0  00431023   SUBU V0, V0, V1
9D0033B4  00531021   ADDU V0, V0, S3
9D0033B8  2843001F   SLTI V1, V0, 31
9D0033BC  10600003   BEQ V1, ZERO, decfloat
9D0033C0  00441006   SRLV V0, A0, V0
9D0033C4  14400011   BNE V0, ZERO, decfloat
9D0033C8  2603FFFF   ADDIU V1, S0, -1
9D0033CC  2694FFF6   ADDIU S4, S4, -10
9D0033D0  3C029D01   LUI V0, -25343
9D0033D4  244219BC   ADDIU V0, V0, 6588
9D0033D8  0014A080   SLL S4, S4, 2
9D0033DC  0282A021   ADDU S4, S4, V0
9D0033E0  8E820000   LW V0, 0(S4)
9D0033E4  00001825   OR V1, ZERO, ZERO
9D0033E8  44820000   MTC1 V0, F0
9D0033EC  468000A1   CVT.D.W F2, F0
9D0033F0  44840000   MTC1 A0, F0
9D0033F4  44E30000   MTHC1 V1, F0
9D0033F8  46A00021   CVT.D.L F0, F0
9D0033FC  46380002   MUL.D F0, F0, F24
9D003400  1000019E   BEQ ZERO, ZERO, decfloat
9D003404  46201002   MUL.D F0, F2, F0
9D003408  2603FFFF   ADDIU V1, S0, -1
9D00340C  00031080   SLL V0, V1, 2
9D003410  27A40010   ADDIU A0, SP, 16
9D003414  00821021   ADDU V0, A0, V0
9D003418  8C420000   LW V0, 0(V0)
9D00341C  5040FFFA   BEQL V0, ZERO, decfloat
9D003420  00608025   OR S0, V1, ZERO
9D003424  24110009   ADDIU S1, ZERO, 9
9D003428  0291001A   DIV S4, S1
9D00342C  022001F4   TEQ S1, ZERO
9D003430  00008810   MFHI S1
9D003434  1220001C   BEQ S1, ZERO, decfloat
9D003438  3C0B0089   LUI T3, 137
9D00343C  06820001   BLTZL S4, decfloat
9D003440  26310009   ADDIU S1, S1, 9
9D003444  24020008   ADDIU V0, ZERO, 8
9D003448  00511023   SUBU V0, V0, S1
9D00344C  3C039D01   LUI V1, -25343
9D003450  246319BC   ADDIU V1, V1, 6588
9D003454  00021080   SLL V0, V0, 2
9D003458  00431021   ADDU V0, V0, V1
9D00345C  8C460000   LW A2, 0(V0)
9D003460  3C073B9A   LUI A3, 15258
9D003464  27A50010   ADDIU A1, SP, 16
9D003468  00001825   OR V1, ZERO, ZERO
9D00346C  00004025   OR T0, ZERO, ZERO
9D003470  00002025   OR A0, ZERO, ZERO
9D003474  34E7CA00   ORI A3, A3, -13824
9D003478  54900014   BNEL A0, S0, decfloat
9D00347C  8CA20000   LW V0, 0(A1)
9D003480  10600006   BEQ V1, ZERO, decfloat
9D003484  02F1B823   SUBU S7, S7, S1
9D003488  00101080   SLL V0, S0, 2
9D00348C  27A40010   ADDIU A0, SP, 16
9D003490  00821021   ADDU V0, A0, V0
9D003494  AC430000   SW V1, 0(V0)
9D003498  26100001   ADDIU S0, S0, 1
9D00349C  26F70009   ADDIU S7, S7, 9
9D0034A0  01008825   OR S1, T0, ZERO
9D0034A4  3C0B0089   LUI T3, 137
9D0034A8  3C143B9A   LUI S4, 15258
9D0034AC  3C0C3B9A   LUI T4, 15258
9D0034B0  0000B025   OR S6, ZERO, ZERO
9D0034B4  240D0012   ADDIU T5, ZERO, 18
9D0034B8  256B705F   ADDIU T3, T3, 28767
9D0034BC  3694CA00   ORI S4, S4, -13824
9D0034C0  0000A825   OR S5, ZERO, ZERO
9D0034C4  10000062   BEQ ZERO, ZERO, decfloat
9D0034C8  358CCA01   ORI T4, T4, -13823
9D0034CC  0046001B   DIVU V0, A2
9D0034D0  00C001F4   TEQ A2, ZERO
9D0034D4  00004810   MFHI T1
9D0034D8  00001012   MFLO V0
9D0034DC  00431021   ADDU V0, V0, V1
9D0034E0  ACA20000   SW V0, 0(A1)
9D0034E4  00E6001A   DIV A3, A2
9D0034E8  00C001F4   TEQ A2, ZERO
9D0034EC  00001812   MFLO V1
9D0034F0  70691802   MUL V1, V1, T1
9D0034F4  14880005   BNE A0, T0, decfloat
9D0034F8  24890001   ADDIU T1, A0, 1
9D0034FC  54400004   BNEL V0, ZERO, decfloat
9D003500  01202025   OR A0, T1, ZERO
9D003504  3128007F   ANDI T0, T1, 127
9D003508  26F7FFF7   ADDIU S7, S7, -9
9D00350C  01202025   OR A0, T1, ZERO
9D003510  1000FFD9   BEQ ZERO, ZERO, decfloat
9D003514  24A50004   ADDIU A1, A1, 4
9D003518  26D6FFE3   ADDIU S6, S6, -29
9D00351C  33DE007F   ANDI FP, FP, 127
9D003520  00004825   OR T1, ZERO, ZERO
9D003524  001E5080   SLL T2, FP, 2
9D003528  27A20010   ADDIU V0, SP, 16
9D00352C  004A1021   ADDU V0, V0, T2
9D003530  8C480000   LW T0, 0(V0)
9D003534  000810C2   SRL V0, T0, 3
9D003538  00084740   SLL T0, T0, 29
9D00353C  01097021   ADDU T6, T0, T1
9D003540  01C8402B   SLTU T0, T6, T0
9D003544  01024021   ADDU T0, T0, V0
9D003548  15000005   BNE T0, ZERO, decfloat
9D00354C  01C02025   OR A0, T6, ZERO
9D003550  01CC102B   SLTU V0, T6, T4
9D003554  14400024   BNE V0, ZERO, decfloat
9D003558  01C01025   OR V0, T6, ZERO
9D00355C  01C02025   OR A0, T6, ZERO
9D003560  01002825   OR A1, T0, ZERO
9D003564  02803025   OR A2, S4, ZERO
9D003568  02A03825   OR A3, S5, ZERO
9D00356C  AFAA021C   SW T2, 540(SP)
9D003570  AFAE0218   SW T6, 536(SP)
9D003574  0F40238F   JAL __udivdi3
9D003578  AFA80214   SW T0, 532(SP)
9D00357C  8FAE0218   LW T6, 536(SP)
9D003580  8FA80214   LW T0, 532(SP)
9D003584  02803025   OR A2, S4, ZERO
9D003588  02A03825   OR A3, S5, ZERO
9D00358C  01C02025   OR A0, T6, ZERO
9D003590  01002825   OR A1, T0, ZERO
9D003594  0F402291   JAL __umoddi3
9D003598  AFA20210   SW V0, 528(SP)
9D00359C  3C030089   LUI V1, 137
9D0035A0  8FA90210   LW T1, 528(SP)
9D0035A4  8FAA021C   LW T2, 540(SP)
9D0035A8  346B705F   ORI T3, V1, 28767
9D0035AC  3C033B9A   LUI V1, 15258
9D0035B0  240D0012   ADDIU T5, ZERO, 18
9D0035B4  346CCA01   ORI T4, V1, -13823
9D0035B8  27A30010   ADDIU V1, SP, 16
9D0035BC  006A5021   ADDU T2, V1, T2
9D0035C0  2603FFFF   ADDIU V1, S0, -1
9D0035C4  3063007F   ANDI V1, V1, 127
9D0035C8  147E0009   BNE V1, FP, decfloat
9D0035CC  AD420000   SW V0, 0(T2)
9D0035D0  53D10009   BEQL FP, S1, decfloat
9D0035D4  02201825   OR V1, S1, ZERO
9D0035D8  03C2800A   MOVZ S0, FP, V0
9D0035DC  27DEFFFF   ADDIU FP, FP, -1
9D0035E0  1000FFD0   BEQ ZERO, ZERO, decfloat
9D0035E4  33DE007F   ANDI FP, FP, 127
9D0035E8  1000FFF3   BEQ ZERO, ZERO, decfloat
9D0035EC  00004825   OR T1, ZERO, ZERO
9D0035F0  57D1FFFB   BNEL FP, S1, decfloat
9D0035F4  27DEFFFF   ADDIU FP, FP, -1
9D0035F8  11200016   BEQ T1, ZERO, decfloat
9D0035FC  2AE20012   SLTI V0, S7, 18
9D003600  2631FFFF   ADDIU S1, S1, -1
9D003604  3231007F   ANDI S1, S1, 127
9D003608  1611000D   BNE S0, S1, decfloat
9D00360C  26F70009   ADDIU S7, S7, 9
9D003610  2462FFFF   ADDIU V0, V1, -1
9D003614  3042007F   ANDI V0, V0, 127
9D003618  27A40010   ADDIU A0, SP, 16
9D00361C  00021080   SLL V0, V0, 2
9D003620  00032880   SLL A1, V1, 2
9D003624  00821021   ADDU V0, A0, V0
9D003628  00852821   ADDU A1, A0, A1
9D00362C  8CA50000   LW A1, 0(A1)
9D003630  8C440000   LW A0, 0(V0)
9D003634  00608025   OR S0, V1, ZERO
9D003638  00852025   OR A0, A0, A1
9D00363C  AC440000   SW A0, 0(V0)
9D003640  00111080   SLL V0, S1, 2
9D003644  27A30010   ADDIU V1, SP, 16
9D003648  00621021   ADDU V0, V1, V0
9D00364C  AC490000   SW T1, 0(V0)
9D003650  2AE20012   SLTI V0, S7, 18
9D003654  5440FFB0   BNEL V0, ZERO, decfloat
9D003658  261EFFFF   ADDIU FP, S0, -1
9D00365C  16ED0007   BNE S7, T5, decfloat
9D003660  00111080   SLL V0, S1, 2
9D003664  27A30010   ADDIU V1, SP, 16
9D003668  00621021   ADDU V0, V1, V0
9D00366C  8C420000   LW V0, 0(V0)
9D003670  004B102B   SLTU V0, V0, T3
9D003674  5440FFA8   BNEL V0, ZERO, decfloat
9D003678  261EFFFF   ADDIU FP, S0, -1
9D00367C  3C040089   LUI A0, 137
9D003680  3C050F2F   LUI A1, 3887
9D003684  3C063B9A   LUI A2, 15258
9D003688  24080012   ADDIU T0, ZERO, 18
9D00368C  2484705F   ADDIU A0, A0, 28767
9D003690  24A50A00   ADDIU A1, A1, 2560
9D003694  24070001   ADDIU A3, ZERO, 1
9D003698  24090009   ADDIU T1, ZERO, 9
9D00369C  34C6CA00   ORI A2, A2, -13824
9D0036A0  12300012   BEQ S1, S0, decfloat
9D0036A4  27A30010   ADDIU V1, SP, 16
9D0036A8  00111080   SLL V0, S1, 2
9D0036AC  00621021   ADDU V0, V1, V0
9D0036B0  8C420000   LW V0, 0(V0)
9D0036B4  0044182B   SLTU V1, V0, A0
9D0036B8  1460000C   BNE V1, ZERO, decfloat
9D0036BC  00000000   NOP
9D0036C0  1444000C   BNE V0, A0, decfloat
9D0036C4  26220001   ADDIU V0, S1, 1
9D0036C8  3042007F   ANDI V0, V0, 127
9D0036CC  12020007   BEQ S0, V0, decfloat
9D0036D0  00021080   SLL V0, V0, 2
9D0036D4  27A30010   ADDIU V1, SP, 16
9D0036D8  00621021   ADDU V0, V1, V0
9D0036DC  8C420000   LW V0, 0(V0)
9D0036E0  0045102B   SLTU V0, V0, A1
9D0036E4  10400004   BEQ V0, ZERO, decfloat
9D0036E8  2AE2001C   SLTI V0, S7, 28
9D0036EC  12E8002F   BEQ S7, T0, decfloat
9D0036F0  00000000   NOP
9D0036F4  2AE2001C   SLTI V0, S7, 28
9D0036F8  01201825   OR V1, T1, ZERO
9D0036FC  00E2180B   MOVN V1, A3, V0
9D003700  00677004   SLLV T6, A3, V1
9D003704  00601025   OR V0, V1, ZERO
9D003708  02C3B021   ADDU S6, S6, V1
9D00370C  00667807   SRAV T7, A2, V1
9D003710  25CEFFFF   ADDIU T6, T6, -1
9D003714  02201825   OR V1, S1, ZERO
9D003718  00005025   OR T2, ZERO, ZERO
9D00371C  5470000B   BNEL V1, S0, decfloat
9D003720  27AB0010   ADDIU T3, SP, 16
9D003724  1140FFDE   BEQ T2, ZERO, decfloat
9D003728  26020001   ADDIU V0, S0, 1
9D00372C  3042007F   ANDI V0, V0, 127
9D003730  10510016   BEQ V0, S1, decfloat
9D003734  27A30010   ADDIU V1, SP, 16
9D003738  00108080   SLL S0, S0, 2
9D00373C  00708021   ADDU S0, V1, S0
9D003740  AE0A0000   SW T2, 0(S0)
9D003744  1000FFD6   BEQ ZERO, ZERO, decfloat
9D003748  00408025   OR S0, V0, ZERO
9D00374C  00036880   SLL T5, V1, 2
9D003750  016D6821   ADDU T5, T3, T5
9D003754  8DAC0000   LW T4, 0(T5)
9D003758  004C5806   SRLV T3, T4, V0
9D00375C  016A5821   ADDU T3, T3, T2
9D003760  01CC5024   AND T2, T6, T4
9D003764  ADAB0000   SW T3, 0(T5)
9D003768  714F5002   MUL T2, T2, T7
9D00376C  14710005   BNE V1, S1, decfloat
9D003770  246C0001   ADDIU T4, V1, 1
9D003774  5560FFE9   BNEL T3, ZERO, decfloat
9D003778  3183007F   ANDI V1, T4, 127
9D00377C  3191007F   ANDI S1, T4, 127
9D003780  26F7FFF7   ADDIU S7, S7, -9
9D003784  1000FFE5   BEQ ZERO, ZERO, decfloat
9D003788  3183007F   ANDI V1, T4, 127
9D00378C  2602FFFF   ADDIU V0, S0, -1
9D003790  3042007F   ANDI V0, V0, 127
9D003794  00021080   SLL V0, V0, 2
9D003798  00621021   ADDU V0, V1, V0
9D00379C  8C430000   LW V1, 0(V0)
9D0037A0  34630001   ORI V1, V1, 1
9D0037A4  1000FFBE   BEQ ZERO, ZERO, decfloat
9D0037A8  AC430000   SW V1, 0(V0)
9D0037AC  16300007   BNE S1, S0, decfloat
9D0037B0  26240001   ADDIU A0, S1, 1
9D0037B4  3090007F   ANDI S0, A0, 127
9D0037B8  2602FFFF   ADDIU V0, S0, -1
9D0037BC  00021080   SLL V0, V0, 2
9D0037C0  27A30010   ADDIU V1, SP, 16
9D0037C4  00621021   ADDU V0, V1, V0
9D0037C8  AC400000   SW ZERO, 0(V0)
9D0037CC  27A20010   ADDIU V0, SP, 16
9D0037D0  00112880   SLL A1, S1, 2
9D0037D4  00452821   ADDU A1, V0, A1
9D0037D8  8CA20000   LW V0, 0(A1)
9D0037DC  00001825   OR V1, ZERO, ZERO
9D0037E0  4480B000   MTC1 ZERO, F22
9D0037E4  44820000   MTC1 V0, F0
9D0037E8  44E0B000   MTHC1 ZERO, F22
9D0037EC  44E30000   MTHC1 V1, F0
9D0037F0  3082007F   ANDI V0, A0, 127
9D0037F4  46A00521   CVT.D.L F20, F0
9D0037F8  16020008   BNE S0, V0, decfloat
9D0037FC  4636A500   ADD.D F20, F20, F22
9D003800  26100001   ADDIU S0, S0, 1
9D003804  3210007F   ANDI S0, S0, 127
9D003808  2603FFFF   ADDIU V1, S0, -1
9D00380C  00031880   SLL V1, V1, 2
9D003810  27A40010   ADDIU A0, SP, 16
9D003814  00831821   ADDU V1, A0, V1
9D003818  AC600000   SW ZERO, 0(V1)
9D00381C  00021080   SLL V0, V0, 2
9D003820  27A30010   ADDIU V1, SP, 16
9D003824  00621021   ADDU V0, V1, V0
9D003828  8C440000   LW A0, 0(V0)
9D00382C  00002825   OR A1, ZERO, ZERO
9D003830  3C029D01   LUI V0, -25343
9D003834  44840000   MTC1 A0, F0
9D003838  D4420D30   LDC1 F2, 3376(V0)
9D00383C  44E50000   MTHC1 A1, F0
9D003840  26D50035   ADDIU S5, S6, 53
9D003844  46A00021   CVT.D.L F0, F0
9D003848  4C02A521   MADD.D F20, F0, F20, F2
9D00384C  02B2A023   SUBU S4, S5, S2
9D003850  0293102A   SLT V0, S4, S3
9D003854  10400063   BEQ V0, ZERO, decfloat
9D003858  4634C502   MUL.D F20, F24, F20
9D00385C  06800064   BLTZ S4, decfloat
9D003860  241E0001   ADDIU FP, ZERO, 1
9D003864  0280B825   OR S7, S4, ZERO
9D003868  2AE20035   SLTI V0, S7, 53
9D00386C  50400062   BEQL V0, ZERO, decfloat
9D003870  4480D000   MTC1 ZERO, F26
9D003874  3C029D01   LUI V0, -25343
9D003878  D45C0D38   LDC1 F28, 3384(V0)
9D00387C  24060069   ADDIU A2, ZERO, 105
9D003880  00D73023   SUBU A2, A2, S7
9D003884  0F404096   JAL scalbn
9D003888  4620E306   MOV.D F12, F28
9D00388C  46200306   MOV.D F12, F0
9D003890  0F40470C   JAL copysignl
9D003894  4620A386   MOV.D F14, F20
9D003898  4620E306   MOV.D F12, F28
9D00389C  24060035   ADDIU A2, ZERO, 53
9D0038A0  00D73023   SUBU A2, A2, S7
9D0038A4  0F404096   JAL scalbn
9D0038A8  46200686   MOV.D F26, F0
9D0038AC  46200386   MOV.D F14, F0
9D0038B0  0F40471A   JAL fmodl
9D0038B4  4620A306   MOV.D F12, F20
9D0038B8  4620A501   SUB.D F20, F20, F0
9D0038BC  46200706   MOV.D F28, F0
9D0038C0  4634D500   ADD.D F20, F26, F20
9D0038C4  26220002   ADDIU V0, S1, 2
9D0038C8  3042007F   ANDI V0, V0, 127
9D0038CC  1050001E   BEQ V0, S0, decfloat
9D0038D0  27A30010   ADDIU V1, SP, 16
9D0038D4  00021080   SLL V0, V0, 2
9D0038D8  00621021   ADDU V0, V1, V0
9D0038DC  8C430000   LW V1, 0(V0)
9D0038E0  3C021DCD   LUI V0, 7629
9D0038E4  24426500   ADDIU V0, V0, 25856
9D0038E8  0062202B   SLTU A0, V1, V0
9D0038EC  10800045   BEQ A0, ZERO, decfloat
9D0038F0  00000000   NOP
9D0038F4  14600005   BNE V1, ZERO, decfloat
9D0038F8  3C029D01   LUI V0, -25343
9D0038FC  26310003   ADDIU S1, S1, 3
9D003900  3231007F   ANDI S1, S1, 127
9D003904  52300004   BEQL S1, S0, decfloat
9D003908  24020035   ADDIU V0, ZERO, 53
9D00390C  D4400D40   LDC1 F0, 3392(V0)
9D003910  4F80C721   MADD.D F28, F28, F24, F0
9D003914  24020035   ADDIU V0, ZERO, 53
9D003918  00571023   SUBU V0, V0, S7
9D00391C  28420002   SLTI V0, V0, 2
9D003920  5440000A   BNEL V0, ZERO, decfloat
9D003924  00129023   SUBU S2, ZERO, S2
9D003928  3C029D01   LUI V0, -25343
9D00392C  D4580D38   LDC1 F24, 3384(V0)
9D003930  4620E306   MOV.D F12, F28
9D003934  0F40471A   JAL fmodl
9D003938  4620C386   MOV.D F14, F24
9D00393C  46360032   C.EQ.D F0, F22
9D003940  45030001   BC1TL decfloat
9D003944  4638E700   ADD.D F28, F28, F24
9D003948  00129023   SUBU S2, ZERO, S2
9D00394C  463CA500   ADD.D F20, F20, F28
9D003950  02539823   SUBU S3, S2, S3
9D003954  2662FFFF   ADDIU V0, S3, -1
9D003958  7EB5F000   EXT S5, S5, 0, 31
9D00395C  02A2A82A   SLT S5, S5, V0
9D003960  16A0001B   BNE S5, ZERO, decfloat
9D003964  463AA681   SUB.D F26, F20, F26
9D003968  0F404713   JAL fabsl
9D00396C  4620D306   MOV.D F12, F26
9D003970  3C029D01   LUI V0, -25343
9D003974  D4420D58   LDC1 F2, 3416(V0)
9D003978  4620113E   C.LE.D 1, F2, F0
9D00397C  45040009   BC1F 1, decfloat
9D003980  26C20034   ADDIU V0, S6, 52
9D003984  13C00003   BEQ FP, ZERO, decfloat
9D003988  3C029D01   LUI V0, -25343
9D00398C  0297A026   XOR S4, S4, S7
9D003990  0014F02B   SLTU FP, ZERO, S4
9D003994  D4400D50   LDC1 F0, 3408(V0)
9D003998  26D60001   ADDIU S6, S6, 1
9D00399C  4620D682   MUL.D F26, F26, F0
9D0039A0  26C20034   ADDIU V0, S6, 52
9D0039A4  26730003   ADDIU S3, S3, 3
9D0039A8  0053982A   SLT S3, V0, S3
9D0039AC  52600006   BEQL S3, ZERO, decfloat
9D0039B0  3C028000   LUI V0, -32768
9D0039B4  13C00007   BEQ FP, ZERO, decfloat
9D0039B8  4620D306   MOV.D F12, F26
9D0039BC  4636E232   C.EQ.D 2, F28, F22
9D0039C0  45090004   BC1T 2, decfloat
9D0039C4  3C028000   LUI V0, -32768
9D0039C8  24030022   ADDIU V1, ZERO, 34
9D0039CC  AC433598   SW V1, 13720(V0)
9D0039D0  4620D306   MOV.D F12, F26
9D0039D4  0F404721   JAL scalbnl
9D0039D8  02C03025   OR A2, S6, ZERO
9D0039DC  10000028   BEQ ZERO, ZERO, decfloat
9D0039E0  8FBF0244   LW RA, 580(SP)
9D0039E4  0260B825   OR S7, S3, ZERO
9D0039E8  1000FF9F   BEQ ZERO, ZERO, decfloat
9D0039EC  0000F025   OR FP, ZERO, ZERO
9D0039F0  1000FFA0   BEQ ZERO, ZERO, decfloat
9D0039F4  0000B825   OR S7, ZERO, ZERO
9D0039F8  44E0D000   MTHC1 ZERO, F26
9D0039FC  1000FFB1   BEQ ZERO, ZERO, decfloat
9D003A00  4620D706   MOV.D F28, F26
9D003A04  50620004   BEQL V1, V0, decfloat
9D003A08  26310003   ADDIU S1, S1, 3
9D003A0C  3C029D01   LUI V0, -25343
9D003A10  1000FFBF   BEQ ZERO, ZERO, decfloat
9D003A14  D4400D48   LDC1 F0, 3400(V0)
9D003A18  3231007F   ANDI S1, S1, 127
9D003A1C  1630FFFC   BNE S1, S0, decfloat
9D003A20  3C029D01   LUI V0, -25343
9D003A24  3C029D01   LUI V0, -25343
9D003A28  1000FFB9   BEQ ZERO, ZERO, decfloat
9D003A2C  D4400D50   LDC1 F0, 3408(V0)
9D003A30  0440000A   BLTZ V0, decfloat
9D003A34  3C028000   LUI V0, -32768
9D003A38  8E22004C   LW V0, 76(S1)
9D003A3C  10400004   BEQ V0, ZERO, decfloat
9D003A40  00000000   NOP
9D003A44  8E22003C   LW V0, 60(S1)
9D003A48  2442FFFF   ADDIU V0, V0, -1
9D003A4C  AE22003C   SW V0, 60(S1)
9D003A50  1460FD8C   BNE V1, ZERO, decfloat
9D003A54  C7A00288   LWC1 F0, 648(SP)
9D003A58  3C028000   LUI V0, -32768
9D003A5C  24030016   ADDIU V1, ZERO, 22
9D003A60  AC433598   SW V1, 13720(V0)
9D003A64  00003025   OR A2, ZERO, ZERO
9D003A68  00003825   OR A3, ZERO, ZERO
9D003A6C  0F40448C   JAL __shlim
9D003A70  02202025   OR A0, S1, ZERO
9D003A74  44800000   MTC1 ZERO, F0
9D003A78  44E00000   MTHC1 ZERO, F0
9D003A7C  8FBF0244   LW RA, 580(SP)
9D003A80  8FBE0240   LW FP, 576(SP)
9D003A84  8FB7023C   LW S7, 572(SP)
9D003A88  8FB60238   LW S6, 568(SP)
9D003A8C  8FB50234   LW S5, 564(SP)
9D003A90  8FB40230   LW S4, 560(SP)
9D003A94  8FB3022C   LW S3, 556(SP)
9D003A98  8FB20228   LW S2, 552(SP)
9D003A9C  8FB10224   LW S1, 548(SP)
9D003AA0  8FB00220   LW S0, 544(SP)
9D003AA4  D7BC0268   LDC1 F28, 616(SP)
9D003AA8  D7BA0260   LDC1 F26, 608(SP)
9D003AAC  D7B80258   LDC1 F24, 600(SP)
9D003AB0  D7B60250   LDC1 F22, 592(SP)
9D003AB4  D7B40248   LDC1 F20, 584(SP)
9D003AB8  03E00008   JR RA
9D003ABC  27BD0278   ADDIU SP, SP, 632
9D003AC0  0443FFDE   BGEZL V0, decfloat
9D003AC4  8E22004C   LW V0, 76(S1)
9D003AC8  1000FD6E   BEQ ZERO, ZERO, decfloat
9D003ACC  C7A00288   LWC1 F0, 648(SP)
9D003AD0  44800000   MTC1 ZERO, F0
9D003AD4  2CA20003   SLTIU V0, A1, 3
9D003AD8  10400288   BEQ V0, ZERO, 0x9D0044FC
9D003ADC  44E00000   MTHC1 ZERO, F0
9D003AE0  3C029D01   LUI V0, -25343
9D003AE4  244219B8   ADDIU V0, V0, 6584
9D003AE8  27BDFF70   ADDIU SP, SP, -144
9D003AEC  00A21021   ADDU V0, A1, V0
9D003AF0  AFB70054   SW S7, 84(SP)
9D003AF4  80570000   LB S7, 0(V0)
9D003AF8  3C029D01   LUI V0, -25343
9D003AFC  00052840   SLL A1, A1, 1
9D003B00  244219B0   ADDIU V0, V0, 6576
9D003B04  00A22821   ADDU A1, A1, V0
9D003B08  AFB40048   SW S4, 72(SP)
9D003B0C  84B40000   LH S4, 0(A1)
9D003B10  AFB30044   SW S3, 68(SP)
9D003B14  AFB1003C   SW S1, 60(SP)
9D003B18  AFB00038   SW S0, 56(SP)
9D003B1C  AFBF005C   SW RA, 92(SP)
9D003B20  AFBE0058   SW FP, 88(SP)
9D003B24  AFB60050   SW S6, 80(SP)
9D003B28  AFB5004C   SW S5, 76(SP)
9D003B2C  AFB20040   SW S2, 64(SP)
9D003B30  F7BC0080   SDC1 F28, 128(SP)
9D003B34  F7BA0078   SDC1 F26, 120(SP)
9D003B38  F7B80070   SDC1 F24, 112(SP)
9D003B3C  F7B60068   SDC1 F22, 104(SP)
9D003B40  F7B40060   SDC1 F20, 96(SP)
9D003B44  00C09825   OR S3, A2, ZERO
9D003B48  00808025   OR S0, A0, ZERO
9D003B50  8E02003C   LW V0, 60(S0)
9D003B80  2402002B   ADDIU V0, ZERO, 43
9D003B8C  2402002D   ADDIU V0, ZERO, 45
9D003B90  16C2000B   BNE S6, V0, 0x9D003BC0
9D003B94  24120001   ADDIU S2, ZERO, 1
9D003B98  24020002   ADDIU V0, ZERO, 2
9D003B9C  24120001   ADDIU S2, ZERO, 1
9D003BA0  02429023   SUBU S2, S2, V0
9D003BA4  8E03004C   LW V1, 76(S0)
9D003BA8  8E02003C   LW V0, 60(S0)
9D003BAC  0043182B   SLTU V1, V0, V1
9D003BB0  10600028   BEQ V1, ZERO, 0x9D003C54
9D003BB4  24430001   ADDIU V1, V0, 1
9D003BB8  AE03003C   SW V1, 60(S0)
9D003BBC  90560000   LBU S6, 0(V0)
9D003BC0  3C159D01   LUI S5, -25343
9D003BC4  00008825   OR S1, ZERO, ZERO
9D003BC8  26B51D70   ADDIU S5, S5, 7536
9D003BCC  241E0007   ADDIU FP, ZERO, 7
9D003BD0  24050008   ADDIU A1, ZERO, 8
9D003BD4  02B11821   ADDU V1, S5, S1
9D003BD8  80630000   LB V1, 0(V1)
9D003BDC  36C20020   ORI V0, S6, 32
9D003BE0  10430020   BEQ V0, V1, 0x9D003C64
9D003BE4  24020003   ADDIU V0, ZERO, 3
9D003BE8  52220007   BEQL S1, V0, 0x9D003C08
9D003BEC  8E03004C   LW V1, 76(S0)
9D003BF0  2E220004   SLTIU V0, S1, 4
9D003BF4  14400041   BNE V0, ZERO, 0x9D003CFC
9D003BF8  00000000   NOP
9D003BFC  5260004C   BEQL S3, ZERO, 0x9D003D30
9D003C00  8E02004C   LW V0, 76(S0)
9D003C04  8E03004C   LW V1, 76(S0)
9D003C08  10600004   BEQ V1, ZERO, 0x9D003C1C
9D003C0C  00000000   NOP
9D003C10  8E02003C   LW V0, 60(S0)
9D003C14  2442FFFF   ADDIU V0, V0, -1
9D003C18  AE02003C   SW V0, 60(S0)
9D003C1C  1260001D   BEQ S3, ZERO, 0x9D003C94
9D003C20  24040003   ADDIU A0, ZERO, 3
9D003C24  1224001C   BEQ S1, A0, 0x9D003C98
9D003C28  2402FFFF   ADDIU V0, ZERO, -1
9D003C2C  1060FFFD   BEQ V1, ZERO, 0x9D003C24
9D003C30  2631FFFF   ADDIU S1, S1, -1
9D003C34  8E02003C   LW V0, 60(S0)
9D003C38  2442FFFF   ADDIU V0, V0, -1
9D003C3C  1000FFF9   BEQ ZERO, ZERO, 0x9D003C24
9D003C40  AE02003C   SW V0, 60(S0)
9D003C44  0F403517   JAL __shgetc
9D003C48  02002025   OR A0, S0, ZERO
9D003C4C  1000FFC7   BEQ ZERO, ZERO, __floatscan::__isspace
9D003C50  0040B025   OR S6, V0, ZERO
9D003C54  0F403517   JAL __shgetc
9D003C58  02002025   OR A0, S0, ZERO
9D003C5C  1000FFD8   BEQ ZERO, ZERO, 0x9D003BC0
9D003C60  0040B025   OR S6, V0, ZERO
9D003C64  523E0009   BEQL S1, FP, 0x9D003C8C
9D003C68  26310001   ADDIU S1, S1, 1
9D003C6C  8E02003C   LW V0, 60(S0)
9D003C70  8E03004C   LW V1, 76(S0)
9D003C74  0043182B   SLTU V1, V0, V1
9D003C78  1060001B   BEQ V1, ZERO, 0x9D003CE8
9D003C7C  24430001   ADDIU V1, V0, 1
9D003C80  AE03003C   SW V1, 60(S0)
9D003C84  90560000   LBU S6, 0(V0)
9D003C88  26310001   ADDIU S1, S1, 1
9D003C8C  1625FFD2   BNE S1, A1, 0x9D003BD8
9D003C90  02B11821   ADDU V1, S5, S1
9D003C94  2402FFFF   ADDIU V0, ZERO, -1
9D003C98  1242020D   BEQ S2, V0, 0x9D0044D0
9D003C9C  3C029D01   LUI V0, -25343
9D003CA0  D4400D70   LDC1 F0, 3440(V0)
9D003CA4  8FBF005C   LW RA, 92(SP)
9D003CA8  8FBE0058   LW FP, 88(SP)
9D003CAC  8FB70054   LW S7, 84(SP)
9D003CB0  8FB60050   LW S6, 80(SP)
9D003CB4  8FB5004C   LW S5, 76(SP)
9D003CB8  8FB40048   LW S4, 72(SP)
9D003CBC  8FB30044   LW S3, 68(SP)
9D003CC0  8FB20040   LW S2, 64(SP)
9D003CC4  8FB1003C   LW S1, 60(SP)
9D003CC8  8FB00038   LW S0, 56(SP)
9D003CCC  D7BC0080   LDC1 F28, 128(SP)
9D003CD0  D7BA0078   LDC1 F26, 120(SP)
9D003CD4  D7B80070   LDC1 F24, 112(SP)
9D003CD8  D7B60068   LDC1 F22, 104(SP)
9D003CDC  D7B40060   LDC1 F20, 96(SP)
9D003CE0  03E00008   JR RA
9D003CE4  27BD0090   ADDIU SP, SP, 144
9D003CE8  0F403517   JAL __shgetc
9D003CEC  02002025   OR A0, S0, ZERO
9D003CF0  0040B025   OR S6, V0, ZERO
9D003CF4  1000FFE4   BEQ ZERO, ZERO, 0x9D003C88
9D003CF8  24050008   ADDIU A1, ZERO, 8
9D003CFC  1620000B   BNE S1, ZERO, 0x9D003D2C
9D003D00  3C159D01   LUI S5, -25343
9D003D04  26B51D7C   ADDIU S5, S5, 7548
9D003D08  241E0002   ADDIU FP, ZERO, 2
9D003D0C  24050003   ADDIU A1, ZERO, 3
9D003D10  02B11821   ADDU V1, S5, S1
9D003D14  80630000   LB V1, 0(V1)
9D003D18  36C20020   ORI V0, S6, 32
9D003D1C  1043000A   BEQ V0, V1, 0x9D003D48
9D003D20  00000000   NOP
9D003D24  12200069   BEQ S1, ZERO, 0x9D003ECC
9D003D28  24020030   ADDIU V0, ZERO, 48
9D003D2C  8E02004C   LW V0, 76(S0)
9D003D30  10400053   BEQ V0, ZERO, 0x9D003E80
9D003D34  3C028000   LUI V0, -32768
9D003D38  8E02003C   LW V0, 60(S0)
9D003D3C  2442FFFF   ADDIU V0, V0, -1
9D003D40  1000004E   BEQ ZERO, ZERO, 0x9D003E7C
9D003D44  AE02003C   SW V0, 60(S0)
9D003D48  523E0009   BEQL S1, FP, 0x9D003D70
9D003D4C  26310001   ADDIU S1, S1, 1
9D003D50  8E02003C   LW V0, 60(S0)
9D003D54  8E03004C   LW V1, 76(S0)
9D003D58  0043182B   SLTU V1, V0, V1
9D003D5C  1060000F   BEQ V1, ZERO, 0x9D003D9C
9D003D60  24430001   ADDIU V1, V0, 1
9D003D64  AE03003C   SW V1, 60(S0)
9D003D68  90560000   LBU S6, 0(V0)
9D003D6C  26310001   ADDIU S1, S1, 1
9D003D70  1625FFE8   BNE S1, A1, 0x9D003D14
9D003D74  02B11821   ADDU V1, S5, S1
9D003D78  8E03003C   LW V1, 60(S0)
9D003D7C  8E02004C   LW V0, 76(S0)
9D003D80  0062102B   SLTU V0, V1, V0
9D003D84  5440000A   BNEL V0, ZERO, 0x9D003DB0
9D003D88  24620001   ADDIU V0, V1, 1
9D003D8C  0F403517   JAL __shgetc
9D003D90  02002025   OR A0, S0, ZERO
9D003D94  10000009   BEQ ZERO, ZERO, 0x9D003DBC
9D003D98  38420028   XORI V0, V0, 40
9D003D9C  0F403517   JAL __shgetc
9D003DA0  02002025   OR A0, S0, ZERO
9D003DA4  0040B025   OR S6, V0, ZERO
9D003DA8  1000FFF0   BEQ ZERO, ZERO, 0x9D003D6C
9D003DAC  24050003   ADDIU A1, ZERO, 3
9D003DB0  AE02003C   SW V0, 60(S0)
9D003DB4  90620000   LBU V0, 0(V1)
9D003DB8  38420028   XORI V0, V0, 40
9D003DBC  0002102B   SLTU V0, ZERO, V0
9D003DC0  14400017   BNE V0, ZERO, 0x9D003E20
9D003DC4  24110001   ADDIU S1, ZERO, 1
9D003DC8  2412FFDF   ADDIU S2, ZERO, -33
9D003DCC  2414005F   ADDIU S4, ZERO, 95
9D003DD0  8E02003C   LW V0, 60(S0)
9D003DD4  8E03004C   LW V1, 76(S0)
9D003DD8  0043182B   SLTU V1, V0, V1
9D003DDC  10600019   BEQ V1, ZERO, 0x9D003E44
9D003DE0  00000000   NOP
9D003DE4  24430001   ADDIU V1, V0, 1
9D003DE8  AE03003C   SW V1, 60(S0)
9D003DEC  90420000   LBU V0, 0(V0)
9D003DF0  2443FFD0   ADDIU V1, V0, -48
9D003DF4  2C63000A   SLTIU V1, V1, 10
9D003DF8  14600007   BNE V1, ZERO, 0x9D003E18
9D003DFC  00521824   AND V1, V0, S2
9D003E00  2463FFBF   ADDIU V1, V1, -65
9D003E04  2C63001A   SLTIU V1, V1, 26
9D003E08  5460FFF1   BNEL V1, ZERO, 0x9D003DD0
9D003E0C  26310001   ADDIU S1, S1, 1
9D003E10  14540010   BNE V0, S4, 0x9D003E54
9D003E14  24030029   ADDIU V1, ZERO, 41
9D003E18  1000FFED   BEQ ZERO, ZERO, 0x9D003DD0
9D003E1C  26310001   ADDIU S1, S1, 1
9D003E20  8E02004C   LW V0, 76(S0)
9D003E24  54400004   BNEL V0, ZERO, 0x9D003E38
9D003E28  8E02003C   LW V0, 60(S0)
9D003E2C  3C029D01   LUI V0, -25343
9D003E30  1000FF9C   BEQ ZERO, ZERO, 0x9D003CA4
9D003E34  D4400D68   LDC1 F0, 3432(V0)
9D003E38  2442FFFF   ADDIU V0, V0, -1
9D003E3C  1000FFFB   BEQ ZERO, ZERO, 0x9D003E2C
9D003E40  AE02003C   SW V0, 60(S0)
9D003E44  0F403517   JAL __shgetc
9D003E48  02002025   OR A0, S0, ZERO
9D003E4C  1000FFE9   BEQ ZERO, ZERO, 0x9D003DF4
9D003E50  2443FFD0   ADDIU V1, V0, -48
9D003E54  1043FFF6   BEQ V0, V1, 0x9D003E30
9D003E58  3C029D01   LUI V0, -25343
9D003E5C  8E03004C   LW V1, 76(S0)
9D003E60  10600004   BEQ V1, ZERO, 0x9D003E74
9D003E64  00000000   NOP
9D003E68  8E02003C   LW V0, 60(S0)
9D003E6C  2442FFFF   ADDIU V0, V0, -1
9D003E70  AE02003C   SW V0, 60(S0)
9D003E74  16600010   BNE S3, ZERO, 0x9D003EB8
9D003E78  2404FFFF   ADDIU A0, ZERO, -1
9D003E7C  3C028000   LUI V0, -32768
9D003E80  24030016   ADDIU V1, ZERO, 22
9D003E84  AC433598   SW V1, 13720(V0)
9D003E88  00003025   OR A2, ZERO, ZERO
9D003E8C  00003825   OR A3, ZERO, ZERO
9D003E90  0F40448C   JAL __shlim
9D003E94  02002025   OR A0, S0, ZERO
9D003E98  44800000   MTC1 ZERO, F0
9D003E9C  1000FF81   BEQ ZERO, ZERO, 0x9D003CA4
9D003EA0  44E00000   MTHC1 ZERO, F0
9D003EA4  50600005   BEQL V1, ZERO, 0x9D003EBC
9D003EA8  2631FFFF   ADDIU S1, S1, -1
9D003EAC  8E02003C   LW V0, 60(S0)
9D003EB0  2442FFFF   ADDIU V0, V0, -1
9D003EB4  AE02003C   SW V0, 60(S0)
9D003EB8  2631FFFF   ADDIU S1, S1, -1
9D003EBC  1624FFF9   BNE S1, A0, 0x9D003EA4
9D003EC0  3C029D01   LUI V0, -25343
9D003EC4  1000FF77   BEQ ZERO, ZERO, 0x9D003CA4
9D003EC8  D4400D68   LDC1 F0, 3432(V0)
9D003ECC  16C20177   BNE S6, V0, 0x9D0044AC
9D003ED0  02E0A825   OR S5, S7, ZERO
9D003ED4  8E02003C   LW V0, 60(S0)
9D003ED8  8E03004C   LW V1, 76(S0)
9D003EDC  0043182B   SLTU V1, V0, V1
9D003EE0  1060003D   BEQ V1, ZERO, 0x9D003FD8
9D003EE4  00000000   NOP
9D003EE8  24430001   ADDIU V1, V0, 1
9D003EEC  AE03003C   SW V1, 60(S0)
9D003EF0  90420000   LBU V0, 0(V0)
9D003EF4  34420020   ORI V0, V0, 32
9D003EF8  24040078   ADDIU A0, ZERO, 120
9D003EFC  14440166   BNE V0, A0, 0x9D004498
9D003F00  8E03004C   LW V1, 76(S0)
9D003F04  8E02003C   LW V0, 60(S0)
9D003F08  0043182B   SLTU V1, V0, V1
9D003F0C  10600036   BEQ V1, ZERO, __floatscan::hexfloat
9D003F10  24430001   ADDIU V1, V0, 1
9D003F14  AE03003C   SW V1, 60(S0)
9D003F18  90420000   LBU V0, 0(V0)
9D003F1C  00004025   OR T0, ZERO, ZERO
9D003F20  24160030   ADDIU S6, ZERO, 48
9D003F24  50560034   BEQL V0, S6, __floatscan::hexfloat
9D003F28  8E02003C   LW V0, 60(S0)
9D003F2C  2403002E   ADDIU V1, ZERO, 46
9D003F30  1043003D   BEQ V0, V1, 0x9D004028
9D003F34  0000F025   OR FP, ZERO, ZERO
9D003F38  00003025   OR A2, ZERO, ZERO
9D003F3C  00003825   OR A3, ZERO, ZERO
9D003F40  4480B000   MTC1 ZERO, F22
9D003F44  3C049D01   LUI A0, -25343
9D003F48  3C169D01   LUI S6, -25343
9D003F4C  44E0B000   MTHC1 ZERO, F22
9D003F50  D49A0D50   LDC1 F26, 3408(A0)
9D003F54  3C049D01   LUI A0, -25343
9D003F58  D6D80D38   LDC1 F24, 3384(S6)
9D003F5C  D49C0D78   LDC1 F28, 3448(A0)
9D003F60  4620B506   MOV.D F20, F22
9D003F64  00001825   OR V1, ZERO, ZERO
9D003F68  00002825   OR A1, ZERO, ZERO
9D003F6C  00005825   OR T3, ZERO, ZERO
9D003F70  240A002E   ADDIU T2, ZERO, 46
9D003F74  2444FFD0   ADDIU A0, V0, -48
9D003F78  2C89000A   SLTIU T1, A0, 10
9D003F7C  1520004F   BNE T1, ZERO, __floatscan::hexfloat
9D003F80  34490020   ORI T1, V0, 32
9D003F84  2529FF9F   ADDIU T1, T1, -97
9D003F88  2D290006   SLTIU T1, T1, 6
9D003F8C  1520004B   BNE T1, ZERO, __floatscan::hexfloat
9D003F90  00000000   NOP
9D003F94  104A004B   BEQ V0, T2, 0x9D0040C4
9D003F98  00000000   NOP
9D003F9C  55000093   BNEL T0, ZERO, __floatscan::hexfloat
9D003FA0  0067F00A   MOVZ FP, V1, A3
9D003FA4  8E02004C   LW V0, 76(S0)
9D003FA8  1040014C   BEQ V0, ZERO, __floatscan::hexfloat
9D003FAC  00000000   NOP
9D003FB0  12600086   BEQ S3, ZERO, __floatscan::hexfloat
9D003FB4  8E02003C   LW V0, 60(S0)
9D003FB8  54E00002   BNEL A3, ZERO, 0x9D003FC4
9D003FBC  2442FFFD   ADDIU V0, V0, -3
9D003FC0  2442FFFE   ADDIU V0, V0, -2
9D003FC4  AE02003C   SW V0, 60(S0)
9D003FC8  44920000   MTC1 S2, F0
9D003FCC  46800021   CVT.D.W F0, F0
9D003FD0  1000FF34   BEQ ZERO, ZERO, 0x9D003CA4
9D003FD4  46340002   MUL.D F0, F0, F20
9D003FD8  0F403517   JAL __shgetc
9D003FDC  02002025   OR A0, S0, ZERO
9D003FE0  1000FFC5   BEQ ZERO, ZERO, 0x9D003EF8
9D003FE4  34420020   ORI V0, V0, 32
9D003FE8  0F403517   JAL __shgetc
9D003FEC  02002025   OR A0, S0, ZERO
9D003FF0  1000FFCB   BEQ ZERO, ZERO, __floatscan::hexfloat
9D003FF4  00004025   OR T0, ZERO, ZERO
9D003FF8  8E03004C   LW V1, 76(S0)
9D003FFC  0043182B   SLTU V1, V0, V1
9D004000  10600005   BEQ V1, ZERO, 0x9D004018
9D004004  24430001   ADDIU V1, V0, 1
9D004008  AE03003C   SW V1, 60(S0)
9D00400C  90420000   LBU V0, 0(V0)
9D004010  1000FFC4   BEQ ZERO, ZERO, 0x9D003F24
9D004014  24080001   ADDIU T0, ZERO, 1
9D004018  0F403517   JAL __shgetc
9D00401C  02002025   OR A0, S0, ZERO
9D004020  1000FFC0   BEQ ZERO, ZERO, 0x9D003F24
9D004024  24080001   ADDIU T0, ZERO, 1
9D004028  8E02003C   LW V0, 60(S0)
9D00402C  8E03004C   LW V1, 76(S0)
9D004030  0043182B   SLTU V1, V0, V1
9D004034  1060000A   BEQ V1, ZERO, __floatscan::hexfloat
9D004038  24430001   ADDIU V1, V0, 1
9D00403C  AE03003C   SW V1, 60(S0)
9D004040  90420000   LBU V0, 0(V0)
9D004044  0000F025   OR FP, ZERO, ZERO
9D004048  00003025   OR A2, ZERO, ZERO
9D00404C  24160030   ADDIU S6, ZERO, 48
9D004050  50560008   BEQL V0, S6, __floatscan::hexfloat
9D004054  8E02003C   LW V0, 60(S0)
9D004058  1000FFB9   BEQ ZERO, ZERO, 0x9D003F40
9D00405C  24070001   ADDIU A3, ZERO, 1
9D004060  02002025   OR A0, S0, ZERO
9D004064  0F403517   JAL __shgetc
9D004068  AFA80018   SW T0, 24(SP)
9D00406C  1000FFF5   BEQ ZERO, ZERO, 0x9D004044
9D004070  8FA80018   LW T0, 24(SP)
9D004074  8E03004C   LW V1, 76(S0)
9D004078  0043182B   SLTU V1, V0, V1
9D00407C  1060000A   BEQ V1, ZERO, __floatscan::hexfloat
9D004080  24430001   ADDIU V1, V0, 1
9D004084  AE03003C   SW V1, 60(S0)
9D004088  90420000   LBU V0, 0(V0)
9D00408C  27C4FFFF   ADDIU A0, FP, -1
9D004090  009E182B   SLTU V1, A0, FP
9D004094  24C6FFFF   ADDIU A2, A2, -1
9D004098  0080F025   OR FP, A0, ZERO
9D00409C  00663021   ADDU A2, V1, A2
9D0040A0  1000FFEB   BEQ ZERO, ZERO, 0x9D004050
9D0040A4  24080001   ADDIU T0, ZERO, 1
9D0040A8  02002025   OR A0, S0, ZERO
9D0040AC  0F403517   JAL __shgetc
9D0040B0  AFA60018   SW A2, 24(SP)
9D0040B4  1000FFF5   BEQ ZERO, ZERO, 0x9D00408C
9D0040B8  8FA60018   LW A2, 24(SP)
9D0040BC  544A0011   BNEL V0, T2, __floatscan::hexfloat
9D0040C0  2848003A   SLTI T0, V0, 58
9D0040C4  14E00109   BNE A3, ZERO, __floatscan::hexfloat
9D0040C8  00604825   OR T1, V1, ZERO
9D0040CC  00A06025   OR T4, A1, ZERO
9D0040D0  24070001   ADDIU A3, ZERO, 1
9D0040D4  8E02003C   LW V0, 60(S0)
9D0040D8  8E04004C   LW A0, 76(S0)
9D0040DC  0044202B   SLTU A0, V0, A0
9D0040E0  10800028   BEQ A0, ZERO, __floatscan::hexfloat
9D0040E4  24440001   ADDIU A0, V0, 1
9D0040E8  AE04003C   SW A0, 60(S0)
9D0040EC  90420000   LBU V0, 0(V0)
9D0040F0  0060F025   OR FP, V1, ZERO
9D0040F4  00A03025   OR A2, A1, ZERO
9D0040F8  01201825   OR V1, T1, ZERO
9D0040FC  1000FF9D   BEQ ZERO, ZERO, 0x9D003F74
9D004100  01802825   OR A1, T4, ZERO
9D004104  15000002   BNE T0, ZERO, 0x9D004110
9D004108  34420020   ORI V0, V0, 32
9D00410C  2444FFA9   ADDIU A0, V0, -87
9D004110  1CA00015   BGTZ A1, __floatscan::hexfloat
9D004114  00000000   NOP
9D004118  54A00005   BNEL A1, ZERO, 0x9D004130
9D00411C  00118900   SLL S1, S1, 4
9D004120  2C620008   SLTIU V0, V1, 8
9D004124  1040000A   BEQ V0, ZERO, __floatscan::hexfloat
9D004128  2C62000E   SLTIU V0, V1, 14
9D00412C  00118900   SLL S1, S1, 4
9D004130  00918821   ADDU S1, A0, S1
9D004134  24690001   ADDIU T1, V1, 1
9D004138  0123182B   SLTU V1, T1, V1
9D00413C  00656021   ADDU T4, V1, A1
9D004140  24080001   ADDIU T0, ZERO, 1
9D004144  03C01825   OR V1, FP, ZERO
9D004148  1000FFE2   BEQ ZERO, ZERO, 0x9D0040D4
9D00414C  00C02825   OR A1, A2, ZERO
9D004150  10400005   BEQ V0, ZERO, __floatscan::hexfloat
9D004154  44840000   MTC1 A0, F0
9D004158  463CC602   MUL.D F24, F24, F28
9D00415C  46800021   CVT.D.W F0, F0
9D004160  1000FFF4   BEQ ZERO, ZERO, 0x9D004134
9D004164  4ED805A1   MADD.D F22, F22, F0, F24
9D004168  1080FFF3   BEQ A0, ZERO, 0x9D004138
9D00416C  24690001   ADDIU T1, V1, 1
9D004170  5560FFF2   BNEL T3, ZERO, 0x9D00413C
9D004174  0123182B   SLTU V1, T1, V1
9D004178  4EDAC5A1   MADD.D F22, F22, F24, F26
9D00417C  1000FFEE   BEQ ZERO, ZERO, 0x9D004138
9D004180  240B0001   ADDIU T3, ZERO, 1
9D004184  02002025   OR A0, S0, ZERO
9D004188  AFAC0030   SW T4, 48(SP)
9D00418C  AFA9002C   SW T1, 44(SP)
9D004190  AFA50028   SW A1, 40(SP)
9D004194  AFA30024   SW V1, 36(SP)
9D004198  AFA80020   SW T0, 32(SP)
9D00419C  AFAB001C   SW T3, 28(SP)
9D0041A0  0F403517   JAL __shgetc
9D0041A4  AFA70018   SW A3, 24(SP)
9D0041A8  240A002E   ADDIU T2, ZERO, 46
9D0041AC  8FAC0030   LW T4, 48(SP)
9D0041B0  8FA9002C   LW T1, 44(SP)
9D0041B4  8FA50028   LW A1, 40(SP)
9D0041B8  8FA30024   LW V1, 36(SP)
9D0041BC  8FA80020   LW T0, 32(SP)
9D0041C0  8FAB001C   LW T3, 28(SP)
9D0041C4  1000FFCA   BEQ ZERO, ZERO, 0x9D0040F0
9D0041C8  8FA70018   LW A3, 24(SP)
9D0041CC  2442FFFF   ADDIU V0, V0, -1
9D0041D0  AE02003C   SW V0, 60(S0)
9D0041D4  00003025   OR A2, ZERO, ZERO
9D0041D8  00003825   OR A3, ZERO, ZERO
9D0041DC  0F40448C   JAL __shlim
9D0041E0  02002025   OR A0, S0, ZERO
9D0041E4  1000FF79   BEQ ZERO, ZERO, 0x9D003FCC
9D0041E8  44920000   MTC1 S2, F0
9D0041EC  00A7300A   MOVZ A2, A1, A3
9D0041F0  5CA00007   BGTZL A1, 0x9D004210
9D0041F4  34420020   ORI V0, V0, 32
9D0041F8  14A00018   BNE A1, ZERO, __floatscan::hexfloat
9D0041FC  24640001   ADDIU A0, V1, 1
9D004200  2C640008   SLTIU A0, V1, 8
9D004204  14800015   BNE A0, ZERO, __floatscan::hexfloat
9D004208  24640001   ADDIU A0, V1, 1
9D00420C  34420020   ORI V0, V0, 32
9D004210  24030070   ADDIU V1, ZERO, 112
9D004214  5443003C   BNEL V0, V1, __floatscan::hexfloat
9D004218  8E02004C   LW V0, 76(S0)
9D00421C  02602825   OR A1, S3, ZERO
9D004220  02002025   OR A0, S0, ZERO
9D004224  0F4027FA   JAL scanexp
9D004228  AFA60018   SW A2, 24(SP)
9D00422C  14400013   BNE V0, ZERO, 0x9D00427C
9D004230  8FA60018   LW A2, 24(SP)
9D004234  3C048000   LUI A0, -32768
9D004238  14640010   BNE V1, A0, 0x9D00427C
9D00423C  00000000   NOP
9D004240  5260FF12   BEQL S3, ZERO, 0x9D003E8C
9D004244  00003025   OR A2, ZERO, ZERO
9D004248  8E03004C   LW V1, 76(S0)
9D00424C  54600008   BNEL V1, ZERO, __floatscan::hexfloat
9D004250  8E03003C   LW V1, 60(S0)
9D004254  10000008   BEQ ZERO, ZERO, 0x9D004278
9D004258  00001025   OR V0, ZERO, ZERO
9D00425C  0083382B   SLTU A3, A0, V1
9D004260  00118900   SLL S1, S1, 4
9D004264  00801825   OR V1, A0, ZERO
9D004268  1000FFE1   BEQ ZERO, ZERO, 0x9D0041F0
9D00426C  00E52821   ADDU A1, A3, A1
9D004270  2463FFFF   ADDIU V1, V1, -1
9D004274  AE03003C   SW V1, 60(S0)
9D004278  00001825   OR V1, ZERO, ZERO
9D00427C  1220FF53   BEQ S1, ZERO, 0x9D003FCC
9D004280  44920000   MTC1 S2, F0
9D004284  27C4FFF8   ADDIU A0, FP, -8
9D004288  009EF02B   SLTU FP, A0, FP
9D00428C  24C6FFFF   ADDIU A2, A2, -1
9D004290  03C6F021   ADDU FP, FP, A2
9D004294  00042F82   SRL A1, A0, 30
9D004298  001EF080   SLL FP, FP, 2
9D00429C  00042080   SLL A0, A0, 2
9D0042A0  00BEF025   OR FP, A1, FP
9D0042A4  00821021   ADDU V0, A0, V0
9D0042A8  0044202B   SLTU A0, V0, A0
9D0042AC  03C31821   ADDU V1, FP, V1
9D0042B0  00142823   SUBU A1, ZERO, S4
9D0042B4  00831821   ADDU V1, A0, V1
9D0042B8  000527C3   SRA A0, A1, 31
9D0042BC  0083382A   SLT A3, A0, V1
9D0042C0  00408025   OR S0, V0, ZERO
9D0042C4  14E00006   BNE A3, ZERO, 0x9D0042E0
9D0042C8  00603025   OR A2, V1, ZERO
9D0042CC  14640014   BNE V1, A0, __floatscan::hexfloat
9D0042D0  2684FF96   ADDIU A0, S4, -106
9D0042D4  00A2282B   SLTU A1, A1, V0
9D0042D8  50A00012   BEQL A1, ZERO, 0x9D004324
9D0042DC  00042FC3   SRA A1, A0, 31
9D0042E0  3C028000   LUI V0, -32768
9D0042E4  24030022   ADDIU V1, ZERO, 34
9D0042E8  AC433598   SW V1, 13720(V0)
9D0042EC  3C029D01   LUI V0, -25343
9D0042F0  44920000   MTC1 S2, F0
9D0042F4  D4420D20   LDC1 F2, 3360(V0)
9D0042F8  46800021   CVT.D.W F0, F0
9D0042FC  46220002   MUL.D F0, F0, F2
9D004300  1000FE68   BEQ ZERO, ZERO, 0x9D003CA4
9D004304  46220002   MUL.D F0, F0, F2
9D004308  5040FFDB   BEQL V0, ZERO, 0x9D004278
9D00430C  00001025   OR V0, ZERO, ZERO
9D004310  8E02003C   LW V0, 60(S0)
9D004314  2442FFFF   ADDIU V0, V0, -1
9D004318  1000FFCE   BEQ ZERO, ZERO, 0x9D004254
9D00431C  AE02003C   SW V0, 60(S0)
9D004320  00042FC3   SRA A1, A0, 31
9D004324  0065382A   SLT A3, V1, A1
9D004328  54E00007   BNEL A3, ZERO, 0x9D004348
9D00432C  3C028000   LUI V0, -32768
9D004330  54A30056   BNEL A1, V1, __floatscan::hexfloat
9D004334  3C029D01   LUI V0, -25343
9D004338  0044202B   SLTU A0, V0, A0
9D00433C  10800053   BEQ A0, ZERO, __floatscan::hexfloat
9D004340  3C029D01   LUI V0, -25343
9D004344  3C028000   LUI V0, -32768
9D004348  24030022   ADDIU V1, ZERO, 34
9D00434C  44920000   MTC1 S2, F0
9D004350  AC433598   SW V1, 13720(V0)
9D004354  3C029D01   LUI V0, -25343
9D004358  46800021   CVT.D.W F0, F0
9D00435C  1000FFE7   BEQ ZERO, ZERO, 0x9D0042FC
9D004360  D4420D28   LDC1 F2, 3368(V0)
9D004364  45000047   BC1F 0x9D004484
9D004368  00118840   SLL S1, S1, 1
9D00436C  4622B101   SUB.D F4, F22, F2
9D004370  26310001   ADDIU S1, S1, 1
9D004374  4624B580   ADD.D F22, F22, F4
9D004378  2604FFFF   ADDIU A0, S0, -1
9D00437C  0090102B   SLTU V0, A0, S0
9D004380  24C3FFFF   ADDIU V1, A2, -1
9D004384  00808025   OR S0, A0, ZERO
9D004388  00433021   ADDU A2, V0, V1
9D00438C  0623FFF5   BGEZL S1, __floatscan::hexfloat
9D004390  4636003E   C.LE.D F0, F22
9D004394  26040020   ADDIU A0, S0, 32
9D004398  0090102B   SLTU V0, A0, S0
9D00439C  00461821   ADDU V1, V0, A2
9D0043A0  00942823   SUBU A1, A0, S4
9D0043A4  001417C3   SRA V0, S4, 31
9D0043A8  00621023   SUBU V0, V1, V0
9D0043AC  0085202B   SLTU A0, A0, A1
9D0043B0  00173FC3   SRA A3, S7, 31
9D0043B4  00441023   SUBU V0, V0, A0
9D0043B8  44920000   MTC1 S2, F0
9D0043BC  0047182A   SLT V1, V0, A3
9D0043C0  14600006   BNE V1, ZERO, 0x9D0043DC
9D0043C4  46800621   CVT.D.W F24, F0
9D0043C8  54E20009   BNEL A3, V0, 0x9D0043F0
9D0043CC  44800000   MTC1 ZERO, F0
9D0043D0  00B7B82B   SLTU S7, A1, S7
9D0043D4  52E00006   BEQL S7, ZERO, 0x9D0043F0
9D0043D8  44800000   MTC1 ZERO, F0
9D0043DC  0214A023   SUBU S4, S0, S4
9D0043E0  26950020   ADDIU S5, S4, 32
9D0043E4  06A20005   BLTZL S5, 0x9D0043FC
9D0043E8  0000A825   OR S5, ZERO, ZERO
9D0043EC  44800000   MTC1 ZERO, F0
9D0043F0  2AA20035   SLTI V0, S5, 53
9D0043F4  10400013   BEQ V0, ZERO, 0x9D004444
9D0043F8  44E00000   MTHC1 ZERO, F0
9D0043FC  D6CC0D38   LDC1 F12, 3384(S6)
9D004400  24060054   ADDIU A2, ZERO, 84
9D004404  0F404096   JAL scalbn
9D004408  00D53023   SUBU A2, A2, S5
9D00440C  46200306   MOV.D F12, F0
9D004410  4620C386   MOV.D F14, F24
9D004414  0F40470C   JAL copysignl
9D004418  2AB50020   SLTI S5, S5, 32
9D00441C  12A00009   BEQ S5, ZERO, 0x9D004444
9D004420  4634B132   C.EQ.D 1, F22, F20
9D004424  45050008   BC1T 1, 0x9D004448
9D004428  44910800   MTC1 S1, F1
9D00442C  32220001   ANDI V0, S1, 1
9D004430  14400006   BNE V0, ZERO, 0x9D00444C
9D004434  00001825   OR V1, ZERO, ZERO
9D004438  4480B000   MTC1 ZERO, F22
9D00443C  26310001   ADDIU S1, S1, 1
9D004440  44E0B000   MTHC1 ZERO, F22
9D004444  44910800   MTC1 S1, F1
9D004448  00001825   OR V1, ZERO, ZERO
9D00444C  44E30800   MTHC1 V1, F1
9D004450  46A00B21   CVT.D.L F12, F1
9D004454  4C186321   MADD.D F12, F0, F12, F24
9D004458  4D96C321   MADD.D F12, F12, F24, F22
9D00445C  46206301   SUB.D F12, F12, F0
9D004460  46346232   C.EQ.D 2, F12, F20
9D004464  45080003   BC1F 2, 0x9D004474
9D004468  3C028000   LUI V0, -32768
9D00446C  24030022   ADDIU V1, ZERO, 34
9D004470  AC433598   SW V1, 13720(V0)
9D004474  0F404721   JAL scalbnl
9D004478  02003025   OR A2, S0, ZERO
9D00447C  1000FE0A   BEQ ZERO, ZERO, 0x9D003CA8
9D004480  8FBF005C   LW RA, 92(SP)
9D004484  1000FFBC   BEQ ZERO, ZERO, 0x9D004378
9D004488  4636B580   ADD.D F22, F22, F22
9D00448C  D4400D50   LDC1 F0, 3408(V0)
9D004490  1000FFBE   BEQ ZERO, ZERO, 0x9D00438C
9D004494  D6C20D38   LDC1 F2, 3384(S6)
9D004498  50600005   BEQL V1, ZERO, 0x9D0044B0
9D00449C  AFB30014   SW S3, 20(SP)
9D0044A0  8E02003C   LW V0, 60(S0)
9D0044A4  2442FFFF   ADDIU V0, V0, -1
9D0044A8  AE02003C   SW V0, 60(S0)
9D0044AC  AFB30014   SW S3, 20(SP)
9D0044B0  AFB20010   SW S2, 16(SP)
9D0044B4  02803825   OR A3, S4, ZERO
9D0044B8  02E03025   OR A2, S7, ZERO
9D0044BC  02C02825   OR A1, S6, ZERO
9D0044C0  0F400BCB   JAL decfloat
9D0044C4  02002025   OR A0, S0, ZERO
9D0044C8  1000FDF7   BEQ ZERO, ZERO, 0x9D003CA8
9D0044CC  8FBF005C   LW RA, 92(SP)
9D0044D0  3C029D01   LUI V0, -25343
9D0044D4  1000FDF3   BEQ ZERO, ZERO, 0x9D003CA4
9D0044D8  D4400D60   LDC1 F0, 3424(V0)
9D0044DC  5660FEBB   BNEL S3, ZERO, 0x9D003FCC
9D0044E0  44920000   MTC1 S2, F0
9D0044E4  1000FF3C   BEQ ZERO, ZERO, 0x9D0041D8
9D0044E8  00003025   OR A2, ZERO, ZERO
9D0044EC  1500FF40   BNE T0, ZERO, 0x9D0041F0
9D0044F0  2402002E   ADDIU V0, ZERO, 46
9D0044F4  1000FEAC   BEQ ZERO, ZERO, 0x9D003FA8
9D0044F8  8E02004C   LW V0, 76(S0)
9D0044FC  03E00008   JR RA
9D004500  00000000   NOP
9D009FE8  8C82003C   LW V0, 60(A0)
9D009FEC  8C83004C   LW V1, 76(A0)
9D009FF0  27BDFFD0   ADDIU SP, SP, -48
9D009FF4  AFB3001C   SW S3, 28(SP)
9D009FF8  0043182B   SLTU V1, V0, V1
9D009FFC  AFB20018   SW S2, 24(SP)
9D00A000  AFBF002C   SW RA, 44(SP)
9D00A004  AFB60028   SW S6, 40(SP)
9D00A008  AFB50024   SW S5, 36(SP)
9D00A00C  AFB40020   SW S4, 32(SP)
9D00A010  AFB10014   SW S1, 20(SP)
9D00A014  AFB00010   SW S0, 16(SP)
9D00A018  00809025   OR S2, A0, ZERO
9D00A01C  10600053   BEQ V1, ZERO, scanexp
9D00A020  00A09825   OR S3, A1, ZERO
9D00A024  24430001   ADDIU V1, V0, 1
9D00A028  AC83003C   SW V1, 60(A0)
9D00A02C  90420000   LBU V0, 0(V0)
9D00A030  2444FFD5   ADDIU A0, V0, -43
9D00A034  7C040844   INS A0, ZERO, 1, 1
9D00A038  14800016   BNE A0, ZERO, scanexp
9D00A03C  00008825   OR S1, ZERO, ZERO
9D00A040  3842002D   XORI V0, V0, 45
9D00A044  2C510001   SLTIU S1, V0, 1
9D00A048  8E43004C   LW V1, 76(S2)
9D00A04C  8E42003C   LW V0, 60(S2)
9D00A050  0043182B   SLTU V1, V0, V1
9D00A054  10600049   BEQ V1, ZERO, scanexp
9D00A058  24430001   ADDIU V1, V0, 1
9D00A05C  AE43003C   SW V1, 60(S2)
9D00A060  90420000   LBU V0, 0(V0)
9D00A064  2444FFD0   ADDIU A0, V0, -48
9D00A068  2C84000A   SLTIU A0, A0, 10
9D00A06C  1480000A   BNE A0, ZERO, scanexp
9D00A070  2444FFD0   ADDIU A0, V0, -48
9D00A074  12600009   BEQ S3, ZERO, scanexp
9D00A078  2C84000A   SLTIU A0, A0, 10
9D00A07C  8E43004C   LW V1, 76(S2)
9D00A080  10600006   BEQ V1, ZERO, scanexp
9D00A084  00000000   NOP
9D00A088  8E44003C   LW A0, 60(S2)
9D00A08C  2484FFFF   ADDIU A0, A0, -1
9D00A090  AE44003C   SW A0, 60(S2)
9D00A094  2444FFD0   ADDIU A0, V0, -48
9D00A098  2C84000A   SLTIU A0, A0, 10
9D00A09C  1080003B   BEQ A0, ZERO, scanexp
9D00A0A0  00008025   OR S0, ZERO, ZERO
9D00A0A4  3C130CCC   LUI S3, 3276
9D00A0A8  2414000A   ADDIU S4, ZERO, 10
9D00A0AC  3673CCCC   ORI S3, S3, -13108
9D00A0B0  72141802   MUL V1, S0, S4
9D00A0B4  00628021   ADDU S0, V1, V0
9D00A0B8  8E42003C   LW V0, 60(S2)
9D00A0BC  8E43004C   LW V1, 76(S2)
9D00A0C0  0043182B   SLTU V1, V0, V1
9D00A0C4  10600039   BEQ V1, ZERO, scanexp
9D00A0C8  2610FFD0   ADDIU S0, S0, -48
9D00A0CC  24430001   ADDIU V1, V0, 1
9D00A0D0  AE43003C   SW V1, 60(S2)
9D00A0D4  90420000   LBU V0, 0(V0)
9D00A0D8  2444FFD0   ADDIU A0, V0, -48
9D00A0DC  2C84000A   SLTIU A0, A0, 10
9D00A0E0  10800003   BEQ A0, ZERO, scanexp
9D00A0E4  0213182A   SLT V1, S0, S3
9D00A0E8  1460FFF2   BNE V1, ZERO, scanexp
9D00A0EC  72141802   MUL V1, S0, S4
9D00A0F0  3C140147   LUI S4, 327
9D00A0F4  3694AE15   ORI S4, S4, -20971
9D00A0F8  3C157AE1   LUI S5, 31457
9D00A0FC  00109FC3   SRA S3, S0, 31
9D00A100  2696FFFF   ADDIU S6, S4, -1
9D00A104  26B547AE   ADDIU S5, S5, 18350
9D00A108  2444FFD0   ADDIU A0, V0, -48
9D00A10C  2C84000A   SLTIU A0, A0, 10
9D00A110  14800043   BNE A0, ZERO, scanexp
9D00A114  8E46004C   LW A2, 76(S2)
9D00A118  8E42004C   LW V0, 76(S2)
9D00A11C  54400058   BNEL V0, ZERO, scanexp
9D00A120  8E44003C   LW A0, 60(S2)
9D00A124  12200006   BEQ S1, ZERO, scanexp
9D00A128  8FBF002C   LW RA, 44(SP)
9D00A12C  00108023   SUBU S0, ZERO, S0
9D00A130  0010202B   SLTU A0, ZERO, S0
9D00A134  00131023   SUBU V0, ZERO, S3
9D00A138  00449823   SUBU S3, V0, A0
9D00A13C  8FBF002C   LW RA, 44(SP)
9D00A140  02001025   OR V0, S0, ZERO
9D00A144  02601825   OR V1, S3, ZERO
9D00A148  8FB60028   LW S6, 40(SP)
9D00A14C  8FB50024   LW S5, 36(SP)
9D00A150  8FB40020   LW S4, 32(SP)
9D00A154  8FB3001C   LW S3, 28(SP)
9D00A158  8FB20018   LW S2, 24(SP)
9D00A15C  8FB10014   LW S1, 20(SP)
9D00A160  8FB00010   LW S0, 16(SP)
9D00A164  03E00008   JR RA
9D00A168  27BD0030   ADDIU SP, SP, 48
9D00A16C  0F403517   JAL __shgetc
9D00A170  00000000   NOP
9D00A174  1000FFAF   BEQ ZERO, ZERO, scanexp
9D00A178  2444FFD5   ADDIU A0, V0, -43
9D00A17C  0F403517   JAL __shgetc
9D00A180  02402025   OR A0, S2, ZERO
9D00A184  1000FFB8   BEQ ZERO, ZERO, scanexp
9D00A188  2444FFD0   ADDIU A0, V0, -48
9D00A18C  8E42004C   LW V0, 76(S2)
9D00A190  10400004   BEQ V0, ZERO, scanexp
9D00A194  00000000   NOP
9D00A198  8E42003C   LW V0, 60(S2)
9D00A19C  2442FFFF   ADDIU V0, V0, -1
9D00A1A0  AE42003C   SW V0, 60(S2)
9D00A1A4  1000FFE5   BEQ ZERO, ZERO, scanexp
9D00A1A8  3C138000   LUI S3, -32768
9D00A1AC  0F403517   JAL __shgetc
9D00A1B0  02402025   OR A0, S2, ZERO
9D00A1B4  1000FFC9   BEQ ZERO, ZERO, scanexp
9D00A1B8  2444FFD0   ADDIU A0, V0, -48
9D00A1BC  00700019   MULTU 0, V1, S0
9D00A1C0  00002012   MFLO A0
9D00A1C4  00002810   MFHI A1
9D00A1C8  70733802   MUL A3, V1, S3
9D00A1CC  00E52821   ADDU A1, A3, A1
9D00A1D0  00023FC3   SRA A3, V0, 31
9D00A1D4  00821021   ADDU V0, A0, V0
9D00A1D8  0044182B   SLTU V1, V0, A0
9D00A1DC  8E44003C   LW A0, 60(S2)
9D00A1E0  00A73821   ADDU A3, A1, A3
9D00A1E4  00671821   ADDU V1, V1, A3
9D00A1E8  2450FFD0   ADDIU S0, V0, -48
9D00A1EC  0202102B   SLTU V0, S0, V0
9D00A1F0  2463FFFF   ADDIU V1, V1, -1
9D00A1F4  0086302B   SLTU A2, A0, A2
9D00A1F8  10C00005   BEQ A2, ZERO, scanexp
9D00A1FC  00439821   ADDU S3, V0, V1
9D00A200  24820001   ADDIU V0, A0, 1
9D00A204  AE42003C   SW V0, 60(S2)
9D00A208  1000FFBF   BEQ ZERO, ZERO, scanexp
9D00A20C  90820000   LBU V0, 0(A0)
9D00A210  0F403517   JAL __shgetc
9D00A214  02402025   OR A0, S2, ZERO
9D00A218  1000FFBC   BEQ ZERO, ZERO, scanexp
9D00A21C  2444FFD0   ADDIU A0, V0, -48
9D00A220  0274182A   SLT V1, S3, S4
9D00A224  50600007   BEQL V1, ZERO, scanexp
9D00A228  2442FFD0   ADDIU V0, V0, -48
9D00A22C  1676FFE3   BNE S3, S6, scanexp
9D00A230  2403000A   ADDIU V1, ZERO, 10
9D00A234  0215182B   SLTU V1, S0, S5
9D00A238  1460FFE0   BNE V1, ZERO, scanexp
9D00A23C  2403000A   ADDIU V1, ZERO, 10
9D00A240  2442FFD0   ADDIU V0, V0, -48
9D00A244  2C42000A   SLTIU V0, V0, 10
9D00A248  1040FFB3   BEQ V0, ZERO, scanexp
9D00A24C  8E44004C   LW A0, 76(S2)
9D00A250  8E45003C   LW A1, 60(S2)
9D00A254  00A4202B   SLTU A0, A1, A0
9D00A258  10800005   BEQ A0, ZERO, scanexp
9D00A25C  00000000   NOP
9D00A260  24A20001   ADDIU V0, A1, 1
9D00A264  AE42003C   SW V0, 60(S2)
9D00A268  1000FFF5   BEQ ZERO, ZERO, scanexp
9D00A26C  90A20000   LBU V0, 0(A1)
9D00A270  0F403517   JAL __shgetc
9D00A274  02402025   OR A0, S2, ZERO
9D00A278  1000FFF2   BEQ ZERO, ZERO, scanexp
9D00A27C  2442FFD0   ADDIU V0, V0, -48
9D00A280  2484FFFF   ADDIU A0, A0, -1
9D00A284  1000FFA7   BEQ ZERO, ZERO, scanexp
9D00A288  AE44003C   SW A0, 60(S2)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/ctype/toupper.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
00000008  00000000   NOP
00000010  00000000   NOP
9D011C14  2483FF9F   ADDIU V1, A0, -97
9D011C18  2C63001A   SLTIU V1, V1, 26
9D011C1C  10600002   BEQ V1, ZERO, 0x9D011C28
9D011C20  00801025   OR V0, A0, ZERO
9D011C24  3082005F   ANDI V0, A0, 95
9D011C28  03E00008   JR RA
9D011C2C  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/src/ctype/tolower.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
00000008  00000000   NOP
00000010  00000000   NOP
9D011BF8  2483FFBF   ADDIU V1, A0, -65
9D011BFC  2C63001A   SLTIU V1, V1, 26
9D011C00  10600002   BEQ V1, ZERO, 0x9D011C0C
9D011C04  00801025   OR V0, A0, ZERO
9D011C08  34820020   ORI V0, A0, 32
9D011C0C  03E00008   JR RA
9D011C10  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/include/ctype.h
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D003B4C  24110020   ADDIU S1, ZERO, 32
9D003B50  8E02003C   LW V0, 60(S0)
9D003B54  8E03004C   LW V1, 76(S0)
9D003B58  0043182B   SLTU V1, V0, V1
9D003B5C  10600039   BEQ V1, ZERO, 0x9D003C44
9D003B60  24430001   ADDIU V1, V0, 1
9D003B64  AE03003C   SW V1, 60(S0)
9D003B68  90560000   LBU S6, 0(V0)
9D003B6C  12D1FFF8   BEQ S6, S1, 0x9D003B50
9D003B70  26C2FFF7   ADDIU V0, S6, -9
9D003B74  2C420005   SLTIU V0, V0, 5
9D003B78  5440FFF6   BNEL V0, ZERO, 0x9D003B54
9D003B7C  8E02003C   LW V0, 60(S0)
9D003B80  2402002B   ADDIU V0, ZERO, 43
9D003B84  12C20005   BEQ S6, V0, 0x9D003B9C
9D003B88  00001025   OR V0, ZERO, ZERO
9D01070C  24050020   ADDIU A1, ZERO, 32
9D010710  80820000   LB V0, 0(A0)
9D010714  1045000E   BEQ V0, A1, 0x9D010750
9D010718  2443FFF7   ADDIU V1, V0, -9
9D01071C  2C630005   SLTIU V1, V1, 5
9D010720  5460FFFB   BNEL V1, ZERO, 0x9D010710
9D010724  24840001   ADDIU A0, A0, 1
9D010728  2403002B   ADDIU V1, ZERO, 43
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/arch/pic32m/math.h
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D006E9C  8FA30024   LW V1, 36(SP)
9D006F4C  3C087FF0   LUI T0, 32752
9D006F50  25030001   ADDIU V1, T0, 1
9D006F54  0043182B   SLTU V1, V0, V1
9D006F58  50600006   BEQL V1, ZERO, __fmt_f_needed
9D006F5C  8FA200A4   LW V0, 164(SP)
9D006F60  1448000F   BNE V0, T0, __fmt_f_needed
9D006F64  D7A10018   LDC1 F1, 24(SP)
9D006F68  1080000E   BEQ A0, ZERO, __fmt_f_needed
9D006F6C  3C119D01   LUI S1, -25343
9D00A80C  3C047FF0   LUI A0, 32752
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/xc32-musl-stdlib/musl/musl-1.1.18/arch/mchp/atomic.h
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000084  00000000   NOP
9D00A328  3C0C076B   LUI T4, 1899
9D00A42C  54A00032   BNEL A1, ZERO, first_set
9D00A430  00052023   SUBU A0, ZERO, A1
9D00A434  00032023   SUBU A0, ZERO, V1
9D00A438  00832024   AND A0, A0, V1
9D00A43C  3582E629   ORI V0, T4, -6615
9D00A440  70822002   MUL A0, A0, V0
9D00A444  000426C2   SRL A0, A0, 27
9D00A448  01042021   ADDU A0, T0, A0
9D00A44C  80860000   LB A2, 0(A0)
9D00A450  24C60020   ADDIU A2, A2, 32
9D00A454  0F4045E8   JAL lock_bin
9D00A458  00C02025   OR A0, A2, ZERO
9D00A4F8  00852024   AND A0, A0, A1
9D00A4FC  3582E629   ORI V0, T4, -6615
9D00A500  70822002   MUL A0, A0, V0
9D00A504  000426C2   SRL A0, A0, 27
9D00A508  01042021   ADDU A0, T0, A0
9D00A50C  1000FFD1   BEQ ZERO, ZERO, 0x9D00A454
9D00A510  80860000   LB A2, 0(A0)
9D00BF00  A0000000   SB ZERO, 0(ZERO)
9D00BF08  8E020000   LW V0, 0(S0)
9D00BFB8  10400004   BEQ V0, ZERO, 0x9D00BFCC
9D00BFBC  00602825   OR A1, V1, ZERO
9D00BFC0  8EA43038   LW A0, 12344(S5)
9D00BFC4  00822025   OR A0, A0, V0
9D00BFC8  AEA43038   SW A0, 12344(S5)
9D00BFCC  50A00005   BEQL A1, ZERO, 0x9D00BFE4
9D00BFD0  26730001   ADDIU S3, S3, 1
9D00BFD4  8E820004   LW V0, 4(S4)
9D00BFD8  00431025   OR V0, V0, V1
9D00BFDC  AE820004   SW V0, 4(S4)
9D00BFE0  26730001   ADDIU S3, S3, 1
9D00F7D0  10400005   BEQ V0, ZERO, unbin
9D00F7D4  00022827   NOR A1, ZERO, V0
9D00F7D8  3C048000   LUI A0, -32768
9D00F7E0  00451024   AND V0, V0, A1
9D00F7E4  AC823038   SW V0, 12344(A0)
9D00F7E8  2402FFFF   ADDIU V0, ZERO, -1
9D00F7EC  10620005   BEQ V1, V0, unbin
9D00F7F0  3C028000   LUI V0, -32768
9D00F7F4  24423038   ADDIU V0, V0, 12344
9D00F7FC  00641824   AND V1, V1, A0
9D00F800  AC430004   SW V1, 4(V0)
9D00F804  8E020004   LW V0, 4(S0)
9D0109E8  10A00003   BEQ A1, ZERO, a_clz_64
9D0109EC  24030020   ADDIU V1, ZERO, 32
9D0109F0  00A02025   OR A0, A1, ZERO
9D0109F4  00001825   OR V1, ZERO, ZERO
9D0109F8  00042C02   SRL A1, A0, 16
9D0109FC  14A00004   BNE A1, ZERO, a_clz_64
9D010A00  00051202   SRL V0, A1, 8
9D010A04  34630010   ORI V1, V1, 16
9D010A08  00802825   OR A1, A0, ZERO
9D010A0C  00051202   SRL V0, A1, 8
9D010A10  14400004   BNE V0, ZERO, a_clz_64
9D010A14  00022102   SRL A0, V0, 4
9D010A18  34630008   ORI V1, V1, 8
9D010A1C  00A01025   OR V0, A1, ZERO
9D010A20  00022102   SRL A0, V0, 4
9D010A24  54800004   BNEL A0, ZERO, a_clz_64
9D010A28  00041082   SRL V0, A0, 2
9D010A2C  34630004   ORI V1, V1, 4
9D010A30  00402025   OR A0, V0, ZERO
9D010A34  00041082   SRL V0, A0, 2
9D010A38  54400004   BNEL V0, ZERO, a_clz_64
9D010A3C  00021042   SRL V0, V0, 1
9D010A40  34630002   ORI V1, V1, 2
9D010A44  00801025   OR V0, A0, ZERO
9D010A48  00021042   SRL V0, V0, 1
9D010A4C  38420001   XORI V0, V0, 1
9D010A50  03E00008   JR RA
9D010A54  00431025   OR V0, V0, V1
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/src/gcc-8-merge/gcc/libgcc/libgcc2.c  ----
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
00000008  00000000   NOP
0000000C  00000000   NOP
00000014  00000000   NOP
00000018  00000000   NOP
0000001C  00000000   NOP
00000020  00000000   NOP
00000024  00000000   NOP
00000028  00000000   NOP
0000002C  00000000   NOP
00000030  00000000   NOP
00000034  00000000   NOP
00000038  00000000   NOP
0000003C  00000000   NOP
00000040  00000000   NOP
00000044  00000000   NOP
00000048  00000000   NOP
00000050  00000000   NOP
00000054  00000000   NOP
00000058  00000000   NOP
0000005C  00000000   NOP
00000060  00000000   NOP
00000064  00000000   NOP
00000068  00000000   NOP
0000006C  00000000   NOP
00000070  00000000   NOP
00000074  00000000   NOP
00000078  00000000   NOP
0000007C  00000000   NOP
00000080  00000000   NOP
00000084  00000000   NOP
00000088  00000000   NOP
0000008C  00000000   NOP
00000090  00000000   NOP
00000094  00000000   NOP
00000098  00000000   NOP
0000009C  00000000   NOP
000000A0  00000000   NOP
000000A4  00000000   NOP
000000A8  00000000   NOP
000000B4  00000000   NOP
000000B8  00000000   NOP
000000BC  00000000   NOP
000000C0  00000000   NOP
000000C4  00000000   NOP
000000D0  00000000   NOP
000000D4  00000000   NOP
000000D8  00000000   NOP
000000DC  00000000   NOP
000000E0  00000000   NOP
000000E4  00000000   NOP
000000E8  00000000   NOP
000000EC  00000000   NOP
000000F0  00000000   NOP
000000F4  00000000   NOP
000000FC  00000000   NOP
00000100  00000000   NOP
00000108  00000000   NOP
0000010C  00000000   NOP
00000110  00000000   NOP
00000114  00000000   NOP
00000118  00000000   NOP
0000011C  00000000   NOP
00000120  00000000   NOP
00000124  00000000   NOP
0000012C  00000000   NOP
00000130  00000000   NOP
00000138  00000000   NOP
0000013C  00000000   NOP
00000140  00000000   NOP
00000144  00000000   NOP
0000014C  00000000   NOP
00000150  00000000   NOP
00000154  00000000   NOP
0000015C  00000000   NOP
00000160  00000000   NOP
00000164  00000000   NOP
00000168  00000000   NOP
0000016C  00000000   NOP
00000170  00000000   NOP
00000174  00000000   NOP
00000178  00000000   NOP
0000017C  00000000   NOP
00000180  00000000   NOP
00000184  00000000   NOP
00000188  00000000   NOP
0000018C  00000000   NOP
00000190  00000000   NOP
00000194  00000000   NOP
00000198  00000000   NOP
000001A4  00000000   NOP
000001A8  00000000   NOP
000001AC  00000000   NOP
000001B0  00000000   NOP
000001B4  00000000   NOP
000001C0  00000000   NOP
000001C4  00000000   NOP
000001C8  00000000   NOP
000001CC  00000000   NOP
000001D0  00000000   NOP
000001D4  00000000   NOP
000001D8  00000000   NOP
000001DC  00000000   NOP
000001E0  00000000   NOP
000001E4  00000000   NOP
000001EC  00000000   NOP
000001F0  00000000   NOP
000001F8  00000000   NOP
000001FC  00000000   NOP
00000200  00000000   NOP
00000204  00000000   NOP
00000208  00000000   NOP
0000020C  00000000   NOP
00000210  00000000   NOP
00000214  00000000   NOP
00000218  00000000   NOP
0000021C  00000000   NOP
00000220  00000000   NOP
00000224  00000000   NOP
00000228  00000000   NOP
0000022C  00000000   NOP
00000230  00000000   NOP
00000234  00000000   NOP
0000023C  00000000   NOP
00000240  00000000   NOP
00000244  00000000   NOP
00000248  00000000   NOP
00000250  00000000   NOP
00000254  00000000   NOP
00000258  00000000   NOP
00000260  00000000   NOP
00000264  00000000   NOP
0000026C  00000000   NOP
00000270  00000000   NOP
00000274  00000000   NOP
0000027C  00000000   NOP
00000284  00000000   NOP
00000288  00000000   NOP
0000028C  00000000   NOP
00000290  00000000   NOP
00000294  00000000   NOP
00000298  00000000   NOP
000002A0  00000000   NOP
000002A4  00000000   NOP
000002A8  00000000   NOP
000002AC  00000000   NOP
000002B0  00000000   NOP
000002B4  00000000   NOP
000002BC  00000000   NOP
000002C0  00000000   NOP
000002C4  00000000   NOP
000002C8  00000000   NOP
000002D0  00000000   NOP
000002D8  00000000   NOP
000002DC  00000000   NOP
000002E0  00000000   NOP
000002E4  00000000   NOP
000002EC  00000000   NOP
000002F0  00000000   NOP
000002F4  00000000   NOP
000002F8  00000000   NOP
000002FC  00000000   NOP
00000300  00000000   NOP
00000304  00000000   NOP
00000308  00000000   NOP
0000030C  00000000   NOP
00000310  00000000   NOP
00000314  00000000   NOP
00000318  00000000   NOP
0000031C  00000000   NOP
00000320  00000000   NOP
00000328  00000000   NOP
0000032C  00000000   NOP
00000330  00000000   NOP
00000334  00000000   NOP
00000338  00000000   NOP
0000033C  00000000   NOP
00000340  00000000   NOP
00000344  00000000   NOP
00000348  00000000   NOP
0000034C  00000000   NOP
00000350  00000000   NOP
00000354  00000000   NOP
00000358  00000000   NOP
0000035C  00000000   NOP
00000360  00000000   NOP
00000364  00000000   NOP
00000368  00000000   NOP
0000036C  00000000   NOP
00000370  00000000   NOP
00000374  00000000   NOP
0000037C  00000000   NOP
00000380  00000000   NOP
00000384  00000000   NOP
00000388  00000000   NOP
00000390  00000000   NOP
00000394  00000000   NOP
00000398  00000000   NOP
0000039C  00000000   NOP
000003A0  00000000   NOP
000003A4  00000000   NOP
000003A8  00000000   NOP
000003B4  00000000   NOP
000003B8  00000000   NOP
000003BC  00000000   NOP
000003C0  00000000   NOP
000003C4  00000000   NOP
000003C8  00000000   NOP
000003D0  00000000   NOP
000003D4  00000000   NOP
000003D8  00000000   NOP
000003DC  00000000   NOP
000003E0  00000000   NOP
000003E4  00000000   NOP
000003E8  00000000   NOP
000003EC  00000000   NOP
000003F0  00000000   NOP
000003F4  00000000   NOP
000003F8  00000000   NOP
00000400  00000000   NOP
00000404  00000000   NOP
00000408  00000000   NOP
0000040C  00000000   NOP
00000410  00000000   NOP
00000414  00000000   NOP
00000418  00000000   NOP
0000041C  00000000   NOP
00000420  00000000   NOP
00000424  00000000   NOP
00000428  00000000   NOP
0000042C  00000000   NOP
00000430  00000000   NOP
00000434  00000000   NOP
00000438  00000000   NOP
0000043C  00000000   NOP
00000440  00000000   NOP
9D008A44  00C04825   OR T1, A2, ZERO
9D008A48  00801025   OR V0, A0, ZERO
9D008A4C  14E00099   BNE A3, ZERO, 0x9D008CB4
9D008A50  00A01825   OR V1, A1, ZERO
9D008A54  00A6302B   SLTU A2, A1, A2
9D008A58  10C00034   BEQ A2, ZERO, 0x9D008B2C
9D008A5C  712A5020   CLZ T2, T1
9D008A60  51400008   BEQL T2, ZERO, 0x9D008A84
9D008A64  00092402   SRL A0, T1, 16
9D008A68  01451804   SLLV V1, A1, T2
9D008A6C  000A2823   SUBU A1, ZERO, T2
9D008A70  00A42806   SRLV A1, A0, A1
9D008A74  01494804   SLLV T1, T1, T2
9D008A78  00A31825   OR V1, A1, V1
9D008A7C  01441004   SLLV V0, A0, T2
9D008A80  00092402   SRL A0, T1, 16
9D008A84  0064001B   DIVU V1, A0
9D008A88  008001F4   TEQ A0, ZERO
9D008A8C  3127FFFF   ANDI A3, T1, -1
9D008A90  00001812   MFLO V1
9D008A94  00002810   MFHI A1
9D008A98  70673002   MUL A2, V1, A3
9D008A9C  00051C00   SLL V1, A1, 16
9D008AA0  00022C02   SRL A1, V0, 16
9D008AA4  00651825   OR V1, V1, A1
9D008AA8  0066282B   SLTU A1, V1, A2
9D008AAC  50A00009   BEQL A1, ZERO, 0x9D008AD4
9D008AB0  00661823   SUBU V1, V1, A2
9D008AB4  00691821   ADDU V1, V1, T1
9D008AB8  0069282B   SLTU A1, V1, T1
9D008ABC  54A00005   BNEL A1, ZERO, 0x9D008AD4
9D008AC0  00661823   SUBU V1, V1, A2
9D008AC4  0066282B   SLTU A1, V1, A2
9D008AC8  54A00001   BNEL A1, ZERO, 0x9D008AD0
9D008ACC  00691821   ADDU V1, V1, T1
9D008AD0  00661823   SUBU V1, V1, A2
9D008AD4  0064001B   DIVU V1, A0
9D008AD8  008001F4   TEQ A0, ZERO
9D008ADC  3042FFFF   ANDI V0, V0, -1
9D008AE0  00001812   MFLO V1
9D008AE4  00003010   MFHI A2
9D008AE8  70672002   MUL A0, V1, A3
9D008AEC  00061C00   SLL V1, A2, 16
9D008AF0  00621025   OR V0, V1, V0
9D008AF4  0044182B   SLTU V1, V0, A0
9D008AF8  50600009   BEQL V1, ZERO, 0x9D008B20
9D008AFC  00441023   SUBU V0, V0, A0
9D008B00  00491021   ADDU V0, V0, T1
9D008B04  0049182B   SLTU V1, V0, T1
9D008B08  54600005   BNEL V1, ZERO, 0x9D008B20
9D008B0C  00441023   SUBU V0, V0, A0
9D008B10  0044182B   SLTU V1, V0, A0
9D008B14  54600001   BNEL V1, ZERO, 0x9D008B1C
9D008B18  00491021   ADDU V0, V0, T1
9D008B1C  00441023   SUBU V0, V0, A0
9D008B20  01421006   SRLV V0, V0, T2
9D008B24  03E00008   JR RA
9D008B28  00001825   OR V1, ZERO, ZERO
9D008B2C  15200005   BNE T1, ZERO, 0x9D008B44
9D008B30  24030001   ADDIU V1, ZERO, 1
9D008B34  0069001B   DIVU V1, T1
9D008B38  012001F4   TEQ T1, ZERO
9D008B3C  00004812   MFLO T1
9D008B40  712A5020   CLZ T2, T1
9D008B44  1540002B   BNE T2, ZERO, 0x9D008BF4
9D008B48  24070020   ADDIU A3, ZERO, 32
9D008B4C  00A92823   SUBU A1, A1, T1
9D008B50  00092402   SRL A0, T1, 16
9D008B54  00A4001B   DIVU A1, A0
9D008B58  008001F4   TEQ A0, ZERO
9D008B5C  3127FFFF   ANDI A3, T1, -1
9D008B60  00002812   MFLO A1
9D008B64  00001810   MFHI V1
9D008B68  70A73002   MUL A2, A1, A3
9D008B6C  00032C00   SLL A1, V1, 16
9D008B70  00021C02   SRL V1, V0, 16
9D008B74  00A32825   OR A1, A1, V1
9D008B78  00A6182B   SLTU V1, A1, A2
9D008B7C  50600009   BEQL V1, ZERO, 0x9D008BA4
9D008B80  00A63023   SUBU A2, A1, A2
9D008B84  00A92821   ADDU A1, A1, T1
9D008B88  00A9182B   SLTU V1, A1, T1
9D008B8C  54600005   BNEL V1, ZERO, 0x9D008BA4
9D008B90  00A63023   SUBU A2, A1, A2
9D008B94  00A6182B   SLTU V1, A1, A2
9D008B98  54600001   BNEL V1, ZERO, 0x9D008BA0
9D008B9C  00A92821   ADDU A1, A1, T1
9D008BA0  00A63023   SUBU A2, A1, A2
9D008BA4  00C4001B   DIVU A2, A0
9D008BA8  008001F4   TEQ A0, ZERO
9D008BAC  3042FFFF   ANDI V0, V0, -1
9D008BB0  00003012   MFLO A2
9D008BB4  00002810   MFHI A1
9D008BB8  70C71802   MUL V1, A2, A3
9D008BBC  00053400   SLL A2, A1, 16
9D008BC0  00C21025   OR V0, A2, V0
9D008BC4  0043202B   SLTU A0, V0, V1
9D008BC8  5080FFD5   BEQL A0, ZERO, 0x9D008B20
9D008BCC  00431023   SUBU V0, V0, V1
9D008BD0  00491021   ADDU V0, V0, T1
9D008BD4  0049202B   SLTU A0, V0, T1
9D008BD8  5480FFD1   BNEL A0, ZERO, 0x9D008B20
9D008BDC  00431023   SUBU V0, V0, V1
9D008BE0  0043202B   SLTU A0, V0, V1
9D008BE4  54800001   BNEL A0, ZERO, 0x9D008BEC
9D008BE8  00491021   ADDU V0, V0, T1
9D008BEC  1000FFCC   BEQ ZERO, ZERO, 0x9D008B20
9D008BF0  00431023   SUBU V0, V0, V1
9D008BF4  00EA3823   SUBU A3, A3, T2
9D008BF8  01494804   SLLV T1, T1, T2
9D008BFC  00E41806   SRLV V1, A0, A3
9D008C00  00093402   SRL A2, T1, 16
9D008C04  00E53806   SRLV A3, A1, A3
9D008C08  00E6001B   DIVU A3, A2
9D008C0C  00C001F4   TEQ A2, ZERO
9D008C10  01451004   SLLV V0, A1, T2
9D008C14  312BFFFF   ANDI T3, T1, -1
9D008C18  00621825   OR V1, V1, V0
9D008C1C  01441004   SLLV V0, A0, T2
9D008C20  00032C02   SRL A1, V1, 16
9D008C24  00003812   MFLO A3
9D008C28  00002010   MFHI A0
9D008C2C  70EB4002   MUL T0, A3, T3
9D008C30  00043C00   SLL A3, A0, 16
9D008C34  00E53825   OR A3, A3, A1
9D008C38  00E8202B   SLTU A0, A3, T0
9D008C3C  50800009   BEQL A0, ZERO, 0x9D008C64
9D008C40  00E83823   SUBU A3, A3, T0
9D008C44  00E93821   ADDU A3, A3, T1
9D008C48  00E9202B   SLTU A0, A3, T1
9D008C4C  54800005   BNEL A0, ZERO, 0x9D008C64
9D008C50  00E83823   SUBU A3, A3, T0
9D008C54  00E8202B   SLTU A0, A3, T0
9D008C58  54800001   BNEL A0, ZERO, 0x9D008C60
9D008C5C  00E93821   ADDU A3, A3, T1
9D008C60  00E83823   SUBU A3, A3, T0
9D008C64  00E6001B   DIVU A3, A2
9D008C68  00C001F4   TEQ A2, ZERO
9D008C6C  3065FFFF   ANDI A1, V1, -1
9D008C70  00003012   MFLO A2
9D008C74  00003810   MFHI A3
9D008C78  00073C00   SLL A3, A3, 16
9D008C7C  00E52825   OR A1, A3, A1
9D008C80  70CB3002   MUL A2, A2, T3
9D008C84  00A6182B   SLTU V1, A1, A2
9D008C88  5060FFB1   BEQL V1, ZERO, 0x9D008B50
9D008C8C  00A62823   SUBU A1, A1, A2
9D008C90  00A92821   ADDU A1, A1, T1
9D008C94  00A9182B   SLTU V1, A1, T1
9D008C98  5460FFAD   BNEL V1, ZERO, 0x9D008B50
9D008C9C  00A62823   SUBU A1, A1, A2
9D008CA0  00A6182B   SLTU V1, A1, A2
9D008CA4  54600001   BNEL V1, ZERO, 0x9D008CAC
9D008CA8  00A92821   ADDU A1, A1, T1
9D008CAC  1000FFA8   BEQ ZERO, ZERO, 0x9D008B50
9D008CB0  00A62823   SUBU A1, A1, A2
9D008CB4  00A7402B   SLTU T0, A1, A3
9D008CB8  1500005E   BNE T0, ZERO, 0x9D008E34
9D008CBC  70EE7020   CLZ T6, A3
9D008CC0  15C0000C   BNE T6, ZERO, 0x9D008CF4
9D008CC4  240B0020   ADDIU T3, ZERO, 32
9D008CC8  00E5402B   SLTU T0, A3, A1
9D008CCC  55000005   BNEL T0, ZERO, 0x9D008CE4
9D008CD0  00861023   SUBU V0, A0, A2
9D008CD4  0086402B   SLTU T0, A0, A2
9D008CD8  15000056   BNE T0, ZERO, 0x9D008E34
9D008CDC  00000000   NOP
9D008CE0  00861023   SUBU V0, A0, A2
9D008CE4  00A72823   SUBU A1, A1, A3
9D008CE8  0082182B   SLTU V1, A0, V0
9D008CEC  03E00008   JR RA
9D008CF0  00A31823   SUBU V1, A1, V1
9D008CF4  016E5823   SUBU T3, T3, T6
9D008CF8  01666006   SRLV T4, A2, T3
9D008CFC  01C73804   SLLV A3, A3, T6
9D008D00  01873825   OR A3, T4, A3
9D008D04  01C51804   SLLV V1, A1, T6
9D008D08  00074C02   SRL T1, A3, 16
9D008D0C  01652806   SRLV A1, A1, T3
9D008D10  00A9001B   DIVU A1, T1
9D008D14  012001F4   TEQ T1, ZERO
9D008D18  01C61004   SLLV V0, A2, T6
9D008D1C  30E8FFFF   ANDI T0, A3, -1
9D008D20  01643006   SRLV A2, A0, T3
9D008D24  00C33025   OR A2, A2, V1
9D008D28  00066402   SRL T4, A2, 16
9D008D2C  01C42004   SLLV A0, A0, T6
9D008D30  00002812   MFLO A1
9D008D34  00005010   MFHI T2
9D008D38  000A5400   SLL T2, T2, 16
9D008D3C  014C5025   OR T2, T2, T4
9D008D40  71051802   MUL V1, T0, A1
9D008D44  0143602B   SLTU T4, T2, V1
9D008D48  1180000A   BEQ T4, ZERO, 0x9D008D74
9D008D4C  00A06825   OR T5, A1, ZERO
9D008D50  01475021   ADDU T2, T2, A3
9D008D54  0147602B   SLTU T4, T2, A3
9D008D58  15800006   BNE T4, ZERO, 0x9D008D74
9D008D5C  24ADFFFF   ADDIU T5, A1, -1
9D008D60  0143602B   SLTU T4, T2, V1
9D008D64  51800004   BEQL T4, ZERO, 0x9D008D78
9D008D68  01435023   SUBU T2, T2, V1
9D008D6C  24ADFFFE   ADDIU T5, A1, -2
9D008D70  01475021   ADDU T2, T2, A3
9D008D74  01435023   SUBU T2, T2, V1
9D008D78  0149001B   DIVU T2, T1
9D008D7C  012001F4   TEQ T1, ZERO
9D008D80  00004812   MFLO T1
9D008D84  00005010   MFHI T2
9D008D88  000A5400   SLL T2, T2, 16
9D008D8C  71091802   MUL V1, T0, T1
9D008D90  30C8FFFF   ANDI T0, A2, -1
9D008D94  01484025   OR T0, T2, T0
9D008D98  0103302B   SLTU A2, T0, V1
9D008D9C  10C0000A   BEQ A2, ZERO, 0x9D008DC8
9D008DA0  01202825   OR A1, T1, ZERO
9D008DA4  01074021   ADDU T0, T0, A3
9D008DA8  0107302B   SLTU A2, T0, A3
9D008DAC  14C00006   BNE A2, ZERO, 0x9D008DC8
9D008DB0  2525FFFF   ADDIU A1, T1, -1
9D008DB4  0103302B   SLTU A2, T0, V1
9D008DB8  10C00004   BEQ A2, ZERO, 0x9D008DCC
9D008DBC  000D6400   SLL T4, T5, 16
9D008DC0  2525FFFE   ADDIU A1, T1, -2
9D008DC4  01074021   ADDU T0, T0, A3
9D008DC8  000D6400   SLL T4, T5, 16
9D008DCC  01856025   OR T4, T4, A1
9D008DD0  01820019   MULTU 0, T4, V0
9D008DD4  01034023   SUBU T0, T0, V1
9D008DD8  00006810   MFHI T5
9D008DDC  010D282B   SLTU A1, T0, T5
9D008DE0  01A01825   OR V1, T5, ZERO
9D008DE4  00006012   MFLO T4
9D008DE8  14A00006   BNE A1, ZERO, 0x9D008E04
9D008DEC  00003012   MFLO A2
9D008DF0  150D0009   BNE T0, T5, 0x9D008E18
9D008DF4  00863023   SUBU A2, A0, A2
9D008DF8  008C282B   SLTU A1, A0, T4
9D008DFC  50A00007   BEQL A1, ZERO, 0x9D008E1C
9D008E00  01034023   SUBU T0, T0, V1
9D008E04  01823023   SUBU A2, T4, V0
9D008E08  01A73823   SUBU A3, T5, A3
9D008E0C  0186602B   SLTU T4, T4, A2
9D008E10  00EC1823   SUBU V1, A3, T4
9D008E14  00863023   SUBU A2, A0, A2
9D008E18  01034023   SUBU T0, T0, V1
9D008E1C  0086182B   SLTU V1, A0, A2
9D008E20  01031823   SUBU V1, T0, V1
9D008E24  01631004   SLLV V0, V1, T3
9D008E28  01C63006   SRLV A2, A2, T6
9D008E2C  00461025   OR V0, V0, A2
9D008E30  01C31806   SRLV V1, V1, T6
9D008E34  03E00008   JR RA
9D008E38  00000000   NOP
9D008E3C  00C04025   OR T0, A2, ZERO
9D008E40  00E01825   OR V1, A3, ZERO
9D008E44  00805025   OR T2, A0, ZERO
9D008E48  14E000A3   BNE A3, ZERO, 0x9D0090D8
9D008E4C  00A01025   OR V0, A1, ZERO
9D008E50  00A6302B   SLTU A2, A1, A2
9D008E54  10C00034   BEQ A2, ZERO, 0x9D008F28
9D008E58  00000000   NOP
9D008E5C  71052820   CLZ A1, T0
9D008E60  50A00008   BEQL A1, ZERO, 0x9D008E84
9D008E64  00082C02   SRL A1, T0, 16
9D008E68  00052023   SUBU A0, ZERO, A1
9D008E6C  008A2006   SRLV A0, T2, A0
9D008E70  00A21004   SLLV V0, V0, A1
9D008E74  00A84004   SLLV T0, T0, A1
9D008E78  00821025   OR V0, A0, V0
9D008E7C  00AA5004   SLLV T2, T2, A1
9D008E80  00082C02   SRL A1, T0, 16
9D008E84  0045001B   DIVU V0, A1
9D008E88  00A001F4   TEQ A1, ZERO
9D008E8C  3107FFFF   ANDI A3, T0, -1
9D008E90  000A2402   SRL A0, T2, 16
9D008E94  00003012   MFLO A2
9D008E98  00001010   MFHI V0
9D008E9C  00021400   SLL V0, V0, 16
9D008EA0  00442025   OR A0, V0, A0
9D008EA4  70E64802   MUL T1, A3, A2
9D008EA8  0089582B   SLTU T3, A0, T1
9D008EAC  1160000A   BEQ T3, ZERO, 0x9D008ED8
9D008EB0  00C01025   OR V0, A2, ZERO
9D008EB4  00882021   ADDU A0, A0, T0
9D008EB8  0088582B   SLTU T3, A0, T0
9D008EBC  15600006   BNE T3, ZERO, 0x9D008ED8
9D008EC0  24C2FFFF   ADDIU V0, A2, -1
9D008EC4  0089582B   SLTU T3, A0, T1
9D008EC8  51600004   BEQL T3, ZERO, 0x9D008EDC
9D008ECC  00892023   SUBU A0, A0, T1
9D008ED0  24C2FFFE   ADDIU V0, A2, -2
9D008ED4  00882021   ADDU A0, A0, T0
9D008ED8  00892023   SUBU A0, A0, T1
9D008EDC  0085001B   DIVU A0, A1
9D008EE0  00A001F4   TEQ A1, ZERO
9D008EE4  314AFFFF   ANDI T2, T2, -1
9D008EE8  00002012   MFLO A0
9D008EEC  00002810   MFHI A1
9D008EF0  00052C00   SLL A1, A1, 16
9D008EF4  00AA5025   OR T2, A1, T2
9D008EF8  70E43802   MUL A3, A3, A0
9D008EFC  0147282B   SLTU A1, T2, A3
9D008F00  10A00006   BEQ A1, ZERO, 0x9D008F1C
9D008F04  00803025   OR A2, A0, ZERO
9D008F08  010A5021   ADDU T2, T0, T2
9D008F0C  0148402B   SLTU T0, T2, T0
9D008F10  2486FFFF   ADDIU A2, A0, -1
9D008F14  11000036   BEQ T0, ZERO, 0x9D008FF0
9D008F18  0147502B   SLTU T2, T2, A3
9D008F1C  00021400   SLL V0, V0, 16
9D008F20  03E00008   JR RA
9D008F24  00461025   OR V0, V0, A2
9D008F28  15000006   BNE T0, ZERO, 0x9D008F44
9D008F2C  71021020   CLZ V0, T0
9D008F30  24020001   ADDIU V0, ZERO, 1
9D008F34  0048001B   DIVU V0, T0
9D008F38  010001F4   TEQ T0, ZERO
9D008F3C  00004012   MFLO T0
9D008F40  71021020   CLZ V0, T0
9D008F44  1440002E   BNE V0, ZERO, 0x9D009000
9D008F48  24090020   ADDIU T1, ZERO, 32
9D008F4C  00A82823   SUBU A1, A1, T0
9D008F50  24030001   ADDIU V1, ZERO, 1
9D008F54  00083402   SRL A2, T0, 16
9D008F58  00A6001B   DIVU A1, A2
9D008F5C  00C001F4   TEQ A2, ZERO
9D008F60  3107FFFF   ANDI A3, T0, -1
9D008F64  000A2402   SRL A0, T2, 16
9D008F68  00002812   MFLO A1
9D008F6C  00001010   MFHI V0
9D008F70  00021400   SLL V0, V0, 16
9D008F74  00442025   OR A0, V0, A0
9D008F78  70E54802   MUL T1, A3, A1
9D008F7C  0089582B   SLTU T3, A0, T1
9D008F80  1160000A   BEQ T3, ZERO, 0x9D008FAC
9D008F84  00A01025   OR V0, A1, ZERO
9D008F88  00882021   ADDU A0, A0, T0
9D008F8C  0088582B   SLTU T3, A0, T0
9D008F90  15600006   BNE T3, ZERO, 0x9D008FAC
9D008F94  24A2FFFF   ADDIU V0, A1, -1
9D008F98  0089582B   SLTU T3, A0, T1
9D008F9C  51600004   BEQL T3, ZERO, 0x9D008FB0
9D008FA0  00892023   SUBU A0, A0, T1
9D008FA4  24A2FFFE   ADDIU V0, A1, -2
9D008FA8  00882021   ADDU A0, A0, T0
9D008FAC  00892023   SUBU A0, A0, T1
9D008FB0  0086001B   DIVU A0, A2
9D008FB4  00C001F4   TEQ A2, ZERO
9D008FB8  314AFFFF   ANDI T2, T2, -1
9D008FBC  00002012   MFLO A0
9D008FC0  00003010   MFHI A2
9D008FC4  00063400   SLL A2, A2, 16
9D008FC8  00CA5025   OR T2, A2, T2
9D008FCC  70E42802   MUL A1, A3, A0
9D008FD0  0145382B   SLTU A3, T2, A1
9D008FD4  10E0FFD1   BEQ A3, ZERO, 0x9D008F1C
9D008FD8  00803025   OR A2, A0, ZERO
9D008FDC  010A5021   ADDU T2, T0, T2
9D008FE0  0148402B   SLTU T0, T2, T0
9D008FE4  1500FFCD   BNE T0, ZERO, 0x9D008F1C
9D008FE8  2486FFFF   ADDIU A2, A0, -1
9D008FEC  0145502B   SLTU T2, T2, A1
9D008FF0  5540FFCA   BNEL T2, ZERO, 0x9D008F1C
9D008FF4  2486FFFE   ADDIU A2, A0, -2
9D008FF8  1000FFC9   BEQ ZERO, ZERO, 0x9D008F20
9D008FFC  00021400   SLL V0, V0, 16
9D009000  01224823   SUBU T1, T1, V0
9D009004  00484004   SLLV T0, T0, V0
9D009008  00451804   SLLV V1, A1, V0
9D00900C  00445004   SLLV T2, A0, V0
9D009010  01252806   SRLV A1, A1, T1
9D009014  00081402   SRL V0, T0, 16
9D009018  00A2001B   DIVU A1, V0
9D00901C  004001F4   TEQ V0, ZERO
9D009020  3106FFFF   ANDI A2, T0, -1
9D009024  01243806   SRLV A3, A0, T1
9D009028  00E33825   OR A3, A3, V1
9D00902C  00071C02   SRL V1, A3, 16
9D009030  00002812   MFLO A1
9D009034  00002010   MFHI A0
9D009038  00042400   SLL A0, A0, 16
9D00903C  00832025   OR A0, A0, V1
9D009040  70C54802   MUL T1, A2, A1
9D009044  0089582B   SLTU T3, A0, T1
9D009048  1160000A   BEQ T3, ZERO, 0x9D009074
9D00904C  00A01825   OR V1, A1, ZERO
9D009050  00882021   ADDU A0, A0, T0
9D009054  0088582B   SLTU T3, A0, T0
9D009058  15600006   BNE T3, ZERO, 0x9D009074
9D00905C  24A3FFFF   ADDIU V1, A1, -1
9D009060  0089582B   SLTU T3, A0, T1
9D009064  51600004   BEQL T3, ZERO, 0x9D009078
9D009068  00892023   SUBU A0, A0, T1
9D00906C  24A3FFFE   ADDIU V1, A1, -2
9D009070  00882021   ADDU A0, A0, T0
9D009074  00892023   SUBU A0, A0, T1
9D009078  0082001B   DIVU A0, V0
9D00907C  004001F4   TEQ V0, ZERO
9D009080  30E5FFFF   ANDI A1, A3, -1
9D009084  00001012   MFLO V0
9D009088  00002010   MFHI A0
9D00908C  00042400   SLL A0, A0, 16
9D009090  00852825   OR A1, A0, A1
9D009094  70C23002   MUL A2, A2, V0
9D009098  00A6382B   SLTU A3, A1, A2
9D00909C  10E0000A   BEQ A3, ZERO, 0x9D0090C8
9D0090A0  00402025   OR A0, V0, ZERO
9D0090A4  00A82821   ADDU A1, A1, T0
9D0090A8  00A8382B   SLTU A3, A1, T0
9D0090AC  14E00006   BNE A3, ZERO, 0x9D0090C8
9D0090B0  2444FFFF   ADDIU A0, V0, -1
9D0090B4  00A6382B   SLTU A3, A1, A2
9D0090B8  50E00004   BEQL A3, ZERO, 0x9D0090CC
9D0090BC  00031C00   SLL V1, V1, 16
9D0090C0  2444FFFE   ADDIU A0, V0, -2
9D0090C4  00A82821   ADDU A1, A1, T0
9D0090C8  00031C00   SLL V1, V1, 16
9D0090CC  00A62823   SUBU A1, A1, A2
9D0090D0  1000FFA0   BEQ ZERO, ZERO, 0x9D008F54
9D0090D4  00641825   OR V1, V1, A0
9D0090D8  00A7102B   SLTU V0, A1, A3
9D0090DC  1440004F   BNE V0, ZERO, 0x9D00921C
9D0090E0  00001825   OR V1, ZERO, ZERO
9D0090E4  70EA5020   CLZ T2, A3
9D0090E8  15400008   BNE T2, ZERO, 0x9D00910C
9D0090EC  24090020   ADDIU T1, ZERO, 32
9D0090F0  00E5282B   SLTU A1, A3, A1
9D0090F4  54A0004A   BNEL A1, ZERO, 0x9D009220
9D0090F8  24020001   ADDIU V0, ZERO, 1
9D0090FC  0086102B   SLTU V0, A0, A2
9D009100  38420001   XORI V0, V0, 1
9D009104  03E00008   JR RA
9D009108  00001825   OR V1, ZERO, ZERO
9D00910C  012A4823   SUBU T1, T1, T2
9D009110  01261006   SRLV V0, A2, T1
9D009114  01473804   SLLV A3, A3, T2
9D009118  00473825   OR A3, V0, A3
9D00911C  00074402   SRL T0, A3, 16
9D009120  01451004   SLLV V0, A1, T2
9D009124  01252806   SRLV A1, A1, T1
9D009128  00A8001B   DIVU A1, T0
9D00912C  010001F4   TEQ T0, ZERO
9D009130  01246006   SRLV T4, A0, T1
9D009134  30EBFFFF   ANDI T3, A3, -1
9D009138  01826025   OR T4, T4, V0
9D00913C  000C1C02   SRL V1, T4, 16
9D009140  01463004   SLLV A2, A2, T2
9D009144  00002812   MFLO A1
9D009148  00004810   MFHI T1
9D00914C  00094C00   SLL T1, T1, 16
9D009150  01234825   OR T1, T1, V1
9D009154  71651002   MUL V0, T3, A1
9D009158  0122682B   SLTU T5, T1, V0
9D00915C  11A0000A   BEQ T5, ZERO, 0x9D009188
9D009160  00A01825   OR V1, A1, ZERO
9D009164  01274821   ADDU T1, T1, A3
9D009168  0127682B   SLTU T5, T1, A3
9D00916C  15A00006   BNE T5, ZERO, 0x9D009188
9D009170  24A3FFFF   ADDIU V1, A1, -1
9D009174  0122682B   SLTU T5, T1, V0
9D009178  51A00004   BEQL T5, ZERO, 0x9D00918C
9D00917C  01224823   SUBU T1, T1, V0
9D009180  24A3FFFE   ADDIU V1, A1, -2
9D009184  01274821   ADDU T1, T1, A3
9D009188  01224823   SUBU T1, T1, V0
9D00918C  0128001B   DIVU T1, T0
9D009190  010001F4   TEQ T0, ZERO
9D009194  3185FFFF   ANDI A1, T4, -1
9D009198  00004012   MFLO T0
9D00919C  00004810   MFHI T1
9D0091A0  00094C00   SLL T1, T1, 16
9D0091A4  01252825   OR A1, T1, A1
9D0091A8  71685802   MUL T3, T3, T0
9D0091AC  00AB102B   SLTU V0, A1, T3
9D0091B0  1040000A   BEQ V0, ZERO, 0x9D0091DC
9D0091B4  01004825   OR T1, T0, ZERO
9D0091B8  00A72821   ADDU A1, A1, A3
9D0091BC  00A7102B   SLTU V0, A1, A3
9D0091C0  14400006   BNE V0, ZERO, 0x9D0091DC
9D0091C4  2509FFFF   ADDIU T1, T0, -1
9D0091C8  00AB102B   SLTU V0, A1, T3
9D0091CC  10400004   BEQ V0, ZERO, 0x9D0091E0
9D0091D0  00031400   SLL V0, V1, 16
9D0091D4  2509FFFE   ADDIU T1, T0, -2
9D0091D8  00A72821   ADDU A1, A1, A3
9D0091DC  00031400   SLL V0, V1, 16
9D0091E0  00491025   OR V0, V0, T1
9D0091E4  00460019   MULTU 0, V0, A2
9D0091E8  00AB2823   SUBU A1, A1, T3
9D0091EC  00003810   MFHI A3
9D0091F0  00A7182B   SLTU V1, A1, A3
9D0091F4  14600007   BNE V1, ZERO, 0x9D009214
9D0091F8  00003012   MFLO A2
9D0091FC  14A70008   BNE A1, A3, 0x9D009220
9D009200  00001825   OR V1, ZERO, ZERO
9D009204  01442004   SLLV A0, A0, T2
9D009208  0086202B   SLTU A0, A0, A2
9D00920C  10800004   BEQ A0, ZERO, 0x9D009220
9D009210  00000000   NOP
9D009214  1000FFBB   BEQ ZERO, ZERO, 0x9D009104
9D009218  2442FFFF   ADDIU V0, V0, -1
9D00921C  00001025   OR V0, ZERO, ZERO
9D009220  03E00008   JR RA
9D009224  00000000   NOP
9D011618  10C00008   BEQ A2, ZERO, 0x9D01163C
9D01161C  00801025   OR V0, A0, ZERO
9D011620  24030020   ADDIU V1, ZERO, 32
9D011624  00661823   SUBU V1, V1, A2
9D011628  1C600006   BGTZ V1, 0x9D011644
9D01162C  00C52006   SRLV A0, A1, A2
9D011630  00002025   OR A0, ZERO, ZERO
9D011634  00C51006   SRLV V0, A1, A2
9D011638  00802825   OR A1, A0, ZERO
9D01163C  03E00008   JR RA
9D011640  00A01825   OR V1, A1, ZERO
9D011644  00C21006   SRLV V0, V0, A2
9D011648  00652804   SLLV A1, A1, V1
9D01164C  1000FFFA   BEQ ZERO, ZERO, 0x9D011638
9D011650  00451025   OR V0, V0, A1
9D011654  10C00008   BEQ A2, ZERO, 0x9D011678
9D011658  00801025   OR V0, A0, ZERO
9D01165C  24040020   ADDIU A0, ZERO, 32
9D011660  00862023   SUBU A0, A0, A2
9D011664  5C800006   BGTZL A0, 0x9D011680
9D011668  00C21804   SLLV V1, V0, A2
9D01166C  00001825   OR V1, ZERO, ZERO
9D011670  00C22804   SLLV A1, V0, A2
9D011674  00601025   OR V0, V1, ZERO
9D011678  03E00008   JR RA
9D01167C  00A01825   OR V1, A1, ZERO
9D011680  00C52804   SLLV A1, A1, A2
9D011684  00821006   SRLV V0, V0, A0
9D011688  1000FFFA   BEQ ZERO, ZERO, 0x9D011674
9D01168C  00A22825   OR A1, A1, V0
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/build-Linux/pic32m-libs/libpic32/stubs/sbrk.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
00000000  00000000   NOP
0000000C  00000000   NOP
00000014  00000000   NOP
0000001C  00000000   NOP
00000028  00000000   NOP
00000038  00000000   NOP
9D00CBC4  27BDFFD8   ADDIU SP, SP, -40
9D00CBC8  AFB40020   SW S4, 32(SP)
9D00CBCC  3C148000   LUI S4, -32768
9D00CBD0  8E823588   LW V0, 13704(S4)
9D00CBD4  AFBF0024   SW RA, 36(SP)
9D00CBD8  AFB3001C   SW S3, 28(SP)
9D00CBDC  AFB20018   SW S2, 24(SP)
9D00CBE0  AFB10014   SW S1, 20(SP)
9D00CBE4  1440002E   BNE V0, ZERO, _sbrk_init
9D00CBE8  AFB00010   SW S0, 16(SP)
9D00CBEC  3C128000   LUI S2, -32768
9D00CBF0  8E513590   LW S1, 13712(S2)
9D00CBF4  16200003   BNE S1, ZERO, _sbrk_init
9D00CBF8  3C138000   LUI S3, -32768
9D00CBFC  3C118000   LUI S1, -32768
9D00CC00  263135A0   ADDIU S1, S1, 13728
9D00CC04  8E70358C   LW S0, 13708(S3)
9D00CC08  16000006   BNE S0, ZERO, _sbrk_init
9D00CC0C  00111F82   SRL V1, S1, 30
9D00CC10  3C108000   LUI S0, -32768
9D00CC14  3C020000   LUI V0, 0
9D00CC18  261035A0   ADDIU S0, S0, 13728
9D00CC1C  24421B58   ADDIU V0, V0, 7000
9D00CC20  02028021   ADDU S0, S0, V0
9D00CC24  24020002   ADDIU V0, ZERO, 2
9D00CC28  50620001   BEQL V1, V0, _sbrk_init
9D00CC2C  7E31E000   EXT S1, S1, 0, 29
9D00CC30  00101F82   SRL V1, S0, 30
9D00CC34  24020002   ADDIU V0, ZERO, 2
9D00CC38  50620001   BEQL V1, V0, _sbrk_init
9D00CC3C  7E10E000   EXT S0, S0, 0, 29
9D00CC40  0F404682   JAL _stub_sbd_memlayout
9D00CC44  00000000   NOP
9D00CC48  8C430000   LW V1, 0(V0)
9D00CC4C  8C420004   LW V0, 4(V0)
9D00CC50  0223202B   SLTU A0, S1, V1
9D00CC54  14800004   BNE A0, ZERO, _sbrk_init
9D00CC58  00621021   ADDU V0, V1, V0
9D00CC5C  0222202B   SLTU A0, S1, V0
9D00CC60  54800029   BNEL A0, ZERO, _sbrk_init::_sbrk_init
9D00CC64  0211182B   SLTU V1, S0, S1
9D00CC68  3C048000   LUI A0, -32768
9D00CC6C  248402A0   ADDIU A0, A0, 672
9D00CC70  7C84E000   EXT A0, A0, 0, 29
9D00CC74  0064202B   SLTU A0, V1, A0
9D00CC78  14800009   BNE A0, ZERO, _sbrk_init
9D00CC7C  0203202B   SLTU A0, S0, V1
9D00CC80  14800005   BNE A0, ZERO, _sbrk_init
9D00CC84  0062202B   SLTU A0, V1, V0
9D00CC88  0202202B   SLTU A0, S0, V0
9D00CC8C  5480000C   BNEL A0, ZERO, _sbrk_init::_sbrk_init
9D00CC90  02001025   OR V0, S0, ZERO
9D00CC94  0062202B   SLTU A0, V1, V0
9D00CC98  1480000A   BNE A0, ZERO, _sbrk_init
9D00CC9C  3C048000   LUI A0, -32768
9D00CCA0  8FBF0024   LW RA, 36(SP)
9D00CCA4  8FB40020   LW S4, 32(SP)
9D00CCA8  8FB3001C   LW S3, 28(SP)
9D00CCAC  8FB20018   LW S2, 24(SP)
9D00CCB0  8FB10014   LW S1, 20(SP)
9D00CCB4  8FB00010   LW S0, 16(SP)
9D00CCB8  03E00008   JR RA
9D00CCBC  27BD0028   ADDIU SP, SP, 40
9D00CCC0  3C048000   LUI A0, -32768
9D00CCC4  248402A0   ADDIU A0, A0, 672
9D00CCC8  00042742   SRL A0, A0, 29
9D00CCCC  24050005   ADDIU A1, ZERO, 5
9D00CCD0  14850009   BNE A0, A1, _sbrk_init::_sbrk_init
9D00CCD4  24050004   ADDIU A1, ZERO, 4
9D00CCD8  3C04A000   LUI A0, -24576
9D00CCDC  00641825   OR V1, V1, A0
9D00CCE0  00441025   OR V0, V0, A0
9D00CCE4  AE433590   SW V1, 13712(S2)
9D00CCE8  AE62358C   SW V0, 13708(S3)
9D00CCEC  8E423590   LW V0, 13712(S2)
9D00CCF0  1000FFEB   BEQ ZERO, ZERO, _sbrk_init
9D00CCF4  AE823588   SW V0, 13704(S4)
9D00CCF8  5485FFFC   BNEL A0, A1, _sbrk_init
9D00CCFC  AE423590   SW V0, 13712(S2)
9D00CD00  1000FFF6   BEQ ZERO, ZERO, _sbrk_init
9D00CD04  3C048000   LUI A0, -32768
9D00CD08  1460FFED   BNE V1, ZERO, _sbrk_init::_sbrk_init
9D00CD0C  02201825   OR V1, S1, ZERO
9D00CD10  1000FFDE   BEQ ZERO, ZERO, _sbrk_init
9D00CD14  0202202B   SLTU A0, S0, V0
9D00F63C  27BDFFE0   ADDIU SP, SP, -32
9D00F640  AFB00014   SW S0, 20(SP)
9D00F644  3C108000   LUI S0, -32768
9D00F648  8E023588   LW V0, 13704(S0)
9D00F64C  AFB10018   SW S1, 24(SP)
9D00F650  AFBF001C   SW RA, 28(SP)
9D00F654  1440000F   BNE V0, ZERO, 0x9D00F694
9D00F658  00808825   OR S1, A0, ZERO
9D00F65C  0F4032F1   JAL _sbrk_init
9D00F660  00000000   NOP
9D00F664  8E023588   LW V0, 13704(S0)
9D00F668  1440000B   BNE V0, ZERO, 0x9D00F698
9D00F66C  00000000   NOP
9D00F670  3C028000   LUI V0, -32768
9D00F674  2403000C   ADDIU V1, ZERO, 12
9D00F678  AC433598   SW V1, 13720(V0)
9D00F67C  2402FFFF   ADDIU V0, ZERO, -1
9D00F680  8FBF001C   LW RA, 28(SP)
9D00F684  8FB10018   LW S1, 24(SP)
9D00F688  8FB00014   LW S0, 20(SP)
9D00F68C  03E00008   JR RA
9D00F690  27BD0020   ADDIU SP, SP, 32
9D00F694  8E023588   LW V0, 13704(S0)
9D00F698  1A20000A   BLEZ S1, 0x9D00F6C4
9D00F69C  00511821   ADDU V1, V0, S1
9D00F6A0  0062202B   SLTU A0, V1, V0
9D00F6A4  1480FFF2   BNE A0, ZERO, 0x9D00F670
9D00F6A8  3C048000   LUI A0, -32768
9D00F6AC  8C84358C   LW A0, 13708(A0)
9D00F6B0  0083202B   SLTU A0, A0, V1
9D00F6B4  5480FFEF   BNEL A0, ZERO, 0x9D00F674
9D00F6B8  3C028000   LUI V0, -32768
9D00F6BC  1000FFF0   BEQ ZERO, ZERO, 0x9D00F680
9D00F6C0  AE033588   SW V1, 13704(S0)
9D00F6C4  0043202B   SLTU A0, V0, V1
9D00F6C8  14800005   BNE A0, ZERO, 0x9D00F6E0
9D00F6CC  3C048000   LUI A0, -32768
9D00F6D0  8C843590   LW A0, 13712(A0)
9D00F6D4  0064202B   SLTU A0, V1, A0
9D00F6D8  5080FFE9   BEQL A0, ZERO, 0x9D00F680
9D00F6DC  AE033588   SW V1, 13704(S0)
9D00F6E0  3C028000   LUI V0, -32768
9D00F6E4  1000FFE4   BEQ ZERO, ZERO, 0x9D00F678
9D00F6E8  24030016   ADDIU V1, ZERO, 22
9D011A08  3C048000   LUI A0, -32768
9D011A18  3C038000   LUI V1, -32768
9D011A1C  246335A0   ADDIU V1, V1, 13728
9D011A20  AC833570   SW V1, 13680(A0)
9D011A24  3C030000   LUI V1, 0
9D011A28  24631B58   ADDIU V1, V1, 7000
9D011A2C  03E00008   JR RA
9D011A30  AC430004   SW V1, 4(V0)
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/build-Linux/pic32m-libs/libpic32/stubs/default-on-reset.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D011DD0  03E00008   JR RA
9D011DD4  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/build-Linux/pic32m-libs/libpic32/stubs/default-on-bootstrap.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D011DD8  03E00008   JR RA
9D011DDC  00000000   NOP
---  /data01/build/bamboo/xml-data/build-dir/M32DEV-GMB34-JOB1/build-Linux/pic32m-libs/libpic32/default_vector_dispatch/defaultinterrupt.c
-----*  Optimizer-Generated Procedural Abstractions  *----------------------------------------------
9D000220  3C020000   LUI V0, 0
9D000224  24420000   ADDIU V0, V0, 0
9D000228  10400007   BEQ V0, ZERO, 0x9D000248
9D00022C  3C020000   LUI V0, 0
9D000230  24420000   ADDIU V0, V0, 0
9D000234  50400005   BEQL V0, ZERO, 0x9D00024C
9D000238  3C029D01   LUI V0, -25343
9D00023C  7000003F   SDBBP 0
9D000240  03E00008   JR RA
9D000244  00000000   NOP
9D000248  3C029D01   LUI V0, -25343
9D00024C  244213E0   ADDIU V0, V0, 5088
9D000250  10400003   BEQ V0, ZERO, 0x9D000260
9D000254  00000000   NOP
9D000258  0040F809   JALR V0
9D00025C  00000000   NOP
9D000260  03E00008   JR RA
9D000264  00000000   NOP
